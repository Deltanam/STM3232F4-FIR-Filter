
lab2_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005848  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  080059e8  080059e8  000159e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005de4  08005de4  000203ac  2**0
                  CONTENTS
  4 .ARM          00000008  08005de4  08005de4  00015de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005dec  08005dec  000203ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005dec  08005dec  00015dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005df0  08005df0  00015df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003ac  20000000  08005df4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000678  200003ac  080061a0  000203ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a24  080061a0  00020a24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001225e  00000000  00000000  000203dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024d0  00000000  00000000  0003263a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00034b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c78  00000000  00000000  00035880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003663  00000000  00000000  000364f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f187  00000000  00000000  00039b5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a98a  00000000  00000000  00048ce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e366c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000478c  00000000  00000000  000e36c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200003ac 	.word	0x200003ac
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080059d0 	.word	0x080059d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200003b0 	.word	0x200003b0
 80001dc:	080059d0 	.word	0x080059d0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000eb8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ebc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d013      	beq.n	8000ef0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ec8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ecc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000ed0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d00b      	beq.n	8000ef0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ed8:	e000      	b.n	8000edc <ITM_SendChar+0x2c>
    {
      __NOP();
 8000eda:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000edc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d0f9      	beq.n	8000eda <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000ee6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	b2d2      	uxtb	r2, r2
 8000eee:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000ef0:	687b      	ldr	r3, [r7, #4]
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
       - Configure the Flash prefetch, instruction and Data caches
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Global MSP (MCU Support Package) initialization
     */
  HAL_Init();
 8000f04:	f000 fbd0 	bl	80016a8 <HAL_Init>

  /* Configure LED3, LED4, LED5 and LED6 */
  BSP_LED_Init(LED3);
 8000f08:	2001      	movs	r0, #1
 8000f0a:	f001 ff5f 	bl	8002dcc <BSP_LED_Init>
  BSP_LED_Init(LED4);
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f001 ff5c 	bl	8002dcc <BSP_LED_Init>
  BSP_LED_Init(LED5);
 8000f14:	2002      	movs	r0, #2
 8000f16:	f001 ff59 	bl	8002dcc <BSP_LED_Init>
  BSP_LED_Init(LED6);
 8000f1a:	2003      	movs	r0, #3
 8000f1c:	f001 ff56 	bl	8002dcc <BSP_LED_Init>

  /* Configure the system clock to 100 MHz */
  SystemClock_Config();
 8000f20:	f000 f8d4 	bl	80010cc <SystemClock_Config>

  /* Configure GPIO so that we can probe PB2 with an Oscilloscope */
  GPIOA_Init();
 8000f24:	f000 f97c 	bl	8001220 <GPIOA_Init>

  /* Configure the User Button in GPIO Mode */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8000f28:	2101      	movs	r1, #1
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f001 ffe0 	bl	8002ef0 <BSP_PB_Init>

  /* Set TIMx instance */
  TimHandle.Instance = TIMx;
 8000f30:	4b53      	ldr	r3, [pc, #332]	; (8001080 <main+0x180>)
 8000f32:	4a54      	ldr	r2, [pc, #336]	; (8001084 <main+0x184>)
 8000f34:	601a      	str	r2, [r3, #0]

  /* Initialize TIM3 peripheral to toggle with a frequency of ~ 8 kHz
   * System clock is 100 MHz and TIM3 is counting at the rate of the system clock
   * so 100 M / 8 k is 12500
   */
  TimHandle.Init.Period = 12499;
 8000f36:	4b52      	ldr	r3, [pc, #328]	; (8001080 <main+0x180>)
 8000f38:	f243 02d3 	movw	r2, #12499	; 0x30d3
 8000f3c:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = 0;
 8000f3e:	4b50      	ldr	r3, [pc, #320]	; (8001080 <main+0x180>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	605a      	str	r2, [r3, #4]
  TimHandle.Init.ClockDivision = 0;
 8000f44:	4b4e      	ldr	r3, [pc, #312]	; (8001080 <main+0x180>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4a:	4b4d      	ldr	r3, [pc, #308]	; (8001080 <main+0x180>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f50:	4b4b      	ldr	r3, [pc, #300]	; (8001080 <main+0x180>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	619a      	str	r2, [r3, #24]
  if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 8000f56:	484a      	ldr	r0, [pc, #296]	; (8001080 <main+0x180>)
 8000f58:	f001 fcc2 	bl	80028e0 <HAL_TIM_Base_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <main+0x66>
  {
	  /* Initialization Error */
	  Error_Handler();
 8000f62:	f000 f957 	bl	8001214 <Error_Handler>
  }

  ITM_Port32(30) = 0;
 8000f66:	4b48      	ldr	r3, [pc, #288]	; (8001088 <main+0x188>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
  if(HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK)
 8000f6c:	4844      	ldr	r0, [pc, #272]	; (8001080 <main+0x180>)
 8000f6e:	f001 fd07 	bl	8002980 <HAL_TIM_Base_Start_IT>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <main+0x7c>
  {
	  /* Starting Error */
	  Error_Handler();
 8000f78:	f000 f94c 	bl	8001214 <Error_Handler>
   ******************************************************************************
   ******************************************************************************
   */


  history_l_end = history_l + 220;
 8000f7c:	4a43      	ldr	r2, [pc, #268]	; (800108c <main+0x18c>)
 8000f7e:	4b44      	ldr	r3, [pc, #272]	; (8001090 <main+0x190>)
 8000f80:	601a      	str	r2, [r3, #0]
  history_l_oldest = history_l;
 8000f82:	4b44      	ldr	r3, [pc, #272]	; (8001094 <main+0x194>)
 8000f84:	4a44      	ldr	r2, [pc, #272]	; (8001098 <main+0x198>)
 8000f86:	601a      	str	r2, [r3, #0]

  while (1) {


#ifdef FUNCTIONAL_TEST
		if (sample_count < 64000) {
 8000f88:	4b44      	ldr	r3, [pc, #272]	; (800109c <main+0x19c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8000f90:	da1a      	bge.n	8000fc8 <main+0xc8>
			  newSampleL = (int16_t)raw_audio[sample_count];
 8000f92:	4b43      	ldr	r3, [pc, #268]	; (80010a0 <main+0x1a0>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	4b41      	ldr	r3, [pc, #260]	; (800109c <main+0x19c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4413      	add	r3, r2
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	b21a      	sxth	r2, r3
 8000fa2:	4b40      	ldr	r3, [pc, #256]	; (80010a4 <main+0x1a4>)
 8000fa4:	801a      	strh	r2, [r3, #0]
			  newSampleR = (int16_t)(raw_audio[sample_count] >> 16);
 8000fa6:	4b3e      	ldr	r3, [pc, #248]	; (80010a0 <main+0x1a0>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	4b3c      	ldr	r3, [pc, #240]	; (800109c <main+0x19c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	4413      	add	r3, r2
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	141b      	asrs	r3, r3, #16
 8000fb6:	b21a      	sxth	r2, r3
 8000fb8:	4b3b      	ldr	r3, [pc, #236]	; (80010a8 <main+0x1a8>)
 8000fba:	801a      	strh	r2, [r3, #0]
			  sample_count++;
 8000fbc:	4b37      	ldr	r3, [pc, #220]	; (800109c <main+0x19c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	4a36      	ldr	r2, [pc, #216]	; (800109c <main+0x19c>)
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	e002      	b.n	8000fce <main+0xce>
		  } else {
			  sample_count = 0;
 8000fc8:	4b34      	ldr	r3, [pc, #208]	; (800109c <main+0x19c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
#endif

#ifndef FUNCTIONAL_TEST
	if (new_sample_flag == 1) {
#endif
		ITM_Port32(31) = 1;
 8000fce:	4b37      	ldr	r3, [pc, #220]	; (80010ac <main+0x1ac>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	601a      	str	r2, [r3, #0]
		filteredSampleL = ProcessSample(newSampleL,history_l);
 8000fd4:	4b33      	ldr	r3, [pc, #204]	; (80010a4 <main+0x1a4>)
 8000fd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fda:	492f      	ldr	r1, [pc, #188]	; (8001098 <main+0x198>)
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f000 f94d 	bl	800127c <ProcessSample>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b32      	ldr	r3, [pc, #200]	; (80010b0 <main+0x1b0>)
 8000fe8:	801a      	strh	r2, [r3, #0]
		//filteredSampleL = ProcessSampleNew(newSampleL, history_l);
		//filteredSampleL = ProcessSample2(newSampleL,history_l);
		//filteredSampleL = ProcessSample3(newSampleL,history_l);
		//filteredSampleL = ProcessSample4(newSampleL,history_l);
		ITM_Port32(31) = 2;
 8000fea:	4b30      	ldr	r3, [pc, #192]	; (80010ac <main+0x1ac>)
 8000fec:	2202      	movs	r2, #2
 8000fee:	601a      	str	r2, [r3, #0]

		new_sample_flag = 0;
 8000ff0:	4b30      	ldr	r3, [pc, #192]	; (80010b4 <main+0x1b4>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
		if (i < NUMBER_OF_TAPS-1) {
 8000ff6:	4b30      	ldr	r3, [pc, #192]	; (80010b8 <main+0x1b8>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2bda      	cmp	r3, #218	; 0xda
 8000ffc:	dc08      	bgt.n	8001010 <main+0x110>
			filteredSampleL = 0;
 8000ffe:	4b2c      	ldr	r3, [pc, #176]	; (80010b0 <main+0x1b0>)
 8001000:	2200      	movs	r2, #0
 8001002:	801a      	strh	r2, [r3, #0]
			i++;
 8001004:	4b2c      	ldr	r3, [pc, #176]	; (80010b8 <main+0x1b8>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	3301      	adds	r3, #1
 800100a:	4a2b      	ldr	r2, [pc, #172]	; (80010b8 <main+0x1b8>)
 800100c:	6013      	str	r3, [r2, #0]
 800100e:	e025      	b.n	800105c <main+0x15c>
		} else {
			if (bufchoice == 0) {
 8001010:	4b2a      	ldr	r3, [pc, #168]	; (80010bc <main+0x1bc>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d10e      	bne.n	8001036 <main+0x136>
				filteredOutBufferA[k] = ((int32_t)filteredSampleL << 16) + (int32_t)filteredSampleL; // copy the filtered output to both channels
 8001018:	4b25      	ldr	r3, [pc, #148]	; (80010b0 <main+0x1b0>)
 800101a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800101e:	041a      	lsls	r2, r3, #16
 8001020:	4b23      	ldr	r3, [pc, #140]	; (80010b0 <main+0x1b0>)
 8001022:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001026:	4619      	mov	r1, r3
 8001028:	4b25      	ldr	r3, [pc, #148]	; (80010c0 <main+0x1c0>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	440a      	add	r2, r1
 800102e:	4925      	ldr	r1, [pc, #148]	; (80010c4 <main+0x1c4>)
 8001030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001034:	e00d      	b.n	8001052 <main+0x152>
			} else {
				filteredOutBufferB[k] = ((int32_t)filteredSampleL << 16) + (int32_t)filteredSampleL;
 8001036:	4b1e      	ldr	r3, [pc, #120]	; (80010b0 <main+0x1b0>)
 8001038:	f9b3 3000 	ldrsh.w	r3, [r3]
 800103c:	041a      	lsls	r2, r3, #16
 800103e:	4b1c      	ldr	r3, [pc, #112]	; (80010b0 <main+0x1b0>)
 8001040:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001044:	4619      	mov	r1, r3
 8001046:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <main+0x1c0>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	440a      	add	r2, r1
 800104c:	491e      	ldr	r1, [pc, #120]	; (80010c8 <main+0x1c8>)
 800104e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			}

			k++;
 8001052:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <main+0x1c0>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	3301      	adds	r3, #1
 8001058:	4a19      	ldr	r2, [pc, #100]	; (80010c0 <main+0x1c0>)
 800105a:	6013      	str	r3, [r2, #0]
	}
#endif

	// once a buffer is full, we can swap to fill up the other buffer
	// this is probably not going to be used in Lab2
	if (k == BUFFER_SIZE) {
 800105c:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <main+0x1c0>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b20      	cmp	r3, #32
 8001062:	d191      	bne.n	8000f88 <main+0x88>
		k = 0;
 8001064:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <main+0x1c0>)
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
		bufchoice = bufchoice == 0 ? 1 : 0;
 800106a:	4b14      	ldr	r3, [pc, #80]	; (80010bc <main+0x1bc>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	bf0c      	ite	eq
 8001072:	2301      	moveq	r3, #1
 8001074:	2300      	movne	r3, #0
 8001076:	b2db      	uxtb	r3, r3
 8001078:	461a      	mov	r2, r3
 800107a:	4b10      	ldr	r3, [pc, #64]	; (80010bc <main+0x1bc>)
 800107c:	601a      	str	r2, [r3, #0]
		if (sample_count < 64000) {
 800107e:	e783      	b.n	8000f88 <main+0x88>
 8001080:	20000894 	.word	0x20000894
 8001084:	40000400 	.word	0x40000400
 8001088:	e0000078 	.word	0xe0000078
 800108c:	20000870 	.word	0x20000870
 8001090:	200004f8 	.word	0x200004f8
 8001094:	20000870 	.word	0x20000870
 8001098:	200006b8 	.word	0x200006b8
 800109c:	200003d8 	.word	0x200003d8
 80010a0:	20000000 	.word	0x20000000
 80010a4:	200003dc 	.word	0x200003dc
 80010a8:	200003de 	.word	0x200003de
 80010ac:	e000007c 	.word	0xe000007c
 80010b0:	20000890 	.word	0x20000890
 80010b4:	200003d4 	.word	0x200003d4
 80010b8:	200004e4 	.word	0x200004e4
 80010bc:	200004e0 	.word	0x200004e0
 80010c0:	200004e8 	.word	0x200004e8
 80010c4:	200003e0 	.word	0x200003e0
 80010c8:	20000460 	.word	0x20000460

080010cc <SystemClock_Config>:
  *            Flash Latency(WS)              = 3
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b094      	sub	sp, #80	; 0x50
 80010d0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	4b28      	ldr	r3, [pc, #160]	; (8001178 <SystemClock_Config+0xac>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	4a27      	ldr	r2, [pc, #156]	; (8001178 <SystemClock_Config+0xac>)
 80010dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e0:	6413      	str	r3, [r2, #64]	; 0x40
 80010e2:	4b25      	ldr	r3, [pc, #148]	; (8001178 <SystemClock_Config+0xac>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ee:	2300      	movs	r3, #0
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	4b22      	ldr	r3, [pc, #136]	; (800117c <SystemClock_Config+0xb0>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a21      	ldr	r2, [pc, #132]	; (800117c <SystemClock_Config+0xb0>)
 80010f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010fc:	6013      	str	r3, [r2, #0]
 80010fe:	4b1f      	ldr	r3, [pc, #124]	; (800117c <SystemClock_Config+0xb0>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]

  /* Enable HSI Oscillator and activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800110a:	2302      	movs	r3, #2
 800110c:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800110e:	2301      	movs	r3, #1
 8001110:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSICalibrationValue = 0x10;
 8001112:	2310      	movs	r3, #16
 8001114:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001116:	2302      	movs	r3, #2
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800111a:	2300      	movs	r3, #0
 800111c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 16;
 800111e:	2310      	movs	r3, #16
 8001120:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001122:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001126:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001128:	2304      	movs	r3, #4
 800112a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800112c:	2307      	movs	r3, #7
 800112e:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	4618      	mov	r0, r3
 8001136:	f000 ff93 	bl	8002060 <HAL_RCC_OscConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001140:	f000 f868 	bl	8001214 <Error_Handler>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001144:	230f      	movs	r3, #15
 8001146:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001148:	2302      	movs	r3, #2
 800114a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800114c:	2300      	movs	r3, #0
 800114e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001150:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001154:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001156:	2300      	movs	r3, #0
 8001158:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800115a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800115e:	2103      	movs	r1, #3
 8001160:	4618      	mov	r0, r3
 8001162:	f001 f9f5 	bl	8002550 <HAL_RCC_ClockConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800116c:	f000 f852 	bl	8001214 <Error_Handler>
  }
}
 8001170:	bf00      	nop
 8001172:	3750      	adds	r7, #80	; 0x50
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40023800 	.word	0x40023800
 800117c:	40007000 	.word	0x40007000

08001180 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	80fb      	strh	r3, [r7, #6]
  if (KEY_BUTTON_PIN == GPIO_Pin)
 800118a:	88fb      	ldrh	r3, [r7, #6]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d109      	bne.n	80011a4 <HAL_GPIO_EXTI_Callback+0x24>
  {
    while (BSP_PB_GetState(BUTTON_KEY) != RESET);
 8001190:	bf00      	nop
 8001192:	2000      	movs	r0, #0
 8001194:	f001 ff02 	bl	8002f9c <BSP_PB_GetState>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1f9      	bne.n	8001192 <HAL_GPIO_EXTI_Callback+0x12>
    UserPressButton = 1;
 800119e:	4b03      	ldr	r3, [pc, #12]	; (80011ac <HAL_GPIO_EXTI_Callback+0x2c>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	701a      	strb	r2, [r3, #0]
  }
}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	200003c8 	.word	0x200003c8

080011b0 <HAL_TIM_PeriodElapsedCallback>:
}

// This timer callback should trigger every 1/8000 Hz, and it emulates
// the idea of receiving a new sample peridiocally
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
//  BSP_LED_Toggle(LED4);
//  HAL_GPIO_TogglePin(SCOPE_CHECK_GPIO_Port, SCOPE_CHECK_Pin);

	// If we "miss" processing a sample, the new_sample_flag will still be
	// high on the trigger of the interrupt
	if (new_sample_flag == 1) {
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d102      	bne.n	80011c6 <HAL_TIM_PeriodElapsedCallback+0x16>
		ITM_Port32(30) = 10;
 80011c0:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80011c2:	220a      	movs	r2, #10
 80011c4:	601a      	str	r2, [r3, #0]

		if (sample_count >= 64000) sample_count = 0;
		new_sample_flag = 1;
	}
#endif
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	200003d4 	.word	0x200003d4
 80011d8:	e0000078 	.word	0xe0000078

080011dc <_write>:

int _write(int file, char* ptr, int len) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	e009      	b.n	8001202 <_write+0x26>
		ITM_SendChar(*ptr++);
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	1c5a      	adds	r2, r3, #1
 80011f2:	60ba      	str	r2, [r7, #8]
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff fe5a 	bl	8000eb0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	3301      	adds	r3, #1
 8001200:	617b      	str	r3, [r7, #20]
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	429a      	cmp	r2, r3
 8001208:	dbf1      	blt.n	80011ee <_write+0x12>
	}
	return len;
 800120a:	687b      	ldr	r3, [r7, #4]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* Turn LED5 on */
  BSP_LED_On(LED5);
 8001218:	2002      	movs	r0, #2
 800121a:	f001 fe4f 	bl	8002ebc <BSP_LED_On>
  while(1)
 800121e:	e7fe      	b.n	800121e <Error_Handler+0xa>

08001220 <GPIOA_Init>:
  {
  }
}

static void GPIOA_Init(void){
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001234:	2300      	movs	r3, #0
 8001236:	603b      	str	r3, [r7, #0]
 8001238:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <GPIOA_Init+0x54>)
 800123a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123c:	4a0d      	ldr	r2, [pc, #52]	; (8001274 <GPIOA_Init+0x54>)
 800123e:	f043 0302 	orr.w	r3, r3, #2
 8001242:	6313      	str	r3, [r2, #48]	; 0x30
 8001244:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <GPIOA_Init+0x54>)
 8001246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001248:	f003 0302 	and.w	r3, r3, #2
 800124c:	603b      	str	r3, [r7, #0]
 800124e:	683b      	ldr	r3, [r7, #0]
	/*Configure GPIO pin : SCOPE_CHECK_Pin */
	  GPIO_InitStruct.Pin = SCOPE_CHECK_Pin;
 8001250:	2302      	movs	r3, #2
 8001252:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001254:	2301      	movs	r3, #1
 8001256:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125c:	2300      	movs	r3, #0
 800125e:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(SCOPE_CHECK_GPIO_Port, &GPIO_InitStruct);
 8001260:	1d3b      	adds	r3, r7, #4
 8001262:	4619      	mov	r1, r3
 8001264:	4804      	ldr	r0, [pc, #16]	; (8001278 <GPIOA_Init+0x58>)
 8001266:	f000 fd2d 	bl	8001cc4 <HAL_GPIO_Init>

}
 800126a:	bf00      	nop
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40023800 	.word	0x40023800
 8001278:	40020400 	.word	0x40020400

0800127c <ProcessSample>:

static int16_t ProcessSample(int16_t newsample, int16_t* history) {
 800127c:	b480      	push	{r7}
 800127e:	b087      	sub	sp, #28
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	6039      	str	r1, [r7, #0]
 8001286:	80fb      	strh	r3, [r7, #6]

	// set the new sample as the head
		history[0] = newsample;
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	88fa      	ldrh	r2, [r7, #6]
 800128c:	801a      	strh	r2, [r3, #0]

		// set up and do our convolution
		int tap = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
		int32_t accumulator = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	613b      	str	r3, [r7, #16]
		for (tap = 0; tap < NUMBER_OF_TAPS; tap++) {
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
 800129a:	e012      	b.n	80012c2 <ProcessSample+0x46>
			accumulator += (int32_t)filter_coeffs[tap] * (int32_t)history[tap];
 800129c:	4a27      	ldr	r2, [pc, #156]	; (800133c <ProcessSample+0xc0>)
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80012a4:	4619      	mov	r1, r3
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	683a      	ldr	r2, [r7, #0]
 80012ac:	4413      	add	r3, r2
 80012ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012b2:	fb03 f301 	mul.w	r3, r3, r1
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4413      	add	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
		for (tap = 0; tap < NUMBER_OF_TAPS; tap++) {
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	3301      	adds	r3, #1
 80012c0:	617b      	str	r3, [r7, #20]
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	2bdb      	cmp	r3, #219	; 0xdb
 80012c6:	dde9      	ble.n	800129c <ProcessSample+0x20>
		}

		// shuffle things along for the next one?
		for(tap = NUMBER_OF_TAPS-2; tap > -1; tap--) {
 80012c8:	23da      	movs	r3, #218	; 0xda
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	e00e      	b.n	80012ec <ProcessSample+0x70>
			history[tap+1] = history[tap];
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	683a      	ldr	r2, [r7, #0]
 80012d4:	441a      	add	r2, r3
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	3301      	adds	r3, #1
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	6839      	ldr	r1, [r7, #0]
 80012de:	440b      	add	r3, r1
 80012e0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80012e4:	801a      	strh	r2, [r3, #0]
		for(tap = NUMBER_OF_TAPS-2; tap > -1; tap--) {
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	3b01      	subs	r3, #1
 80012ea:	617b      	str	r3, [r7, #20]
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	daed      	bge.n	80012ce <ProcessSample+0x52>
		}

		if (accumulator > 0x3FFFFFFF) {
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012f8:	db08      	blt.n	800130c <ProcessSample+0x90>
			accumulator = 0x3FFFFFFF;
 80012fa:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80012fe:	613b      	str	r3, [r7, #16]
			overflow_count++;
 8001300:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <ProcessSample+0xc4>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	3301      	adds	r3, #1
 8001306:	4a0e      	ldr	r2, [pc, #56]	; (8001340 <ProcessSample+0xc4>)
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	e00b      	b.n	8001324 <ProcessSample+0xa8>
		} else if (accumulator < -0x40000000) {
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001312:	da07      	bge.n	8001324 <ProcessSample+0xa8>
			accumulator = -0x40000000;
 8001314:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001318:	613b      	str	r3, [r7, #16]
			underflow_count++;
 800131a:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <ProcessSample+0xc8>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	3301      	adds	r3, #1
 8001320:	4a08      	ldr	r2, [pc, #32]	; (8001344 <ProcessSample+0xc8>)
 8001322:	6013      	str	r3, [r2, #0]
		}

		int16_t temp = (int16_t)(accumulator >> 15);
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	13db      	asrs	r3, r3, #15
 8001328:	81fb      	strh	r3, [r7, #14]

		return temp;
 800132a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800132e:	4618      	mov	r0, r3
 8001330:	371c      	adds	r7, #28
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	20000004 	.word	0x20000004
 8001340:	200003cc 	.word	0x200003cc
 8001344:	200003d0 	.word	0x200003d0

08001348 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	607b      	str	r3, [r7, #4]
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <HAL_MspInit+0x4c>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	4a0f      	ldr	r2, [pc, #60]	; (8001394 <HAL_MspInit+0x4c>)
 8001358:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800135c:	6453      	str	r3, [r2, #68]	; 0x44
 800135e:	4b0d      	ldr	r3, [pc, #52]	; (8001394 <HAL_MspInit+0x4c>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	603b      	str	r3, [r7, #0]
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <HAL_MspInit+0x4c>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	4a08      	ldr	r2, [pc, #32]	; (8001394 <HAL_MspInit+0x4c>)
 8001374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001378:	6413      	str	r3, [r2, #64]	; 0x40
 800137a:	4b06      	ldr	r3, [pc, #24]	; (8001394 <HAL_MspInit+0x4c>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001382:	603b      	str	r3, [r7, #0]
 8001384:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001386:	2007      	movs	r0, #7
 8001388:	f000 fad0 	bl	800192c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40023800 	.word	0x40023800

08001398 <HAL_TIM_Base_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* TIMx Peripheral clock enable */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80013a0:	2300      	movs	r3, #0
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <HAL_TIM_Base_MspInit+0x3c>)
 80013a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a8:	4a0a      	ldr	r2, [pc, #40]	; (80013d4 <HAL_TIM_Base_MspInit+0x3c>)
 80013aa:	f043 0302 	orr.w	r3, r3, #2
 80013ae:	6413      	str	r3, [r2, #64]	; 0x40
 80013b0:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <HAL_TIM_Base_MspInit+0x3c>)
 80013b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	68fb      	ldr	r3, [r7, #12]

  /*##-2- Configure the NVIC for TIMx ########################################*/
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriority(TIMx_IRQn, 4, 0);
 80013bc:	2200      	movs	r2, #0
 80013be:	2104      	movs	r1, #4
 80013c0:	201d      	movs	r0, #29
 80013c2:	f000 fabe 	bl	8001942 <HAL_NVIC_SetPriority>

  /* Enable the TIMx global Interrupt */
  HAL_NVIC_EnableIRQ(TIMx_IRQn);
 80013c6:	201d      	movs	r0, #29
 80013c8:	f000 fad7 	bl	800197a <HAL_NVIC_EnableIRQ>
}
 80013cc:	bf00      	nop
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40023800 	.word	0x40023800

080013d8 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80013ea:	e7fe      	b.n	80013ea <HardFault_Handler+0x4>

080013ec <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <MemManage_Handler+0x4>

080013f2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80013f6:	e7fe      	b.n	80013f6 <BusFault_Handler+0x4>

080013f8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80013fc:	e7fe      	b.n	80013fc <UsageFault_Handler+0x4>

080013fe <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0
}
 800141e:	bf00      	nop
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800142c:	f000 f98e 	bl	800174c <HAL_IncTick>
}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}

08001434 <EXTI0_IRQHandler>:
  * @brief  This function handles External line 0 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 8001438:	2001      	movs	r0, #1
 800143a:	f000 fdf9 	bl	8002030 <HAL_GPIO_EXTI_IRQHandler>
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}

08001442 <EXTI4_IRQHandler>:
  * @brief  This function handles EXTI4_IRQ Handler.
  * @param  None
  * @retval None
  */
void EXTI4_IRQHandler(void)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(ACCELERO_INT1_PIN);
 8001446:	2010      	movs	r0, #16
 8001448:	f000 fdf2 	bl	8002030 <HAL_GPIO_EXTI_IRQHandler>
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}

08001450 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void I2S3_IRQHandler(void)
{ 
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(hAudioOutI2s.hdmatx);
 8001454:	4b03      	ldr	r3, [pc, #12]	; (8001464 <DMA1_Stream7_IRQHandler+0x14>)
 8001456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001458:	4618      	mov	r0, r3
 800145a:	f000 faa9 	bl	80019b0 <HAL_DMA_IRQHandler>
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000984 	.word	0x20000984

08001468 <DMA1_Stream3_IRQHandler>:
  * @brief  This function handles I2S IT Stream interrupt request.
  * @param  None
  * @retval None
  */
void I2S2_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(hAudioInI2s.hdmarx);
 800146c:	4b03      	ldr	r3, [pc, #12]	; (800147c <DMA1_Stream3_IRQHandler+0x14>)
 800146e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001470:	4618      	mov	r0, r3
 8001472:	f000 fa9d 	bl	80019b0 <HAL_DMA_IRQHandler>
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200009cc 	.word	0x200009cc

08001480 <TIM3_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIMx_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 8001484:	4802      	ldr	r0, [pc, #8]	; (8001490 <TIM3_IRQHandler+0x10>)
 8001486:	f001 fadd 	bl	8002a44 <HAL_TIM_IRQHandler>
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000894 	.word	0x20000894

08001494 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
	return 1;
 8001498:	2301      	movs	r3, #1
}
 800149a:	4618      	mov	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <_kill>:

int _kill(int pid, int sig)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014ae:	f001 fd8b 	bl	8002fc8 <__errno>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2216      	movs	r2, #22
 80014b6:	601a      	str	r2, [r3, #0]
	return -1;
 80014b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <_exit>:

void _exit (int status)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80014cc:	f04f 31ff 	mov.w	r1, #4294967295
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff ffe7 	bl	80014a4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80014d6:	e7fe      	b.n	80014d6 <_exit+0x12>

080014d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]
 80014e8:	e00a      	b.n	8001500 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014ea:	f3af 8000 	nop.w
 80014ee:	4601      	mov	r1, r0
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	1c5a      	adds	r2, r3, #1
 80014f4:	60ba      	str	r2, [r7, #8]
 80014f6:	b2ca      	uxtb	r2, r1
 80014f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	3301      	adds	r3, #1
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	697a      	ldr	r2, [r7, #20]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	429a      	cmp	r2, r3
 8001506:	dbf0      	blt.n	80014ea <_read+0x12>
	}

return len;
 8001508:	687b      	ldr	r3, [r7, #4]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
	return -1;
 800151a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800151e:	4618      	mov	r0, r3
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800152a:	b480      	push	{r7}
 800152c:	b083      	sub	sp, #12
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
 8001532:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800153a:	605a      	str	r2, [r3, #4]
	return 0;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <_isatty>:

int _isatty(int file)
{
 800154a:	b480      	push	{r7}
 800154c:	b083      	sub	sp, #12
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
	return 1;
 8001552:	2301      	movs	r3, #1
}
 8001554:	4618      	mov	r0, r3
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
	return 0;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3714      	adds	r7, #20
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
	...

0800157c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001584:	4a14      	ldr	r2, [pc, #80]	; (80015d8 <_sbrk+0x5c>)
 8001586:	4b15      	ldr	r3, [pc, #84]	; (80015dc <_sbrk+0x60>)
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001590:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <_sbrk+0x64>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d102      	bne.n	800159e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <_sbrk+0x64>)
 800159a:	4a12      	ldr	r2, [pc, #72]	; (80015e4 <_sbrk+0x68>)
 800159c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <_sbrk+0x64>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4413      	add	r3, r2
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d207      	bcs.n	80015bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015ac:	f001 fd0c 	bl	8002fc8 <__errno>
 80015b0:	4603      	mov	r3, r0
 80015b2:	220c      	movs	r2, #12
 80015b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015b6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ba:	e009      	b.n	80015d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015bc:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <_sbrk+0x64>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015c2:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <_sbrk+0x64>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4413      	add	r3, r2
 80015ca:	4a05      	ldr	r2, [pc, #20]	; (80015e0 <_sbrk+0x64>)
 80015cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ce:	68fb      	ldr	r3, [r7, #12]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20020000 	.word	0x20020000
 80015dc:	00000400 	.word	0x00000400
 80015e0:	200004ec 	.word	0x200004ec
 80015e4:	20000a28 	.word	0x20000a28

080015e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015ec:	4b16      	ldr	r3, [pc, #88]	; (8001648 <SystemInit+0x60>)
 80015ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015f2:	4a15      	ldr	r2, [pc, #84]	; (8001648 <SystemInit+0x60>)
 80015f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80015fc:	4b13      	ldr	r3, [pc, #76]	; (800164c <SystemInit+0x64>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a12      	ldr	r2, [pc, #72]	; (800164c <SystemInit+0x64>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001608:	4b10      	ldr	r3, [pc, #64]	; (800164c <SystemInit+0x64>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800160e:	4b0f      	ldr	r3, [pc, #60]	; (800164c <SystemInit+0x64>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a0e      	ldr	r2, [pc, #56]	; (800164c <SystemInit+0x64>)
 8001614:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001618:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800161c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800161e:	4b0b      	ldr	r3, [pc, #44]	; (800164c <SystemInit+0x64>)
 8001620:	4a0b      	ldr	r2, [pc, #44]	; (8001650 <SystemInit+0x68>)
 8001622:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <SystemInit+0x64>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a08      	ldr	r2, [pc, #32]	; (800164c <SystemInit+0x64>)
 800162a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800162e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <SystemInit+0x64>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001636:	4b04      	ldr	r3, [pc, #16]	; (8001648 <SystemInit+0x60>)
 8001638:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800163c:	609a      	str	r2, [r3, #8]
#endif
}
 800163e:	bf00      	nop
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000ed00 	.word	0xe000ed00
 800164c:	40023800 	.word	0x40023800
 8001650:	24003010 	.word	0x24003010

08001654 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001654:	f8df d034 	ldr.w	sp, [pc, #52]	; 800168c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001658:	480d      	ldr	r0, [pc, #52]	; (8001690 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800165a:	490e      	ldr	r1, [pc, #56]	; (8001694 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800165c:	4a0e      	ldr	r2, [pc, #56]	; (8001698 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001660:	e002      	b.n	8001668 <LoopCopyDataInit>

08001662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001666:	3304      	adds	r3, #4

08001668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800166c:	d3f9      	bcc.n	8001662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166e:	4a0b      	ldr	r2, [pc, #44]	; (800169c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001670:	4c0b      	ldr	r4, [pc, #44]	; (80016a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001674:	e001      	b.n	800167a <LoopFillZerobss>

08001676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001678:	3204      	adds	r2, #4

0800167a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800167c:	d3fb      	bcc.n	8001676 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800167e:	f7ff ffb3 	bl	80015e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001682:	f001 fca7 	bl	8002fd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001686:	f7ff fc3b 	bl	8000f00 <main>
  bx  lr    
 800168a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800168c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001690:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001694:	200003ac 	.word	0x200003ac
  ldr r2, =_sidata
 8001698:	08005df4 	.word	0x08005df4
  ldr r2, =_sbss
 800169c:	200003ac 	.word	0x200003ac
  ldr r4, =_ebss
 80016a0:	20000a24 	.word	0x20000a24

080016a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a4:	e7fe      	b.n	80016a4 <ADC_IRQHandler>
	...

080016a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016ac:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <HAL_Init+0x40>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0d      	ldr	r2, [pc, #52]	; (80016e8 <HAL_Init+0x40>)
 80016b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016b8:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <HAL_Init+0x40>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a0a      	ldr	r2, [pc, #40]	; (80016e8 <HAL_Init+0x40>)
 80016be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <HAL_Init+0x40>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a07      	ldr	r2, [pc, #28]	; (80016e8 <HAL_Init+0x40>)
 80016ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d0:	2003      	movs	r0, #3
 80016d2:	f000 f92b 	bl	800192c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016d6:	2000      	movs	r0, #0
 80016d8:	f000 f808 	bl	80016ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016dc:	f7ff fe34 	bl	8001348 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40023c00 	.word	0x40023c00

080016ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016f4:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_InitTick+0x54>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_InitTick+0x58>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	4619      	mov	r1, r3
 80016fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001702:	fbb3 f3f1 	udiv	r3, r3, r1
 8001706:	fbb2 f3f3 	udiv	r3, r2, r3
 800170a:	4618      	mov	r0, r3
 800170c:	f000 f943 	bl	8001996 <HAL_SYSTICK_Config>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e00e      	b.n	8001738 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b0f      	cmp	r3, #15
 800171e:	d80a      	bhi.n	8001736 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001720:	2200      	movs	r2, #0
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	f04f 30ff 	mov.w	r0, #4294967295
 8001728:	f000 f90b 	bl	8001942 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800172c:	4a06      	ldr	r2, [pc, #24]	; (8001748 <HAL_InitTick+0x5c>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	e000      	b.n	8001738 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
}
 8001738:	4618      	mov	r0, r3
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	200001bc 	.word	0x200001bc
 8001744:	200001c4 	.word	0x200001c4
 8001748:	200001c0 	.word	0x200001c0

0800174c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_IncTick+0x20>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_IncTick+0x24>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4413      	add	r3, r2
 800175c:	4a04      	ldr	r2, [pc, #16]	; (8001770 <HAL_IncTick+0x24>)
 800175e:	6013      	str	r3, [r2, #0]
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	200001c4 	.word	0x200001c4
 8001770:	200008dc 	.word	0x200008dc

08001774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return uwTick;
 8001778:	4b03      	ldr	r3, [pc, #12]	; (8001788 <HAL_GetTick+0x14>)
 800177a:	681b      	ldr	r3, [r3, #0]
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	200008dc 	.word	0x200008dc

0800178c <__NVIC_SetPriorityGrouping>:
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <__NVIC_SetPriorityGrouping+0x44>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a8:	4013      	ands	r3, r2
 80017aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017be:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <__NVIC_SetPriorityGrouping+0x44>)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	60d3      	str	r3, [r2, #12]
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <__NVIC_GetPriorityGrouping>:
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d8:	4b04      	ldr	r3, [pc, #16]	; (80017ec <__NVIC_GetPriorityGrouping+0x18>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	0a1b      	lsrs	r3, r3, #8
 80017de:	f003 0307 	and.w	r3, r3, #7
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <__NVIC_EnableIRQ>:
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	db0b      	blt.n	800181a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	f003 021f 	and.w	r2, r3, #31
 8001808:	4907      	ldr	r1, [pc, #28]	; (8001828 <__NVIC_EnableIRQ+0x38>)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	095b      	lsrs	r3, r3, #5
 8001810:	2001      	movs	r0, #1
 8001812:	fa00 f202 	lsl.w	r2, r0, r2
 8001816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	e000e100 	.word	0xe000e100

0800182c <__NVIC_SetPriority>:
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	6039      	str	r1, [r7, #0]
 8001836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183c:	2b00      	cmp	r3, #0
 800183e:	db0a      	blt.n	8001856 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	b2da      	uxtb	r2, r3
 8001844:	490c      	ldr	r1, [pc, #48]	; (8001878 <__NVIC_SetPriority+0x4c>)
 8001846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184a:	0112      	lsls	r2, r2, #4
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	440b      	add	r3, r1
 8001850:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001854:	e00a      	b.n	800186c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	b2da      	uxtb	r2, r3
 800185a:	4908      	ldr	r1, [pc, #32]	; (800187c <__NVIC_SetPriority+0x50>)
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	3b04      	subs	r3, #4
 8001864:	0112      	lsls	r2, r2, #4
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	440b      	add	r3, r1
 800186a:	761a      	strb	r2, [r3, #24]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000e100 	.word	0xe000e100
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <NVIC_EncodePriority>:
{
 8001880:	b480      	push	{r7}
 8001882:	b089      	sub	sp, #36	; 0x24
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	f1c3 0307 	rsb	r3, r3, #7
 800189a:	2b04      	cmp	r3, #4
 800189c:	bf28      	it	cs
 800189e:	2304      	movcs	r3, #4
 80018a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3304      	adds	r3, #4
 80018a6:	2b06      	cmp	r3, #6
 80018a8:	d902      	bls.n	80018b0 <NVIC_EncodePriority+0x30>
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3b03      	subs	r3, #3
 80018ae:	e000      	b.n	80018b2 <NVIC_EncodePriority+0x32>
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b4:	f04f 32ff 	mov.w	r2, #4294967295
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43da      	mvns	r2, r3
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	401a      	ands	r2, r3
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c8:	f04f 31ff 	mov.w	r1, #4294967295
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	fa01 f303 	lsl.w	r3, r1, r3
 80018d2:	43d9      	mvns	r1, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d8:	4313      	orrs	r3, r2
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3724      	adds	r7, #36	; 0x24
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
	...

080018e8 <SysTick_Config>:
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f8:	d301      	bcc.n	80018fe <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80018fa:	2301      	movs	r3, #1
 80018fc:	e00f      	b.n	800191e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018fe:	4a0a      	ldr	r2, [pc, #40]	; (8001928 <SysTick_Config+0x40>)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3b01      	subs	r3, #1
 8001904:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001906:	210f      	movs	r1, #15
 8001908:	f04f 30ff 	mov.w	r0, #4294967295
 800190c:	f7ff ff8e 	bl	800182c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <SysTick_Config+0x40>)
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001916:	4b04      	ldr	r3, [pc, #16]	; (8001928 <SysTick_Config+0x40>)
 8001918:	2207      	movs	r2, #7
 800191a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	e000e010 	.word	0xe000e010

0800192c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff ff29 	bl	800178c <__NVIC_SetPriorityGrouping>
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001942:	b580      	push	{r7, lr}
 8001944:	b086      	sub	sp, #24
 8001946:	af00      	add	r7, sp, #0
 8001948:	4603      	mov	r3, r0
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607a      	str	r2, [r7, #4]
 800194e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001954:	f7ff ff3e 	bl	80017d4 <__NVIC_GetPriorityGrouping>
 8001958:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	68b9      	ldr	r1, [r7, #8]
 800195e:	6978      	ldr	r0, [r7, #20]
 8001960:	f7ff ff8e 	bl	8001880 <NVIC_EncodePriority>
 8001964:	4602      	mov	r2, r0
 8001966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800196a:	4611      	mov	r1, r2
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff5d 	bl	800182c <__NVIC_SetPriority>
}
 8001972:	bf00      	nop
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	4603      	mov	r3, r0
 8001982:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff ff31 	bl	80017f0 <__NVIC_EnableIRQ>
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff ffa2 	bl	80018e8 <SysTick_Config>
 80019a4:	4603      	mov	r3, r0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80019bc:	4b92      	ldr	r3, [pc, #584]	; (8001c08 <HAL_DMA_IRQHandler+0x258>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a92      	ldr	r2, [pc, #584]	; (8001c0c <HAL_DMA_IRQHandler+0x25c>)
 80019c2:	fba2 2303 	umull	r2, r3, r2, r3
 80019c6:	0a9b      	lsrs	r3, r3, #10
 80019c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019da:	2208      	movs	r2, #8
 80019dc:	409a      	lsls	r2, r3
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	4013      	ands	r3, r2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d01a      	beq.n	8001a1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0304 	and.w	r3, r3, #4
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d013      	beq.n	8001a1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 0204 	bic.w	r2, r2, #4
 8001a02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a08:	2208      	movs	r2, #8
 8001a0a:	409a      	lsls	r2, r3
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a14:	f043 0201 	orr.w	r2, r3, #1
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a20:	2201      	movs	r2, #1
 8001a22:	409a      	lsls	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4013      	ands	r3, r2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d012      	beq.n	8001a52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d00b      	beq.n	8001a52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a3e:	2201      	movs	r2, #1
 8001a40:	409a      	lsls	r2, r3
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a4a:	f043 0202 	orr.w	r2, r3, #2
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a56:	2204      	movs	r2, #4
 8001a58:	409a      	lsls	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d012      	beq.n	8001a88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d00b      	beq.n	8001a88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a74:	2204      	movs	r2, #4
 8001a76:	409a      	lsls	r2, r3
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a80:	f043 0204 	orr.w	r2, r3, #4
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a8c:	2210      	movs	r2, #16
 8001a8e:	409a      	lsls	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	4013      	ands	r3, r2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d043      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d03c      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aaa:	2210      	movs	r2, #16
 8001aac:	409a      	lsls	r2, r3
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d018      	beq.n	8001af2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d108      	bne.n	8001ae0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d024      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	4798      	blx	r3
 8001ade:	e01f      	b.n	8001b20 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d01b      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	4798      	blx	r3
 8001af0:	e016      	b.n	8001b20 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d107      	bne.n	8001b10 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 0208 	bic.w	r2, r2, #8
 8001b0e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d003      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b24:	2220      	movs	r2, #32
 8001b26:	409a      	lsls	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 808e 	beq.w	8001c4e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0310 	and.w	r3, r3, #16
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 8086 	beq.w	8001c4e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b46:	2220      	movs	r2, #32
 8001b48:	409a      	lsls	r2, r3
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b05      	cmp	r3, #5
 8001b58:	d136      	bne.n	8001bc8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 0216 	bic.w	r2, r2, #22
 8001b68:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	695a      	ldr	r2, [r3, #20]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b78:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d103      	bne.n	8001b8a <HAL_DMA_IRQHandler+0x1da>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d007      	beq.n	8001b9a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f022 0208 	bic.w	r2, r2, #8
 8001b98:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b9e:	223f      	movs	r2, #63	; 0x3f
 8001ba0:	409a      	lsls	r2, r3
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d07d      	beq.n	8001cba <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	4798      	blx	r3
        }
        return;
 8001bc6:	e078      	b.n	8001cba <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d01c      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d108      	bne.n	8001bf6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d030      	beq.n	8001c4e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	4798      	blx	r3
 8001bf4:	e02b      	b.n	8001c4e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d027      	beq.n	8001c4e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	4798      	blx	r3
 8001c06:	e022      	b.n	8001c4e <HAL_DMA_IRQHandler+0x29e>
 8001c08:	200001bc 	.word	0x200001bc
 8001c0c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10f      	bne.n	8001c3e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f022 0210 	bic.w	r2, r2, #16
 8001c2c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2201      	movs	r2, #1
 8001c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d032      	beq.n	8001cbc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d022      	beq.n	8001ca8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2205      	movs	r2, #5
 8001c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 0201 	bic.w	r2, r2, #1
 8001c78:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	60bb      	str	r3, [r7, #8]
 8001c80:	697a      	ldr	r2, [r7, #20]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d307      	bcc.n	8001c96 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1f2      	bne.n	8001c7a <HAL_DMA_IRQHandler+0x2ca>
 8001c94:	e000      	b.n	8001c98 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001c96:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d005      	beq.n	8001cbc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	4798      	blx	r3
 8001cb8:	e000      	b.n	8001cbc <HAL_DMA_IRQHandler+0x30c>
        return;
 8001cba:	bf00      	nop
    }
  }
}
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop

08001cc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b089      	sub	sp, #36	; 0x24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61fb      	str	r3, [r7, #28]
 8001cde:	e159      	b.n	8001f94 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	f040 8148 	bne.w	8001f8e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d005      	beq.n	8001d16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d130      	bne.n	8001d78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	2203      	movs	r2, #3
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	43db      	mvns	r3, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	68da      	ldr	r2, [r3, #12]
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	091b      	lsrs	r3, r3, #4
 8001d62:	f003 0201 	and.w	r2, r3, #1
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 0303 	and.w	r3, r3, #3
 8001d80:	2b03      	cmp	r3, #3
 8001d82:	d017      	beq.n	8001db4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	2203      	movs	r2, #3
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 0303 	and.w	r3, r3, #3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d123      	bne.n	8001e08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	08da      	lsrs	r2, r3, #3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3208      	adds	r2, #8
 8001dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	220f      	movs	r2, #15
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	691a      	ldr	r2, [r3, #16]
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	08da      	lsrs	r2, r3, #3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	3208      	adds	r2, #8
 8001e02:	69b9      	ldr	r1, [r7, #24]
 8001e04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	2203      	movs	r2, #3
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 0203 	and.w	r2, r3, #3
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f000 80a2 	beq.w	8001f8e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	4b57      	ldr	r3, [pc, #348]	; (8001fac <HAL_GPIO_Init+0x2e8>)
 8001e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e52:	4a56      	ldr	r2, [pc, #344]	; (8001fac <HAL_GPIO_Init+0x2e8>)
 8001e54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e58:	6453      	str	r3, [r2, #68]	; 0x44
 8001e5a:	4b54      	ldr	r3, [pc, #336]	; (8001fac <HAL_GPIO_Init+0x2e8>)
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e66:	4a52      	ldr	r2, [pc, #328]	; (8001fb0 <HAL_GPIO_Init+0x2ec>)
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	089b      	lsrs	r3, r3, #2
 8001e6c:	3302      	adds	r3, #2
 8001e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	f003 0303 	and.w	r3, r3, #3
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	220f      	movs	r2, #15
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43db      	mvns	r3, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4013      	ands	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a49      	ldr	r2, [pc, #292]	; (8001fb4 <HAL_GPIO_Init+0x2f0>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d019      	beq.n	8001ec6 <HAL_GPIO_Init+0x202>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a48      	ldr	r2, [pc, #288]	; (8001fb8 <HAL_GPIO_Init+0x2f4>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d013      	beq.n	8001ec2 <HAL_GPIO_Init+0x1fe>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a47      	ldr	r2, [pc, #284]	; (8001fbc <HAL_GPIO_Init+0x2f8>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d00d      	beq.n	8001ebe <HAL_GPIO_Init+0x1fa>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a46      	ldr	r2, [pc, #280]	; (8001fc0 <HAL_GPIO_Init+0x2fc>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d007      	beq.n	8001eba <HAL_GPIO_Init+0x1f6>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a45      	ldr	r2, [pc, #276]	; (8001fc4 <HAL_GPIO_Init+0x300>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d101      	bne.n	8001eb6 <HAL_GPIO_Init+0x1f2>
 8001eb2:	2304      	movs	r3, #4
 8001eb4:	e008      	b.n	8001ec8 <HAL_GPIO_Init+0x204>
 8001eb6:	2307      	movs	r3, #7
 8001eb8:	e006      	b.n	8001ec8 <HAL_GPIO_Init+0x204>
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e004      	b.n	8001ec8 <HAL_GPIO_Init+0x204>
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	e002      	b.n	8001ec8 <HAL_GPIO_Init+0x204>
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e000      	b.n	8001ec8 <HAL_GPIO_Init+0x204>
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	69fa      	ldr	r2, [r7, #28]
 8001eca:	f002 0203 	and.w	r2, r2, #3
 8001ece:	0092      	lsls	r2, r2, #2
 8001ed0:	4093      	lsls	r3, r2
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ed8:	4935      	ldr	r1, [pc, #212]	; (8001fb0 <HAL_GPIO_Init+0x2ec>)
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	089b      	lsrs	r3, r3, #2
 8001ede:	3302      	adds	r3, #2
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ee6:	4b38      	ldr	r3, [pc, #224]	; (8001fc8 <HAL_GPIO_Init+0x304>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f0a:	4a2f      	ldr	r2, [pc, #188]	; (8001fc8 <HAL_GPIO_Init+0x304>)
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f10:	4b2d      	ldr	r3, [pc, #180]	; (8001fc8 <HAL_GPIO_Init+0x304>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f34:	4a24      	ldr	r2, [pc, #144]	; (8001fc8 <HAL_GPIO_Init+0x304>)
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f3a:	4b23      	ldr	r3, [pc, #140]	; (8001fc8 <HAL_GPIO_Init+0x304>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	43db      	mvns	r3, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4013      	ands	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f5e:	4a1a      	ldr	r2, [pc, #104]	; (8001fc8 <HAL_GPIO_Init+0x304>)
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f64:	4b18      	ldr	r3, [pc, #96]	; (8001fc8 <HAL_GPIO_Init+0x304>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f88:	4a0f      	ldr	r2, [pc, #60]	; (8001fc8 <HAL_GPIO_Init+0x304>)
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	3301      	adds	r3, #1
 8001f92:	61fb      	str	r3, [r7, #28]
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	2b0f      	cmp	r3, #15
 8001f98:	f67f aea2 	bls.w	8001ce0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f9c:	bf00      	nop
 8001f9e:	bf00      	nop
 8001fa0:	3724      	adds	r7, #36	; 0x24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40013800 	.word	0x40013800
 8001fb4:	40020000 	.word	0x40020000
 8001fb8:	40020400 	.word	0x40020400
 8001fbc:	40020800 	.word	0x40020800
 8001fc0:	40020c00 	.word	0x40020c00
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40013c00 	.word	0x40013c00

08001fcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	691a      	ldr	r2, [r3, #16]
 8001fdc:	887b      	ldrh	r3, [r7, #2]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d002      	beq.n	8001fea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	73fb      	strb	r3, [r7, #15]
 8001fe8:	e001      	b.n	8001fee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fea:	2300      	movs	r3, #0
 8001fec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	460b      	mov	r3, r1
 8002006:	807b      	strh	r3, [r7, #2]
 8002008:	4613      	mov	r3, r2
 800200a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800200c:	787b      	ldrb	r3, [r7, #1]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002012:	887a      	ldrh	r2, [r7, #2]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002018:	e003      	b.n	8002022 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800201a:	887b      	ldrh	r3, [r7, #2]
 800201c:	041a      	lsls	r2, r3, #16
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	619a      	str	r2, [r3, #24]
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
	...

08002030 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800203a:	4b08      	ldr	r3, [pc, #32]	; (800205c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800203c:	695a      	ldr	r2, [r3, #20]
 800203e:	88fb      	ldrh	r3, [r7, #6]
 8002040:	4013      	ands	r3, r2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d006      	beq.n	8002054 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002046:	4a05      	ldr	r2, [pc, #20]	; (800205c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002048:	88fb      	ldrh	r3, [r7, #6]
 800204a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800204c:	88fb      	ldrh	r3, [r7, #6]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff f896 	bl	8001180 <HAL_GPIO_EXTI_Callback>
  }
}
 8002054:	bf00      	nop
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40013c00 	.word	0x40013c00

08002060 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e264      	b.n	800253c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	d075      	beq.n	800216a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800207e:	4ba3      	ldr	r3, [pc, #652]	; (800230c <HAL_RCC_OscConfig+0x2ac>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 030c 	and.w	r3, r3, #12
 8002086:	2b04      	cmp	r3, #4
 8002088:	d00c      	beq.n	80020a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800208a:	4ba0      	ldr	r3, [pc, #640]	; (800230c <HAL_RCC_OscConfig+0x2ac>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002092:	2b08      	cmp	r3, #8
 8002094:	d112      	bne.n	80020bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002096:	4b9d      	ldr	r3, [pc, #628]	; (800230c <HAL_RCC_OscConfig+0x2ac>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800209e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020a2:	d10b      	bne.n	80020bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a4:	4b99      	ldr	r3, [pc, #612]	; (800230c <HAL_RCC_OscConfig+0x2ac>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d05b      	beq.n	8002168 <HAL_RCC_OscConfig+0x108>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d157      	bne.n	8002168 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e23f      	b.n	800253c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020c4:	d106      	bne.n	80020d4 <HAL_RCC_OscConfig+0x74>
 80020c6:	4b91      	ldr	r3, [pc, #580]	; (800230c <HAL_RCC_OscConfig+0x2ac>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a90      	ldr	r2, [pc, #576]	; (800230c <HAL_RCC_OscConfig+0x2ac>)
 80020cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d0:	6013      	str	r3, [r2, #0]
 80020d2:	e01d      	b.n	8002110 <HAL_RCC_OscConfig+0xb0>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020dc:	d10c      	bne.n	80020f8 <HAL_RCC_OscConfig+0x98>
 80020de:	4b8b      	ldr	r3, [pc, #556]	; (800230c <HAL_RCC_OscConfig+0x2ac>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a8a      	ldr	r2, [pc, #552]	; (800230c <HAL_RCC_OscConfig+0x2ac>)
 80020e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020e8:	6013      	str	r3, [r2, #0]
 80020ea:	4b88      	ldr	r3, [pc, #544]	; (800230c <HAL_RCC_OscConfig+0x2ac>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a87      	ldr	r2, [pc, #540]	; (800230c <HAL_RCC_OscConfig+0x2ac>)
 80020f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f4:	6013      	str	r3, [r2, #0]
 80020f6:	e00b      	b.n	8002110 <HAL_RCC_OscConfig+0xb0>
 80020f8:	4b84      	ldr	r3, [pc, #528]	; (800230c <HAL_RCC_OscConfig+0x2ac>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a83      	ldr	r2, [pc, #524]	; (800230c <HAL_RCC_OscConfig+0x2ac>)
 80020fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002102:	6013      	str	r3, [r2, #0]
 8002104:	4b81      	ldr	r3, [pc, #516]	; (800230c <HAL_RCC_OscConfig+0x2ac>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a80      	ldr	r2, [pc, #512]	; (800230c <HAL_RCC_OscConfig+0x2ac>)
 800210a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800210e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d013      	beq.n	8002140 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002118:	f7ff fb2c 	bl	8001774 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002120:	f7ff fb28 	bl	8001774 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b64      	cmp	r3, #100	; 0x64
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e204      	b.n	800253c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002132:	4b76      	ldr	r3, [pc, #472]	; (800230c <HAL_RCC_OscConfig+0x2ac>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d0f0      	beq.n	8002120 <HAL_RCC_OscConfig+0xc0>
 800213e:	e014      	b.n	800216a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002140:	f7ff fb18 	bl	8001774 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002148:	f7ff fb14 	bl	8001774 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b64      	cmp	r3, #100	; 0x64
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e1f0      	b.n	800253c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800215a:	4b6c      	ldr	r3, [pc, #432]	; (800230c <HAL_RCC_OscConfig+0x2ac>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f0      	bne.n	8002148 <HAL_RCC_OscConfig+0xe8>
 8002166:	e000      	b.n	800216a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002168:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d063      	beq.n	800223e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002176:	4b65      	ldr	r3, [pc, #404]	; (800230c <HAL_RCC_OscConfig+0x2ac>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 030c 	and.w	r3, r3, #12
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00b      	beq.n	800219a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002182:	4b62      	ldr	r3, [pc, #392]	; (800230c <HAL_RCC_OscConfig+0x2ac>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800218a:	2b08      	cmp	r3, #8
 800218c:	d11c      	bne.n	80021c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800218e:	4b5f      	ldr	r3, [pc, #380]	; (800230c <HAL_RCC_OscConfig+0x2ac>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d116      	bne.n	80021c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800219a:	4b5c      	ldr	r3, [pc, #368]	; (800230c <HAL_RCC_OscConfig+0x2ac>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d005      	beq.n	80021b2 <HAL_RCC_OscConfig+0x152>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d001      	beq.n	80021b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e1c4      	b.n	800253c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b2:	4b56      	ldr	r3, [pc, #344]	; (800230c <HAL_RCC_OscConfig+0x2ac>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	4952      	ldr	r1, [pc, #328]	; (800230c <HAL_RCC_OscConfig+0x2ac>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021c6:	e03a      	b.n	800223e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d020      	beq.n	8002212 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021d0:	4b4f      	ldr	r3, [pc, #316]	; (8002310 <HAL_RCC_OscConfig+0x2b0>)
 80021d2:	2201      	movs	r2, #1
 80021d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d6:	f7ff facd 	bl	8001774 <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021dc:	e008      	b.n	80021f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021de:	f7ff fac9 	bl	8001774 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e1a5      	b.n	800253c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f0:	4b46      	ldr	r3, [pc, #280]	; (800230c <HAL_RCC_OscConfig+0x2ac>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0f0      	beq.n	80021de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021fc:	4b43      	ldr	r3, [pc, #268]	; (800230c <HAL_RCC_OscConfig+0x2ac>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	4940      	ldr	r1, [pc, #256]	; (800230c <HAL_RCC_OscConfig+0x2ac>)
 800220c:	4313      	orrs	r3, r2
 800220e:	600b      	str	r3, [r1, #0]
 8002210:	e015      	b.n	800223e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002212:	4b3f      	ldr	r3, [pc, #252]	; (8002310 <HAL_RCC_OscConfig+0x2b0>)
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002218:	f7ff faac 	bl	8001774 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002220:	f7ff faa8 	bl	8001774 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e184      	b.n	800253c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002232:	4b36      	ldr	r3, [pc, #216]	; (800230c <HAL_RCC_OscConfig+0x2ac>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f0      	bne.n	8002220 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0308 	and.w	r3, r3, #8
 8002246:	2b00      	cmp	r3, #0
 8002248:	d030      	beq.n	80022ac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d016      	beq.n	8002280 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002252:	4b30      	ldr	r3, [pc, #192]	; (8002314 <HAL_RCC_OscConfig+0x2b4>)
 8002254:	2201      	movs	r2, #1
 8002256:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002258:	f7ff fa8c 	bl	8001774 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002260:	f7ff fa88 	bl	8001774 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e164      	b.n	800253c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002272:	4b26      	ldr	r3, [pc, #152]	; (800230c <HAL_RCC_OscConfig+0x2ac>)
 8002274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f0      	beq.n	8002260 <HAL_RCC_OscConfig+0x200>
 800227e:	e015      	b.n	80022ac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002280:	4b24      	ldr	r3, [pc, #144]	; (8002314 <HAL_RCC_OscConfig+0x2b4>)
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002286:	f7ff fa75 	bl	8001774 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800228e:	f7ff fa71 	bl	8001774 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e14d      	b.n	800253c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022a0:	4b1a      	ldr	r3, [pc, #104]	; (800230c <HAL_RCC_OscConfig+0x2ac>)
 80022a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1f0      	bne.n	800228e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 80a0 	beq.w	80023fa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ba:	2300      	movs	r3, #0
 80022bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022be:	4b13      	ldr	r3, [pc, #76]	; (800230c <HAL_RCC_OscConfig+0x2ac>)
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10f      	bne.n	80022ea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	60bb      	str	r3, [r7, #8]
 80022ce:	4b0f      	ldr	r3, [pc, #60]	; (800230c <HAL_RCC_OscConfig+0x2ac>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	4a0e      	ldr	r2, [pc, #56]	; (800230c <HAL_RCC_OscConfig+0x2ac>)
 80022d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d8:	6413      	str	r3, [r2, #64]	; 0x40
 80022da:	4b0c      	ldr	r3, [pc, #48]	; (800230c <HAL_RCC_OscConfig+0x2ac>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e2:	60bb      	str	r3, [r7, #8]
 80022e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022e6:	2301      	movs	r3, #1
 80022e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ea:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <HAL_RCC_OscConfig+0x2b8>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d121      	bne.n	800233a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022f6:	4b08      	ldr	r3, [pc, #32]	; (8002318 <HAL_RCC_OscConfig+0x2b8>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a07      	ldr	r2, [pc, #28]	; (8002318 <HAL_RCC_OscConfig+0x2b8>)
 80022fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002300:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002302:	f7ff fa37 	bl	8001774 <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002308:	e011      	b.n	800232e <HAL_RCC_OscConfig+0x2ce>
 800230a:	bf00      	nop
 800230c:	40023800 	.word	0x40023800
 8002310:	42470000 	.word	0x42470000
 8002314:	42470e80 	.word	0x42470e80
 8002318:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800231c:	f7ff fa2a 	bl	8001774 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e106      	b.n	800253c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800232e:	4b85      	ldr	r3, [pc, #532]	; (8002544 <HAL_RCC_OscConfig+0x4e4>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0f0      	beq.n	800231c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d106      	bne.n	8002350 <HAL_RCC_OscConfig+0x2f0>
 8002342:	4b81      	ldr	r3, [pc, #516]	; (8002548 <HAL_RCC_OscConfig+0x4e8>)
 8002344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002346:	4a80      	ldr	r2, [pc, #512]	; (8002548 <HAL_RCC_OscConfig+0x4e8>)
 8002348:	f043 0301 	orr.w	r3, r3, #1
 800234c:	6713      	str	r3, [r2, #112]	; 0x70
 800234e:	e01c      	b.n	800238a <HAL_RCC_OscConfig+0x32a>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	2b05      	cmp	r3, #5
 8002356:	d10c      	bne.n	8002372 <HAL_RCC_OscConfig+0x312>
 8002358:	4b7b      	ldr	r3, [pc, #492]	; (8002548 <HAL_RCC_OscConfig+0x4e8>)
 800235a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235c:	4a7a      	ldr	r2, [pc, #488]	; (8002548 <HAL_RCC_OscConfig+0x4e8>)
 800235e:	f043 0304 	orr.w	r3, r3, #4
 8002362:	6713      	str	r3, [r2, #112]	; 0x70
 8002364:	4b78      	ldr	r3, [pc, #480]	; (8002548 <HAL_RCC_OscConfig+0x4e8>)
 8002366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002368:	4a77      	ldr	r2, [pc, #476]	; (8002548 <HAL_RCC_OscConfig+0x4e8>)
 800236a:	f043 0301 	orr.w	r3, r3, #1
 800236e:	6713      	str	r3, [r2, #112]	; 0x70
 8002370:	e00b      	b.n	800238a <HAL_RCC_OscConfig+0x32a>
 8002372:	4b75      	ldr	r3, [pc, #468]	; (8002548 <HAL_RCC_OscConfig+0x4e8>)
 8002374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002376:	4a74      	ldr	r2, [pc, #464]	; (8002548 <HAL_RCC_OscConfig+0x4e8>)
 8002378:	f023 0301 	bic.w	r3, r3, #1
 800237c:	6713      	str	r3, [r2, #112]	; 0x70
 800237e:	4b72      	ldr	r3, [pc, #456]	; (8002548 <HAL_RCC_OscConfig+0x4e8>)
 8002380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002382:	4a71      	ldr	r2, [pc, #452]	; (8002548 <HAL_RCC_OscConfig+0x4e8>)
 8002384:	f023 0304 	bic.w	r3, r3, #4
 8002388:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d015      	beq.n	80023be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002392:	f7ff f9ef 	bl	8001774 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002398:	e00a      	b.n	80023b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800239a:	f7ff f9eb 	bl	8001774 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e0c5      	b.n	800253c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b0:	4b65      	ldr	r3, [pc, #404]	; (8002548 <HAL_RCC_OscConfig+0x4e8>)
 80023b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0ee      	beq.n	800239a <HAL_RCC_OscConfig+0x33a>
 80023bc:	e014      	b.n	80023e8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023be:	f7ff f9d9 	bl	8001774 <HAL_GetTick>
 80023c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c4:	e00a      	b.n	80023dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023c6:	f7ff f9d5 	bl	8001774 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e0af      	b.n	800253c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023dc:	4b5a      	ldr	r3, [pc, #360]	; (8002548 <HAL_RCC_OscConfig+0x4e8>)
 80023de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1ee      	bne.n	80023c6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023e8:	7dfb      	ldrb	r3, [r7, #23]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d105      	bne.n	80023fa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ee:	4b56      	ldr	r3, [pc, #344]	; (8002548 <HAL_RCC_OscConfig+0x4e8>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	4a55      	ldr	r2, [pc, #340]	; (8002548 <HAL_RCC_OscConfig+0x4e8>)
 80023f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 809b 	beq.w	800253a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002404:	4b50      	ldr	r3, [pc, #320]	; (8002548 <HAL_RCC_OscConfig+0x4e8>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f003 030c 	and.w	r3, r3, #12
 800240c:	2b08      	cmp	r3, #8
 800240e:	d05c      	beq.n	80024ca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	2b02      	cmp	r3, #2
 8002416:	d141      	bne.n	800249c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002418:	4b4c      	ldr	r3, [pc, #304]	; (800254c <HAL_RCC_OscConfig+0x4ec>)
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241e:	f7ff f9a9 	bl	8001774 <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002424:	e008      	b.n	8002438 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002426:	f7ff f9a5 	bl	8001774 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e081      	b.n	800253c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002438:	4b43      	ldr	r3, [pc, #268]	; (8002548 <HAL_RCC_OscConfig+0x4e8>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1f0      	bne.n	8002426 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	69da      	ldr	r2, [r3, #28]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	431a      	orrs	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	019b      	lsls	r3, r3, #6
 8002454:	431a      	orrs	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245a:	085b      	lsrs	r3, r3, #1
 800245c:	3b01      	subs	r3, #1
 800245e:	041b      	lsls	r3, r3, #16
 8002460:	431a      	orrs	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002466:	061b      	lsls	r3, r3, #24
 8002468:	4937      	ldr	r1, [pc, #220]	; (8002548 <HAL_RCC_OscConfig+0x4e8>)
 800246a:	4313      	orrs	r3, r2
 800246c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800246e:	4b37      	ldr	r3, [pc, #220]	; (800254c <HAL_RCC_OscConfig+0x4ec>)
 8002470:	2201      	movs	r2, #1
 8002472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002474:	f7ff f97e 	bl	8001774 <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800247c:	f7ff f97a 	bl	8001774 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e056      	b.n	800253c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800248e:	4b2e      	ldr	r3, [pc, #184]	; (8002548 <HAL_RCC_OscConfig+0x4e8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0f0      	beq.n	800247c <HAL_RCC_OscConfig+0x41c>
 800249a:	e04e      	b.n	800253a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800249c:	4b2b      	ldr	r3, [pc, #172]	; (800254c <HAL_RCC_OscConfig+0x4ec>)
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a2:	f7ff f967 	bl	8001774 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024aa:	f7ff f963 	bl	8001774 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e03f      	b.n	800253c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024bc:	4b22      	ldr	r3, [pc, #136]	; (8002548 <HAL_RCC_OscConfig+0x4e8>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1f0      	bne.n	80024aa <HAL_RCC_OscConfig+0x44a>
 80024c8:	e037      	b.n	800253a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d101      	bne.n	80024d6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e032      	b.n	800253c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024d6:	4b1c      	ldr	r3, [pc, #112]	; (8002548 <HAL_RCC_OscConfig+0x4e8>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d028      	beq.n	8002536 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d121      	bne.n	8002536 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d11a      	bne.n	8002536 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002506:	4013      	ands	r3, r2
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800250c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800250e:	4293      	cmp	r3, r2
 8002510:	d111      	bne.n	8002536 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251c:	085b      	lsrs	r3, r3, #1
 800251e:	3b01      	subs	r3, #1
 8002520:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002522:	429a      	cmp	r2, r3
 8002524:	d107      	bne.n	8002536 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002530:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002532:	429a      	cmp	r2, r3
 8002534:	d001      	beq.n	800253a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e000      	b.n	800253c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40007000 	.word	0x40007000
 8002548:	40023800 	.word	0x40023800
 800254c:	42470060 	.word	0x42470060

08002550 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e0cc      	b.n	80026fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002564:	4b68      	ldr	r3, [pc, #416]	; (8002708 <HAL_RCC_ClockConfig+0x1b8>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	429a      	cmp	r2, r3
 8002570:	d90c      	bls.n	800258c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002572:	4b65      	ldr	r3, [pc, #404]	; (8002708 <HAL_RCC_ClockConfig+0x1b8>)
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800257a:	4b63      	ldr	r3, [pc, #396]	; (8002708 <HAL_RCC_ClockConfig+0x1b8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	429a      	cmp	r2, r3
 8002586:	d001      	beq.n	800258c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e0b8      	b.n	80026fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d020      	beq.n	80025da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d005      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025a4:	4b59      	ldr	r3, [pc, #356]	; (800270c <HAL_RCC_ClockConfig+0x1bc>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	4a58      	ldr	r2, [pc, #352]	; (800270c <HAL_RCC_ClockConfig+0x1bc>)
 80025aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0308 	and.w	r3, r3, #8
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d005      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025bc:	4b53      	ldr	r3, [pc, #332]	; (800270c <HAL_RCC_ClockConfig+0x1bc>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	4a52      	ldr	r2, [pc, #328]	; (800270c <HAL_RCC_ClockConfig+0x1bc>)
 80025c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025c8:	4b50      	ldr	r3, [pc, #320]	; (800270c <HAL_RCC_ClockConfig+0x1bc>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	494d      	ldr	r1, [pc, #308]	; (800270c <HAL_RCC_ClockConfig+0x1bc>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d044      	beq.n	8002670 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d107      	bne.n	80025fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ee:	4b47      	ldr	r3, [pc, #284]	; (800270c <HAL_RCC_ClockConfig+0x1bc>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d119      	bne.n	800262e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e07f      	b.n	80026fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2b02      	cmp	r3, #2
 8002604:	d003      	beq.n	800260e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800260a:	2b03      	cmp	r3, #3
 800260c:	d107      	bne.n	800261e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800260e:	4b3f      	ldr	r3, [pc, #252]	; (800270c <HAL_RCC_ClockConfig+0x1bc>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d109      	bne.n	800262e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e06f      	b.n	80026fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800261e:	4b3b      	ldr	r3, [pc, #236]	; (800270c <HAL_RCC_ClockConfig+0x1bc>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e067      	b.n	80026fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800262e:	4b37      	ldr	r3, [pc, #220]	; (800270c <HAL_RCC_ClockConfig+0x1bc>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f023 0203 	bic.w	r2, r3, #3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	4934      	ldr	r1, [pc, #208]	; (800270c <HAL_RCC_ClockConfig+0x1bc>)
 800263c:	4313      	orrs	r3, r2
 800263e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002640:	f7ff f898 	bl	8001774 <HAL_GetTick>
 8002644:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002646:	e00a      	b.n	800265e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002648:	f7ff f894 	bl	8001774 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	f241 3288 	movw	r2, #5000	; 0x1388
 8002656:	4293      	cmp	r3, r2
 8002658:	d901      	bls.n	800265e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e04f      	b.n	80026fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800265e:	4b2b      	ldr	r3, [pc, #172]	; (800270c <HAL_RCC_ClockConfig+0x1bc>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 020c 	and.w	r2, r3, #12
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	429a      	cmp	r2, r3
 800266e:	d1eb      	bne.n	8002648 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002670:	4b25      	ldr	r3, [pc, #148]	; (8002708 <HAL_RCC_ClockConfig+0x1b8>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	429a      	cmp	r2, r3
 800267c:	d20c      	bcs.n	8002698 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267e:	4b22      	ldr	r3, [pc, #136]	; (8002708 <HAL_RCC_ClockConfig+0x1b8>)
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002686:	4b20      	ldr	r3, [pc, #128]	; (8002708 <HAL_RCC_ClockConfig+0x1b8>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	429a      	cmp	r2, r3
 8002692:	d001      	beq.n	8002698 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e032      	b.n	80026fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d008      	beq.n	80026b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026a4:	4b19      	ldr	r3, [pc, #100]	; (800270c <HAL_RCC_ClockConfig+0x1bc>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	4916      	ldr	r1, [pc, #88]	; (800270c <HAL_RCC_ClockConfig+0x1bc>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0308 	and.w	r3, r3, #8
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d009      	beq.n	80026d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026c2:	4b12      	ldr	r3, [pc, #72]	; (800270c <HAL_RCC_ClockConfig+0x1bc>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	490e      	ldr	r1, [pc, #56]	; (800270c <HAL_RCC_ClockConfig+0x1bc>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026d6:	f000 f821 	bl	800271c <HAL_RCC_GetSysClockFreq>
 80026da:	4602      	mov	r2, r0
 80026dc:	4b0b      	ldr	r3, [pc, #44]	; (800270c <HAL_RCC_ClockConfig+0x1bc>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	091b      	lsrs	r3, r3, #4
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	490a      	ldr	r1, [pc, #40]	; (8002710 <HAL_RCC_ClockConfig+0x1c0>)
 80026e8:	5ccb      	ldrb	r3, [r1, r3]
 80026ea:	fa22 f303 	lsr.w	r3, r2, r3
 80026ee:	4a09      	ldr	r2, [pc, #36]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80026f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026f2:	4b09      	ldr	r3, [pc, #36]	; (8002718 <HAL_RCC_ClockConfig+0x1c8>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fe fff8 	bl	80016ec <HAL_InitTick>

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40023c00 	.word	0x40023c00
 800270c:	40023800 	.word	0x40023800
 8002710:	080059e8 	.word	0x080059e8
 8002714:	200001bc 	.word	0x200001bc
 8002718:	200001c0 	.word	0x200001c0

0800271c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800271c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002720:	b084      	sub	sp, #16
 8002722:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002724:	2300      	movs	r3, #0
 8002726:	607b      	str	r3, [r7, #4]
 8002728:	2300      	movs	r3, #0
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	2300      	movs	r3, #0
 800272e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002730:	2300      	movs	r3, #0
 8002732:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002734:	4b67      	ldr	r3, [pc, #412]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f003 030c 	and.w	r3, r3, #12
 800273c:	2b08      	cmp	r3, #8
 800273e:	d00d      	beq.n	800275c <HAL_RCC_GetSysClockFreq+0x40>
 8002740:	2b08      	cmp	r3, #8
 8002742:	f200 80bd 	bhi.w	80028c0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002746:	2b00      	cmp	r3, #0
 8002748:	d002      	beq.n	8002750 <HAL_RCC_GetSysClockFreq+0x34>
 800274a:	2b04      	cmp	r3, #4
 800274c:	d003      	beq.n	8002756 <HAL_RCC_GetSysClockFreq+0x3a>
 800274e:	e0b7      	b.n	80028c0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002750:	4b61      	ldr	r3, [pc, #388]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002752:	60bb      	str	r3, [r7, #8]
       break;
 8002754:	e0b7      	b.n	80028c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002756:	4b61      	ldr	r3, [pc, #388]	; (80028dc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002758:	60bb      	str	r3, [r7, #8]
      break;
 800275a:	e0b4      	b.n	80028c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800275c:	4b5d      	ldr	r3, [pc, #372]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002764:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002766:	4b5b      	ldr	r3, [pc, #364]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d04d      	beq.n	800280e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002772:	4b58      	ldr	r3, [pc, #352]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	099b      	lsrs	r3, r3, #6
 8002778:	461a      	mov	r2, r3
 800277a:	f04f 0300 	mov.w	r3, #0
 800277e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002782:	f04f 0100 	mov.w	r1, #0
 8002786:	ea02 0800 	and.w	r8, r2, r0
 800278a:	ea03 0901 	and.w	r9, r3, r1
 800278e:	4640      	mov	r0, r8
 8002790:	4649      	mov	r1, r9
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	f04f 0300 	mov.w	r3, #0
 800279a:	014b      	lsls	r3, r1, #5
 800279c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80027a0:	0142      	lsls	r2, r0, #5
 80027a2:	4610      	mov	r0, r2
 80027a4:	4619      	mov	r1, r3
 80027a6:	ebb0 0008 	subs.w	r0, r0, r8
 80027aa:	eb61 0109 	sbc.w	r1, r1, r9
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	f04f 0300 	mov.w	r3, #0
 80027b6:	018b      	lsls	r3, r1, #6
 80027b8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80027bc:	0182      	lsls	r2, r0, #6
 80027be:	1a12      	subs	r2, r2, r0
 80027c0:	eb63 0301 	sbc.w	r3, r3, r1
 80027c4:	f04f 0000 	mov.w	r0, #0
 80027c8:	f04f 0100 	mov.w	r1, #0
 80027cc:	00d9      	lsls	r1, r3, #3
 80027ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027d2:	00d0      	lsls	r0, r2, #3
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	eb12 0208 	adds.w	r2, r2, r8
 80027dc:	eb43 0309 	adc.w	r3, r3, r9
 80027e0:	f04f 0000 	mov.w	r0, #0
 80027e4:	f04f 0100 	mov.w	r1, #0
 80027e8:	0259      	lsls	r1, r3, #9
 80027ea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80027ee:	0250      	lsls	r0, r2, #9
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	4610      	mov	r0, r2
 80027f6:	4619      	mov	r1, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	461a      	mov	r2, r3
 80027fc:	f04f 0300 	mov.w	r3, #0
 8002800:	f7fe f9da 	bl	8000bb8 <__aeabi_uldivmod>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4613      	mov	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	e04a      	b.n	80028a4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800280e:	4b31      	ldr	r3, [pc, #196]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	099b      	lsrs	r3, r3, #6
 8002814:	461a      	mov	r2, r3
 8002816:	f04f 0300 	mov.w	r3, #0
 800281a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800281e:	f04f 0100 	mov.w	r1, #0
 8002822:	ea02 0400 	and.w	r4, r2, r0
 8002826:	ea03 0501 	and.w	r5, r3, r1
 800282a:	4620      	mov	r0, r4
 800282c:	4629      	mov	r1, r5
 800282e:	f04f 0200 	mov.w	r2, #0
 8002832:	f04f 0300 	mov.w	r3, #0
 8002836:	014b      	lsls	r3, r1, #5
 8002838:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800283c:	0142      	lsls	r2, r0, #5
 800283e:	4610      	mov	r0, r2
 8002840:	4619      	mov	r1, r3
 8002842:	1b00      	subs	r0, r0, r4
 8002844:	eb61 0105 	sbc.w	r1, r1, r5
 8002848:	f04f 0200 	mov.w	r2, #0
 800284c:	f04f 0300 	mov.w	r3, #0
 8002850:	018b      	lsls	r3, r1, #6
 8002852:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002856:	0182      	lsls	r2, r0, #6
 8002858:	1a12      	subs	r2, r2, r0
 800285a:	eb63 0301 	sbc.w	r3, r3, r1
 800285e:	f04f 0000 	mov.w	r0, #0
 8002862:	f04f 0100 	mov.w	r1, #0
 8002866:	00d9      	lsls	r1, r3, #3
 8002868:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800286c:	00d0      	lsls	r0, r2, #3
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	1912      	adds	r2, r2, r4
 8002874:	eb45 0303 	adc.w	r3, r5, r3
 8002878:	f04f 0000 	mov.w	r0, #0
 800287c:	f04f 0100 	mov.w	r1, #0
 8002880:	0299      	lsls	r1, r3, #10
 8002882:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002886:	0290      	lsls	r0, r2, #10
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	4610      	mov	r0, r2
 800288e:	4619      	mov	r1, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	461a      	mov	r2, r3
 8002894:	f04f 0300 	mov.w	r3, #0
 8002898:	f7fe f98e 	bl	8000bb8 <__aeabi_uldivmod>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	4613      	mov	r3, r2
 80028a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028a4:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	0c1b      	lsrs	r3, r3, #16
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	3301      	adds	r3, #1
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028bc:	60bb      	str	r3, [r7, #8]
      break;
 80028be:	e002      	b.n	80028c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028c0:	4b05      	ldr	r3, [pc, #20]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80028c2:	60bb      	str	r3, [r7, #8]
      break;
 80028c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028c6:	68bb      	ldr	r3, [r7, #8]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80028d2:	bf00      	nop
 80028d4:	40023800 	.word	0x40023800
 80028d8:	00f42400 	.word	0x00f42400
 80028dc:	007a1200 	.word	0x007a1200

080028e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e041      	b.n	8002976 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d106      	bne.n	800290c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7fe fd46 	bl	8001398 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2202      	movs	r2, #2
 8002910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3304      	adds	r3, #4
 800291c:	4619      	mov	r1, r3
 800291e:	4610      	mov	r0, r2
 8002920:	f000 f9c0 	bl	8002ca4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
	...

08002980 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b01      	cmp	r3, #1
 8002992:	d001      	beq.n	8002998 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e044      	b.n	8002a22 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0201 	orr.w	r2, r2, #1
 80029ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a1e      	ldr	r2, [pc, #120]	; (8002a30 <HAL_TIM_Base_Start_IT+0xb0>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d018      	beq.n	80029ec <HAL_TIM_Base_Start_IT+0x6c>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c2:	d013      	beq.n	80029ec <HAL_TIM_Base_Start_IT+0x6c>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a1a      	ldr	r2, [pc, #104]	; (8002a34 <HAL_TIM_Base_Start_IT+0xb4>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d00e      	beq.n	80029ec <HAL_TIM_Base_Start_IT+0x6c>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a19      	ldr	r2, [pc, #100]	; (8002a38 <HAL_TIM_Base_Start_IT+0xb8>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d009      	beq.n	80029ec <HAL_TIM_Base_Start_IT+0x6c>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a17      	ldr	r2, [pc, #92]	; (8002a3c <HAL_TIM_Base_Start_IT+0xbc>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d004      	beq.n	80029ec <HAL_TIM_Base_Start_IT+0x6c>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a16      	ldr	r2, [pc, #88]	; (8002a40 <HAL_TIM_Base_Start_IT+0xc0>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d111      	bne.n	8002a10 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2b06      	cmp	r3, #6
 80029fc:	d010      	beq.n	8002a20 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f042 0201 	orr.w	r2, r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a0e:	e007      	b.n	8002a20 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0201 	orr.w	r2, r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	40010000 	.word	0x40010000
 8002a34:	40000400 	.word	0x40000400
 8002a38:	40000800 	.word	0x40000800
 8002a3c:	40000c00 	.word	0x40000c00
 8002a40:	40014000 	.word	0x40014000

08002a44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d122      	bne.n	8002aa0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d11b      	bne.n	8002aa0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f06f 0202 	mvn.w	r2, #2
 8002a70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f8ee 	bl	8002c68 <HAL_TIM_IC_CaptureCallback>
 8002a8c:	e005      	b.n	8002a9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f8e0 	bl	8002c54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f8f1 	bl	8002c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	f003 0304 	and.w	r3, r3, #4
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	d122      	bne.n	8002af4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b04      	cmp	r3, #4
 8002aba:	d11b      	bne.n	8002af4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f06f 0204 	mvn.w	r2, #4
 8002ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2202      	movs	r2, #2
 8002aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f8c4 	bl	8002c68 <HAL_TIM_IC_CaptureCallback>
 8002ae0:	e005      	b.n	8002aee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f8b6 	bl	8002c54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f8c7 	bl	8002c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	f003 0308 	and.w	r3, r3, #8
 8002afe:	2b08      	cmp	r3, #8
 8002b00:	d122      	bne.n	8002b48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f003 0308 	and.w	r3, r3, #8
 8002b0c:	2b08      	cmp	r3, #8
 8002b0e:	d11b      	bne.n	8002b48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f06f 0208 	mvn.w	r2, #8
 8002b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2204      	movs	r2, #4
 8002b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f89a 	bl	8002c68 <HAL_TIM_IC_CaptureCallback>
 8002b34:	e005      	b.n	8002b42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f88c 	bl	8002c54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 f89d 	bl	8002c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	f003 0310 	and.w	r3, r3, #16
 8002b52:	2b10      	cmp	r3, #16
 8002b54:	d122      	bne.n	8002b9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f003 0310 	and.w	r3, r3, #16
 8002b60:	2b10      	cmp	r3, #16
 8002b62:	d11b      	bne.n	8002b9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f06f 0210 	mvn.w	r2, #16
 8002b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2208      	movs	r2, #8
 8002b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f870 	bl	8002c68 <HAL_TIM_IC_CaptureCallback>
 8002b88:	e005      	b.n	8002b96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f862 	bl	8002c54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 f873 	bl	8002c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d10e      	bne.n	8002bc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d107      	bne.n	8002bc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f06f 0201 	mvn.w	r2, #1
 8002bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7fe faf4 	bl	80011b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd2:	2b80      	cmp	r3, #128	; 0x80
 8002bd4:	d10e      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be0:	2b80      	cmp	r3, #128	; 0x80
 8002be2:	d107      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f8e2 	bl	8002db8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfe:	2b40      	cmp	r3, #64	; 0x40
 8002c00:	d10e      	bne.n	8002c20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0c:	2b40      	cmp	r3, #64	; 0x40
 8002c0e:	d107      	bne.n	8002c20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f838 	bl	8002c90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	f003 0320 	and.w	r3, r3, #32
 8002c2a:	2b20      	cmp	r3, #32
 8002c2c:	d10e      	bne.n	8002c4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	f003 0320 	and.w	r3, r3, #32
 8002c38:	2b20      	cmp	r3, #32
 8002c3a:	d107      	bne.n	8002c4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f06f 0220 	mvn.w	r2, #32
 8002c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f8ac 	bl	8002da4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c4c:	bf00      	nop
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a34      	ldr	r2, [pc, #208]	; (8002d88 <TIM_Base_SetConfig+0xe4>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d00f      	beq.n	8002cdc <TIM_Base_SetConfig+0x38>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc2:	d00b      	beq.n	8002cdc <TIM_Base_SetConfig+0x38>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a31      	ldr	r2, [pc, #196]	; (8002d8c <TIM_Base_SetConfig+0xe8>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d007      	beq.n	8002cdc <TIM_Base_SetConfig+0x38>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a30      	ldr	r2, [pc, #192]	; (8002d90 <TIM_Base_SetConfig+0xec>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d003      	beq.n	8002cdc <TIM_Base_SetConfig+0x38>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a2f      	ldr	r2, [pc, #188]	; (8002d94 <TIM_Base_SetConfig+0xf0>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d108      	bne.n	8002cee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a25      	ldr	r2, [pc, #148]	; (8002d88 <TIM_Base_SetConfig+0xe4>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d01b      	beq.n	8002d2e <TIM_Base_SetConfig+0x8a>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cfc:	d017      	beq.n	8002d2e <TIM_Base_SetConfig+0x8a>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a22      	ldr	r2, [pc, #136]	; (8002d8c <TIM_Base_SetConfig+0xe8>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d013      	beq.n	8002d2e <TIM_Base_SetConfig+0x8a>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a21      	ldr	r2, [pc, #132]	; (8002d90 <TIM_Base_SetConfig+0xec>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d00f      	beq.n	8002d2e <TIM_Base_SetConfig+0x8a>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a20      	ldr	r2, [pc, #128]	; (8002d94 <TIM_Base_SetConfig+0xf0>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d00b      	beq.n	8002d2e <TIM_Base_SetConfig+0x8a>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a1f      	ldr	r2, [pc, #124]	; (8002d98 <TIM_Base_SetConfig+0xf4>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d007      	beq.n	8002d2e <TIM_Base_SetConfig+0x8a>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a1e      	ldr	r2, [pc, #120]	; (8002d9c <TIM_Base_SetConfig+0xf8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d003      	beq.n	8002d2e <TIM_Base_SetConfig+0x8a>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a1d      	ldr	r2, [pc, #116]	; (8002da0 <TIM_Base_SetConfig+0xfc>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d108      	bne.n	8002d40 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a08      	ldr	r2, [pc, #32]	; (8002d88 <TIM_Base_SetConfig+0xe4>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d103      	bne.n	8002d74 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	691a      	ldr	r2, [r3, #16]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	615a      	str	r2, [r3, #20]
}
 8002d7a:	bf00      	nop
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	40010000 	.word	0x40010000
 8002d8c:	40000400 	.word	0x40000400
 8002d90:	40000800 	.word	0x40000800
 8002d94:	40000c00 	.word	0x40000c00
 8002d98:	40014000 	.word	0x40014000
 8002d9c:	40014400 	.word	0x40014400
 8002da0:	40014800 	.word	0x40014800

08002da4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <BSP_LED_Init>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b08c      	sub	sp, #48	; 0x30
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002dd6:	79fb      	ldrb	r3, [r7, #7]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10e      	bne.n	8002dfa <BSP_LED_Init+0x2e>
 8002ddc:	2300      	movs	r3, #0
 8002dde:	61bb      	str	r3, [r7, #24]
 8002de0:	4b33      	ldr	r3, [pc, #204]	; (8002eb0 <BSP_LED_Init+0xe4>)
 8002de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de4:	4a32      	ldr	r2, [pc, #200]	; (8002eb0 <BSP_LED_Init+0xe4>)
 8002de6:	f043 0308 	orr.w	r3, r3, #8
 8002dea:	6313      	str	r3, [r2, #48]	; 0x30
 8002dec:	4b30      	ldr	r3, [pc, #192]	; (8002eb0 <BSP_LED_Init+0xe4>)
 8002dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df0:	f003 0308 	and.w	r3, r3, #8
 8002df4:	61bb      	str	r3, [r7, #24]
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	e034      	b.n	8002e64 <BSP_LED_Init+0x98>
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d10e      	bne.n	8002e1e <BSP_LED_Init+0x52>
 8002e00:	2300      	movs	r3, #0
 8002e02:	617b      	str	r3, [r7, #20]
 8002e04:	4b2a      	ldr	r3, [pc, #168]	; (8002eb0 <BSP_LED_Init+0xe4>)
 8002e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e08:	4a29      	ldr	r2, [pc, #164]	; (8002eb0 <BSP_LED_Init+0xe4>)
 8002e0a:	f043 0308 	orr.w	r3, r3, #8
 8002e0e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e10:	4b27      	ldr	r3, [pc, #156]	; (8002eb0 <BSP_LED_Init+0xe4>)
 8002e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e14:	f003 0308 	and.w	r3, r3, #8
 8002e18:	617b      	str	r3, [r7, #20]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	e022      	b.n	8002e64 <BSP_LED_Init+0x98>
 8002e1e:	79fb      	ldrb	r3, [r7, #7]
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d10e      	bne.n	8002e42 <BSP_LED_Init+0x76>
 8002e24:	2300      	movs	r3, #0
 8002e26:	613b      	str	r3, [r7, #16]
 8002e28:	4b21      	ldr	r3, [pc, #132]	; (8002eb0 <BSP_LED_Init+0xe4>)
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2c:	4a20      	ldr	r2, [pc, #128]	; (8002eb0 <BSP_LED_Init+0xe4>)
 8002e2e:	f043 0308 	orr.w	r3, r3, #8
 8002e32:	6313      	str	r3, [r2, #48]	; 0x30
 8002e34:	4b1e      	ldr	r3, [pc, #120]	; (8002eb0 <BSP_LED_Init+0xe4>)
 8002e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e38:	f003 0308 	and.w	r3, r3, #8
 8002e3c:	613b      	str	r3, [r7, #16]
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	e010      	b.n	8002e64 <BSP_LED_Init+0x98>
 8002e42:	79fb      	ldrb	r3, [r7, #7]
 8002e44:	2b03      	cmp	r3, #3
 8002e46:	d10d      	bne.n	8002e64 <BSP_LED_Init+0x98>
 8002e48:	2300      	movs	r3, #0
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	4b18      	ldr	r3, [pc, #96]	; (8002eb0 <BSP_LED_Init+0xe4>)
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e50:	4a17      	ldr	r2, [pc, #92]	; (8002eb0 <BSP_LED_Init+0xe4>)
 8002e52:	f043 0308 	orr.w	r3, r3, #8
 8002e56:	6313      	str	r3, [r2, #48]	; 0x30
 8002e58:	4b15      	ldr	r3, [pc, #84]	; (8002eb0 <BSP_LED_Init+0xe4>)
 8002e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5c:	f003 0308 	and.w	r3, r3, #8
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8002e64:	79fb      	ldrb	r3, [r7, #7]
 8002e66:	4a13      	ldr	r2, [pc, #76]	; (8002eb4 <BSP_LED_Init+0xe8>)
 8002e68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e72:	2301      	movs	r3, #1
 8002e74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8002e76:	2302      	movs	r3, #2
 8002e78:	62bb      	str	r3, [r7, #40]	; 0x28
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8002e7a:	79fb      	ldrb	r3, [r7, #7]
 8002e7c:	4a0e      	ldr	r2, [pc, #56]	; (8002eb8 <BSP_LED_Init+0xec>)
 8002e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e82:	f107 021c 	add.w	r2, r7, #28
 8002e86:	4611      	mov	r1, r2
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7fe ff1b 	bl	8001cc4 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	4a09      	ldr	r2, [pc, #36]	; (8002eb8 <BSP_LED_Init+0xec>)
 8002e92:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002e96:	79fb      	ldrb	r3, [r7, #7]
 8002e98:	4a06      	ldr	r2, [pc, #24]	; (8002eb4 <BSP_LED_Init+0xe8>)
 8002e9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	f7ff f8ab 	bl	8001ffc <HAL_GPIO_WritePin>
}
 8002ea6:	bf00      	nop
 8002ea8:	3730      	adds	r7, #48	; 0x30
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	080059f8 	.word	0x080059f8
 8002eb8:	200001c8 	.word	0x200001c8

08002ebc <BSP_LED_On>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6  
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8002ec6:	79fb      	ldrb	r3, [r7, #7]
 8002ec8:	4a07      	ldr	r2, [pc, #28]	; (8002ee8 <BSP_LED_On+0x2c>)
 8002eca:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002ece:	79fb      	ldrb	r3, [r7, #7]
 8002ed0:	4a06      	ldr	r2, [pc, #24]	; (8002eec <BSP_LED_On+0x30>)
 8002ed2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	4619      	mov	r1, r3
 8002eda:	f7ff f88f 	bl	8001ffc <HAL_GPIO_WritePin>
}
 8002ede:	bf00      	nop
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	200001c8 	.word	0x200001c8
 8002eec:	080059f8 	.word	0x080059f8

08002ef0 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b088      	sub	sp, #32
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	460a      	mov	r2, r1
 8002efa:	71fb      	strb	r3, [r7, #7]
 8002efc:	4613      	mov	r3, r2
 8002efe:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8002f00:	79fb      	ldrb	r3, [r7, #7]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10d      	bne.n	8002f22 <BSP_PB_Init+0x32>
 8002f06:	2300      	movs	r3, #0
 8002f08:	60bb      	str	r3, [r7, #8]
 8002f0a:	4b22      	ldr	r3, [pc, #136]	; (8002f94 <BSP_PB_Init+0xa4>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	4a21      	ldr	r2, [pc, #132]	; (8002f94 <BSP_PB_Init+0xa4>)
 8002f10:	f043 0301 	orr.w	r3, r3, #1
 8002f14:	6313      	str	r3, [r2, #48]	; 0x30
 8002f16:	4b1f      	ldr	r3, [pc, #124]	; (8002f94 <BSP_PB_Init+0xa4>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	60bb      	str	r3, [r7, #8]
 8002f20:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8002f22:	79bb      	ldrb	r3, [r7, #6]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d111      	bne.n	8002f4c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8002f28:	2301      	movs	r3, #1
 8002f2a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002f30:	2302      	movs	r3, #2
 8002f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8002f34:	2302      	movs	r3, #2
 8002f36:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8002f38:	79fb      	ldrb	r3, [r7, #7]
 8002f3a:	4a17      	ldr	r2, [pc, #92]	; (8002f98 <BSP_PB_Init+0xa8>)
 8002f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f40:	f107 020c 	add.w	r2, r7, #12
 8002f44:	4611      	mov	r1, r2
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fe febc 	bl	8001cc4 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8002f4c:	79bb      	ldrb	r3, [r7, #6]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d11c      	bne.n	8002f8c <BSP_PB_Init+0x9c>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8002f52:	2301      	movs	r3, #1
 8002f54:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f56:	2300      	movs	r3, #0
 8002f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 8002f5a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002f5e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8002f60:	79fb      	ldrb	r3, [r7, #7]
 8002f62:	4a0d      	ldr	r2, [pc, #52]	; (8002f98 <BSP_PB_Init+0xa8>)
 8002f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f68:	f107 020c 	add.w	r2, r7, #12
 8002f6c:	4611      	mov	r1, r2
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fe fea8 	bl	8001cc4 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8002f74:	2306      	movs	r3, #6
 8002f76:	b25b      	sxtb	r3, r3
 8002f78:	2200      	movs	r2, #0
 8002f7a:	210f      	movs	r1, #15
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7fe fce0 	bl	8001942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8002f82:	2306      	movs	r3, #6
 8002f84:	b25b      	sxtb	r3, r3
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fe fcf7 	bl	800197a <HAL_NVIC_EnableIRQ>
  }
}
 8002f8c:	bf00      	nop
 8002f8e:	3720      	adds	r7, #32
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40023800 	.word	0x40023800
 8002f98:	200001d8 	.word	0x200001d8

08002f9c <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_KEY  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8002fa6:	79fb      	ldrb	r3, [r7, #7]
 8002fa8:	4a06      	ldr	r2, [pc, #24]	; (8002fc4 <BSP_PB_GetState+0x28>)
 8002faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	4611      	mov	r1, r2
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff f80a 	bl	8001fcc <HAL_GPIO_ReadPin>
 8002fb8:	4603      	mov	r3, r0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	200001d8 	.word	0x200001d8

08002fc8 <__errno>:
 8002fc8:	4b01      	ldr	r3, [pc, #4]	; (8002fd0 <__errno+0x8>)
 8002fca:	6818      	ldr	r0, [r3, #0]
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	200001dc 	.word	0x200001dc

08002fd4 <__libc_init_array>:
 8002fd4:	b570      	push	{r4, r5, r6, lr}
 8002fd6:	4d0d      	ldr	r5, [pc, #52]	; (800300c <__libc_init_array+0x38>)
 8002fd8:	4c0d      	ldr	r4, [pc, #52]	; (8003010 <__libc_init_array+0x3c>)
 8002fda:	1b64      	subs	r4, r4, r5
 8002fdc:	10a4      	asrs	r4, r4, #2
 8002fde:	2600      	movs	r6, #0
 8002fe0:	42a6      	cmp	r6, r4
 8002fe2:	d109      	bne.n	8002ff8 <__libc_init_array+0x24>
 8002fe4:	4d0b      	ldr	r5, [pc, #44]	; (8003014 <__libc_init_array+0x40>)
 8002fe6:	4c0c      	ldr	r4, [pc, #48]	; (8003018 <__libc_init_array+0x44>)
 8002fe8:	f002 fcf2 	bl	80059d0 <_init>
 8002fec:	1b64      	subs	r4, r4, r5
 8002fee:	10a4      	asrs	r4, r4, #2
 8002ff0:	2600      	movs	r6, #0
 8002ff2:	42a6      	cmp	r6, r4
 8002ff4:	d105      	bne.n	8003002 <__libc_init_array+0x2e>
 8002ff6:	bd70      	pop	{r4, r5, r6, pc}
 8002ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ffc:	4798      	blx	r3
 8002ffe:	3601      	adds	r6, #1
 8003000:	e7ee      	b.n	8002fe0 <__libc_init_array+0xc>
 8003002:	f855 3b04 	ldr.w	r3, [r5], #4
 8003006:	4798      	blx	r3
 8003008:	3601      	adds	r6, #1
 800300a:	e7f2      	b.n	8002ff2 <__libc_init_array+0x1e>
 800300c:	08005dec 	.word	0x08005dec
 8003010:	08005dec 	.word	0x08005dec
 8003014:	08005dec 	.word	0x08005dec
 8003018:	08005df0 	.word	0x08005df0

0800301c <memcpy>:
 800301c:	440a      	add	r2, r1
 800301e:	4291      	cmp	r1, r2
 8003020:	f100 33ff 	add.w	r3, r0, #4294967295
 8003024:	d100      	bne.n	8003028 <memcpy+0xc>
 8003026:	4770      	bx	lr
 8003028:	b510      	push	{r4, lr}
 800302a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800302e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003032:	4291      	cmp	r1, r2
 8003034:	d1f9      	bne.n	800302a <memcpy+0xe>
 8003036:	bd10      	pop	{r4, pc}

08003038 <memset>:
 8003038:	4402      	add	r2, r0
 800303a:	4603      	mov	r3, r0
 800303c:	4293      	cmp	r3, r2
 800303e:	d100      	bne.n	8003042 <memset+0xa>
 8003040:	4770      	bx	lr
 8003042:	f803 1b01 	strb.w	r1, [r3], #1
 8003046:	e7f9      	b.n	800303c <memset+0x4>

08003048 <__cvt>:
 8003048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800304c:	ec55 4b10 	vmov	r4, r5, d0
 8003050:	2d00      	cmp	r5, #0
 8003052:	460e      	mov	r6, r1
 8003054:	4619      	mov	r1, r3
 8003056:	462b      	mov	r3, r5
 8003058:	bfbb      	ittet	lt
 800305a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800305e:	461d      	movlt	r5, r3
 8003060:	2300      	movge	r3, #0
 8003062:	232d      	movlt	r3, #45	; 0x2d
 8003064:	700b      	strb	r3, [r1, #0]
 8003066:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003068:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800306c:	4691      	mov	r9, r2
 800306e:	f023 0820 	bic.w	r8, r3, #32
 8003072:	bfbc      	itt	lt
 8003074:	4622      	movlt	r2, r4
 8003076:	4614      	movlt	r4, r2
 8003078:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800307c:	d005      	beq.n	800308a <__cvt+0x42>
 800307e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003082:	d100      	bne.n	8003086 <__cvt+0x3e>
 8003084:	3601      	adds	r6, #1
 8003086:	2102      	movs	r1, #2
 8003088:	e000      	b.n	800308c <__cvt+0x44>
 800308a:	2103      	movs	r1, #3
 800308c:	ab03      	add	r3, sp, #12
 800308e:	9301      	str	r3, [sp, #4]
 8003090:	ab02      	add	r3, sp, #8
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	ec45 4b10 	vmov	d0, r4, r5
 8003098:	4653      	mov	r3, sl
 800309a:	4632      	mov	r2, r6
 800309c:	f000 fccc 	bl	8003a38 <_dtoa_r>
 80030a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80030a4:	4607      	mov	r7, r0
 80030a6:	d102      	bne.n	80030ae <__cvt+0x66>
 80030a8:	f019 0f01 	tst.w	r9, #1
 80030ac:	d022      	beq.n	80030f4 <__cvt+0xac>
 80030ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80030b2:	eb07 0906 	add.w	r9, r7, r6
 80030b6:	d110      	bne.n	80030da <__cvt+0x92>
 80030b8:	783b      	ldrb	r3, [r7, #0]
 80030ba:	2b30      	cmp	r3, #48	; 0x30
 80030bc:	d10a      	bne.n	80030d4 <__cvt+0x8c>
 80030be:	2200      	movs	r2, #0
 80030c0:	2300      	movs	r3, #0
 80030c2:	4620      	mov	r0, r4
 80030c4:	4629      	mov	r1, r5
 80030c6:	f7fd fd07 	bl	8000ad8 <__aeabi_dcmpeq>
 80030ca:	b918      	cbnz	r0, 80030d4 <__cvt+0x8c>
 80030cc:	f1c6 0601 	rsb	r6, r6, #1
 80030d0:	f8ca 6000 	str.w	r6, [sl]
 80030d4:	f8da 3000 	ldr.w	r3, [sl]
 80030d8:	4499      	add	r9, r3
 80030da:	2200      	movs	r2, #0
 80030dc:	2300      	movs	r3, #0
 80030de:	4620      	mov	r0, r4
 80030e0:	4629      	mov	r1, r5
 80030e2:	f7fd fcf9 	bl	8000ad8 <__aeabi_dcmpeq>
 80030e6:	b108      	cbz	r0, 80030ec <__cvt+0xa4>
 80030e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80030ec:	2230      	movs	r2, #48	; 0x30
 80030ee:	9b03      	ldr	r3, [sp, #12]
 80030f0:	454b      	cmp	r3, r9
 80030f2:	d307      	bcc.n	8003104 <__cvt+0xbc>
 80030f4:	9b03      	ldr	r3, [sp, #12]
 80030f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80030f8:	1bdb      	subs	r3, r3, r7
 80030fa:	4638      	mov	r0, r7
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	b004      	add	sp, #16
 8003100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003104:	1c59      	adds	r1, r3, #1
 8003106:	9103      	str	r1, [sp, #12]
 8003108:	701a      	strb	r2, [r3, #0]
 800310a:	e7f0      	b.n	80030ee <__cvt+0xa6>

0800310c <__exponent>:
 800310c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800310e:	4603      	mov	r3, r0
 8003110:	2900      	cmp	r1, #0
 8003112:	bfb8      	it	lt
 8003114:	4249      	neglt	r1, r1
 8003116:	f803 2b02 	strb.w	r2, [r3], #2
 800311a:	bfb4      	ite	lt
 800311c:	222d      	movlt	r2, #45	; 0x2d
 800311e:	222b      	movge	r2, #43	; 0x2b
 8003120:	2909      	cmp	r1, #9
 8003122:	7042      	strb	r2, [r0, #1]
 8003124:	dd2a      	ble.n	800317c <__exponent+0x70>
 8003126:	f10d 0407 	add.w	r4, sp, #7
 800312a:	46a4      	mov	ip, r4
 800312c:	270a      	movs	r7, #10
 800312e:	46a6      	mov	lr, r4
 8003130:	460a      	mov	r2, r1
 8003132:	fb91 f6f7 	sdiv	r6, r1, r7
 8003136:	fb07 1516 	mls	r5, r7, r6, r1
 800313a:	3530      	adds	r5, #48	; 0x30
 800313c:	2a63      	cmp	r2, #99	; 0x63
 800313e:	f104 34ff 	add.w	r4, r4, #4294967295
 8003142:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003146:	4631      	mov	r1, r6
 8003148:	dcf1      	bgt.n	800312e <__exponent+0x22>
 800314a:	3130      	adds	r1, #48	; 0x30
 800314c:	f1ae 0502 	sub.w	r5, lr, #2
 8003150:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003154:	1c44      	adds	r4, r0, #1
 8003156:	4629      	mov	r1, r5
 8003158:	4561      	cmp	r1, ip
 800315a:	d30a      	bcc.n	8003172 <__exponent+0x66>
 800315c:	f10d 0209 	add.w	r2, sp, #9
 8003160:	eba2 020e 	sub.w	r2, r2, lr
 8003164:	4565      	cmp	r5, ip
 8003166:	bf88      	it	hi
 8003168:	2200      	movhi	r2, #0
 800316a:	4413      	add	r3, r2
 800316c:	1a18      	subs	r0, r3, r0
 800316e:	b003      	add	sp, #12
 8003170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003172:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003176:	f804 2f01 	strb.w	r2, [r4, #1]!
 800317a:	e7ed      	b.n	8003158 <__exponent+0x4c>
 800317c:	2330      	movs	r3, #48	; 0x30
 800317e:	3130      	adds	r1, #48	; 0x30
 8003180:	7083      	strb	r3, [r0, #2]
 8003182:	70c1      	strb	r1, [r0, #3]
 8003184:	1d03      	adds	r3, r0, #4
 8003186:	e7f1      	b.n	800316c <__exponent+0x60>

08003188 <_printf_float>:
 8003188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800318c:	ed2d 8b02 	vpush	{d8}
 8003190:	b08d      	sub	sp, #52	; 0x34
 8003192:	460c      	mov	r4, r1
 8003194:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003198:	4616      	mov	r6, r2
 800319a:	461f      	mov	r7, r3
 800319c:	4605      	mov	r5, r0
 800319e:	f001 fa37 	bl	8004610 <_localeconv_r>
 80031a2:	f8d0 a000 	ldr.w	sl, [r0]
 80031a6:	4650      	mov	r0, sl
 80031a8:	f7fd f81a 	bl	80001e0 <strlen>
 80031ac:	2300      	movs	r3, #0
 80031ae:	930a      	str	r3, [sp, #40]	; 0x28
 80031b0:	6823      	ldr	r3, [r4, #0]
 80031b2:	9305      	str	r3, [sp, #20]
 80031b4:	f8d8 3000 	ldr.w	r3, [r8]
 80031b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80031bc:	3307      	adds	r3, #7
 80031be:	f023 0307 	bic.w	r3, r3, #7
 80031c2:	f103 0208 	add.w	r2, r3, #8
 80031c6:	f8c8 2000 	str.w	r2, [r8]
 80031ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80031d2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80031d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80031da:	9307      	str	r3, [sp, #28]
 80031dc:	f8cd 8018 	str.w	r8, [sp, #24]
 80031e0:	ee08 0a10 	vmov	s16, r0
 80031e4:	4b9f      	ldr	r3, [pc, #636]	; (8003464 <_printf_float+0x2dc>)
 80031e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80031ea:	f04f 32ff 	mov.w	r2, #4294967295
 80031ee:	f7fd fca5 	bl	8000b3c <__aeabi_dcmpun>
 80031f2:	bb88      	cbnz	r0, 8003258 <_printf_float+0xd0>
 80031f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80031f8:	4b9a      	ldr	r3, [pc, #616]	; (8003464 <_printf_float+0x2dc>)
 80031fa:	f04f 32ff 	mov.w	r2, #4294967295
 80031fe:	f7fd fc7f 	bl	8000b00 <__aeabi_dcmple>
 8003202:	bb48      	cbnz	r0, 8003258 <_printf_float+0xd0>
 8003204:	2200      	movs	r2, #0
 8003206:	2300      	movs	r3, #0
 8003208:	4640      	mov	r0, r8
 800320a:	4649      	mov	r1, r9
 800320c:	f7fd fc6e 	bl	8000aec <__aeabi_dcmplt>
 8003210:	b110      	cbz	r0, 8003218 <_printf_float+0x90>
 8003212:	232d      	movs	r3, #45	; 0x2d
 8003214:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003218:	4b93      	ldr	r3, [pc, #588]	; (8003468 <_printf_float+0x2e0>)
 800321a:	4894      	ldr	r0, [pc, #592]	; (800346c <_printf_float+0x2e4>)
 800321c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003220:	bf94      	ite	ls
 8003222:	4698      	movls	r8, r3
 8003224:	4680      	movhi	r8, r0
 8003226:	2303      	movs	r3, #3
 8003228:	6123      	str	r3, [r4, #16]
 800322a:	9b05      	ldr	r3, [sp, #20]
 800322c:	f023 0204 	bic.w	r2, r3, #4
 8003230:	6022      	str	r2, [r4, #0]
 8003232:	f04f 0900 	mov.w	r9, #0
 8003236:	9700      	str	r7, [sp, #0]
 8003238:	4633      	mov	r3, r6
 800323a:	aa0b      	add	r2, sp, #44	; 0x2c
 800323c:	4621      	mov	r1, r4
 800323e:	4628      	mov	r0, r5
 8003240:	f000 f9d8 	bl	80035f4 <_printf_common>
 8003244:	3001      	adds	r0, #1
 8003246:	f040 8090 	bne.w	800336a <_printf_float+0x1e2>
 800324a:	f04f 30ff 	mov.w	r0, #4294967295
 800324e:	b00d      	add	sp, #52	; 0x34
 8003250:	ecbd 8b02 	vpop	{d8}
 8003254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003258:	4642      	mov	r2, r8
 800325a:	464b      	mov	r3, r9
 800325c:	4640      	mov	r0, r8
 800325e:	4649      	mov	r1, r9
 8003260:	f7fd fc6c 	bl	8000b3c <__aeabi_dcmpun>
 8003264:	b140      	cbz	r0, 8003278 <_printf_float+0xf0>
 8003266:	464b      	mov	r3, r9
 8003268:	2b00      	cmp	r3, #0
 800326a:	bfbc      	itt	lt
 800326c:	232d      	movlt	r3, #45	; 0x2d
 800326e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003272:	487f      	ldr	r0, [pc, #508]	; (8003470 <_printf_float+0x2e8>)
 8003274:	4b7f      	ldr	r3, [pc, #508]	; (8003474 <_printf_float+0x2ec>)
 8003276:	e7d1      	b.n	800321c <_printf_float+0x94>
 8003278:	6863      	ldr	r3, [r4, #4]
 800327a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800327e:	9206      	str	r2, [sp, #24]
 8003280:	1c5a      	adds	r2, r3, #1
 8003282:	d13f      	bne.n	8003304 <_printf_float+0x17c>
 8003284:	2306      	movs	r3, #6
 8003286:	6063      	str	r3, [r4, #4]
 8003288:	9b05      	ldr	r3, [sp, #20]
 800328a:	6861      	ldr	r1, [r4, #4]
 800328c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003290:	2300      	movs	r3, #0
 8003292:	9303      	str	r3, [sp, #12]
 8003294:	ab0a      	add	r3, sp, #40	; 0x28
 8003296:	e9cd b301 	strd	fp, r3, [sp, #4]
 800329a:	ab09      	add	r3, sp, #36	; 0x24
 800329c:	ec49 8b10 	vmov	d0, r8, r9
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	6022      	str	r2, [r4, #0]
 80032a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80032a8:	4628      	mov	r0, r5
 80032aa:	f7ff fecd 	bl	8003048 <__cvt>
 80032ae:	9b06      	ldr	r3, [sp, #24]
 80032b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80032b2:	2b47      	cmp	r3, #71	; 0x47
 80032b4:	4680      	mov	r8, r0
 80032b6:	d108      	bne.n	80032ca <_printf_float+0x142>
 80032b8:	1cc8      	adds	r0, r1, #3
 80032ba:	db02      	blt.n	80032c2 <_printf_float+0x13a>
 80032bc:	6863      	ldr	r3, [r4, #4]
 80032be:	4299      	cmp	r1, r3
 80032c0:	dd41      	ble.n	8003346 <_printf_float+0x1be>
 80032c2:	f1ab 0b02 	sub.w	fp, fp, #2
 80032c6:	fa5f fb8b 	uxtb.w	fp, fp
 80032ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80032ce:	d820      	bhi.n	8003312 <_printf_float+0x18a>
 80032d0:	3901      	subs	r1, #1
 80032d2:	465a      	mov	r2, fp
 80032d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80032d8:	9109      	str	r1, [sp, #36]	; 0x24
 80032da:	f7ff ff17 	bl	800310c <__exponent>
 80032de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80032e0:	1813      	adds	r3, r2, r0
 80032e2:	2a01      	cmp	r2, #1
 80032e4:	4681      	mov	r9, r0
 80032e6:	6123      	str	r3, [r4, #16]
 80032e8:	dc02      	bgt.n	80032f0 <_printf_float+0x168>
 80032ea:	6822      	ldr	r2, [r4, #0]
 80032ec:	07d2      	lsls	r2, r2, #31
 80032ee:	d501      	bpl.n	80032f4 <_printf_float+0x16c>
 80032f0:	3301      	adds	r3, #1
 80032f2:	6123      	str	r3, [r4, #16]
 80032f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d09c      	beq.n	8003236 <_printf_float+0xae>
 80032fc:	232d      	movs	r3, #45	; 0x2d
 80032fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003302:	e798      	b.n	8003236 <_printf_float+0xae>
 8003304:	9a06      	ldr	r2, [sp, #24]
 8003306:	2a47      	cmp	r2, #71	; 0x47
 8003308:	d1be      	bne.n	8003288 <_printf_float+0x100>
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1bc      	bne.n	8003288 <_printf_float+0x100>
 800330e:	2301      	movs	r3, #1
 8003310:	e7b9      	b.n	8003286 <_printf_float+0xfe>
 8003312:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003316:	d118      	bne.n	800334a <_printf_float+0x1c2>
 8003318:	2900      	cmp	r1, #0
 800331a:	6863      	ldr	r3, [r4, #4]
 800331c:	dd0b      	ble.n	8003336 <_printf_float+0x1ae>
 800331e:	6121      	str	r1, [r4, #16]
 8003320:	b913      	cbnz	r3, 8003328 <_printf_float+0x1a0>
 8003322:	6822      	ldr	r2, [r4, #0]
 8003324:	07d0      	lsls	r0, r2, #31
 8003326:	d502      	bpl.n	800332e <_printf_float+0x1a6>
 8003328:	3301      	adds	r3, #1
 800332a:	440b      	add	r3, r1
 800332c:	6123      	str	r3, [r4, #16]
 800332e:	65a1      	str	r1, [r4, #88]	; 0x58
 8003330:	f04f 0900 	mov.w	r9, #0
 8003334:	e7de      	b.n	80032f4 <_printf_float+0x16c>
 8003336:	b913      	cbnz	r3, 800333e <_printf_float+0x1b6>
 8003338:	6822      	ldr	r2, [r4, #0]
 800333a:	07d2      	lsls	r2, r2, #31
 800333c:	d501      	bpl.n	8003342 <_printf_float+0x1ba>
 800333e:	3302      	adds	r3, #2
 8003340:	e7f4      	b.n	800332c <_printf_float+0x1a4>
 8003342:	2301      	movs	r3, #1
 8003344:	e7f2      	b.n	800332c <_printf_float+0x1a4>
 8003346:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800334a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800334c:	4299      	cmp	r1, r3
 800334e:	db05      	blt.n	800335c <_printf_float+0x1d4>
 8003350:	6823      	ldr	r3, [r4, #0]
 8003352:	6121      	str	r1, [r4, #16]
 8003354:	07d8      	lsls	r0, r3, #31
 8003356:	d5ea      	bpl.n	800332e <_printf_float+0x1a6>
 8003358:	1c4b      	adds	r3, r1, #1
 800335a:	e7e7      	b.n	800332c <_printf_float+0x1a4>
 800335c:	2900      	cmp	r1, #0
 800335e:	bfd4      	ite	le
 8003360:	f1c1 0202 	rsble	r2, r1, #2
 8003364:	2201      	movgt	r2, #1
 8003366:	4413      	add	r3, r2
 8003368:	e7e0      	b.n	800332c <_printf_float+0x1a4>
 800336a:	6823      	ldr	r3, [r4, #0]
 800336c:	055a      	lsls	r2, r3, #21
 800336e:	d407      	bmi.n	8003380 <_printf_float+0x1f8>
 8003370:	6923      	ldr	r3, [r4, #16]
 8003372:	4642      	mov	r2, r8
 8003374:	4631      	mov	r1, r6
 8003376:	4628      	mov	r0, r5
 8003378:	47b8      	blx	r7
 800337a:	3001      	adds	r0, #1
 800337c:	d12c      	bne.n	80033d8 <_printf_float+0x250>
 800337e:	e764      	b.n	800324a <_printf_float+0xc2>
 8003380:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003384:	f240 80e0 	bls.w	8003548 <_printf_float+0x3c0>
 8003388:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800338c:	2200      	movs	r2, #0
 800338e:	2300      	movs	r3, #0
 8003390:	f7fd fba2 	bl	8000ad8 <__aeabi_dcmpeq>
 8003394:	2800      	cmp	r0, #0
 8003396:	d034      	beq.n	8003402 <_printf_float+0x27a>
 8003398:	4a37      	ldr	r2, [pc, #220]	; (8003478 <_printf_float+0x2f0>)
 800339a:	2301      	movs	r3, #1
 800339c:	4631      	mov	r1, r6
 800339e:	4628      	mov	r0, r5
 80033a0:	47b8      	blx	r7
 80033a2:	3001      	adds	r0, #1
 80033a4:	f43f af51 	beq.w	800324a <_printf_float+0xc2>
 80033a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80033ac:	429a      	cmp	r2, r3
 80033ae:	db02      	blt.n	80033b6 <_printf_float+0x22e>
 80033b0:	6823      	ldr	r3, [r4, #0]
 80033b2:	07d8      	lsls	r0, r3, #31
 80033b4:	d510      	bpl.n	80033d8 <_printf_float+0x250>
 80033b6:	ee18 3a10 	vmov	r3, s16
 80033ba:	4652      	mov	r2, sl
 80033bc:	4631      	mov	r1, r6
 80033be:	4628      	mov	r0, r5
 80033c0:	47b8      	blx	r7
 80033c2:	3001      	adds	r0, #1
 80033c4:	f43f af41 	beq.w	800324a <_printf_float+0xc2>
 80033c8:	f04f 0800 	mov.w	r8, #0
 80033cc:	f104 091a 	add.w	r9, r4, #26
 80033d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80033d2:	3b01      	subs	r3, #1
 80033d4:	4543      	cmp	r3, r8
 80033d6:	dc09      	bgt.n	80033ec <_printf_float+0x264>
 80033d8:	6823      	ldr	r3, [r4, #0]
 80033da:	079b      	lsls	r3, r3, #30
 80033dc:	f100 8105 	bmi.w	80035ea <_printf_float+0x462>
 80033e0:	68e0      	ldr	r0, [r4, #12]
 80033e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80033e4:	4298      	cmp	r0, r3
 80033e6:	bfb8      	it	lt
 80033e8:	4618      	movlt	r0, r3
 80033ea:	e730      	b.n	800324e <_printf_float+0xc6>
 80033ec:	2301      	movs	r3, #1
 80033ee:	464a      	mov	r2, r9
 80033f0:	4631      	mov	r1, r6
 80033f2:	4628      	mov	r0, r5
 80033f4:	47b8      	blx	r7
 80033f6:	3001      	adds	r0, #1
 80033f8:	f43f af27 	beq.w	800324a <_printf_float+0xc2>
 80033fc:	f108 0801 	add.w	r8, r8, #1
 8003400:	e7e6      	b.n	80033d0 <_printf_float+0x248>
 8003402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003404:	2b00      	cmp	r3, #0
 8003406:	dc39      	bgt.n	800347c <_printf_float+0x2f4>
 8003408:	4a1b      	ldr	r2, [pc, #108]	; (8003478 <_printf_float+0x2f0>)
 800340a:	2301      	movs	r3, #1
 800340c:	4631      	mov	r1, r6
 800340e:	4628      	mov	r0, r5
 8003410:	47b8      	blx	r7
 8003412:	3001      	adds	r0, #1
 8003414:	f43f af19 	beq.w	800324a <_printf_float+0xc2>
 8003418:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800341c:	4313      	orrs	r3, r2
 800341e:	d102      	bne.n	8003426 <_printf_float+0x29e>
 8003420:	6823      	ldr	r3, [r4, #0]
 8003422:	07d9      	lsls	r1, r3, #31
 8003424:	d5d8      	bpl.n	80033d8 <_printf_float+0x250>
 8003426:	ee18 3a10 	vmov	r3, s16
 800342a:	4652      	mov	r2, sl
 800342c:	4631      	mov	r1, r6
 800342e:	4628      	mov	r0, r5
 8003430:	47b8      	blx	r7
 8003432:	3001      	adds	r0, #1
 8003434:	f43f af09 	beq.w	800324a <_printf_float+0xc2>
 8003438:	f04f 0900 	mov.w	r9, #0
 800343c:	f104 0a1a 	add.w	sl, r4, #26
 8003440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003442:	425b      	negs	r3, r3
 8003444:	454b      	cmp	r3, r9
 8003446:	dc01      	bgt.n	800344c <_printf_float+0x2c4>
 8003448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800344a:	e792      	b.n	8003372 <_printf_float+0x1ea>
 800344c:	2301      	movs	r3, #1
 800344e:	4652      	mov	r2, sl
 8003450:	4631      	mov	r1, r6
 8003452:	4628      	mov	r0, r5
 8003454:	47b8      	blx	r7
 8003456:	3001      	adds	r0, #1
 8003458:	f43f aef7 	beq.w	800324a <_printf_float+0xc2>
 800345c:	f109 0901 	add.w	r9, r9, #1
 8003460:	e7ee      	b.n	8003440 <_printf_float+0x2b8>
 8003462:	bf00      	nop
 8003464:	7fefffff 	.word	0x7fefffff
 8003468:	08005a04 	.word	0x08005a04
 800346c:	08005a08 	.word	0x08005a08
 8003470:	08005a10 	.word	0x08005a10
 8003474:	08005a0c 	.word	0x08005a0c
 8003478:	08005a14 	.word	0x08005a14
 800347c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800347e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003480:	429a      	cmp	r2, r3
 8003482:	bfa8      	it	ge
 8003484:	461a      	movge	r2, r3
 8003486:	2a00      	cmp	r2, #0
 8003488:	4691      	mov	r9, r2
 800348a:	dc37      	bgt.n	80034fc <_printf_float+0x374>
 800348c:	f04f 0b00 	mov.w	fp, #0
 8003490:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003494:	f104 021a 	add.w	r2, r4, #26
 8003498:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800349a:	9305      	str	r3, [sp, #20]
 800349c:	eba3 0309 	sub.w	r3, r3, r9
 80034a0:	455b      	cmp	r3, fp
 80034a2:	dc33      	bgt.n	800350c <_printf_float+0x384>
 80034a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80034a8:	429a      	cmp	r2, r3
 80034aa:	db3b      	blt.n	8003524 <_printf_float+0x39c>
 80034ac:	6823      	ldr	r3, [r4, #0]
 80034ae:	07da      	lsls	r2, r3, #31
 80034b0:	d438      	bmi.n	8003524 <_printf_float+0x39c>
 80034b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80034b4:	9b05      	ldr	r3, [sp, #20]
 80034b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	eba2 0901 	sub.w	r9, r2, r1
 80034be:	4599      	cmp	r9, r3
 80034c0:	bfa8      	it	ge
 80034c2:	4699      	movge	r9, r3
 80034c4:	f1b9 0f00 	cmp.w	r9, #0
 80034c8:	dc35      	bgt.n	8003536 <_printf_float+0x3ae>
 80034ca:	f04f 0800 	mov.w	r8, #0
 80034ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80034d2:	f104 0a1a 	add.w	sl, r4, #26
 80034d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80034da:	1a9b      	subs	r3, r3, r2
 80034dc:	eba3 0309 	sub.w	r3, r3, r9
 80034e0:	4543      	cmp	r3, r8
 80034e2:	f77f af79 	ble.w	80033d8 <_printf_float+0x250>
 80034e6:	2301      	movs	r3, #1
 80034e8:	4652      	mov	r2, sl
 80034ea:	4631      	mov	r1, r6
 80034ec:	4628      	mov	r0, r5
 80034ee:	47b8      	blx	r7
 80034f0:	3001      	adds	r0, #1
 80034f2:	f43f aeaa 	beq.w	800324a <_printf_float+0xc2>
 80034f6:	f108 0801 	add.w	r8, r8, #1
 80034fa:	e7ec      	b.n	80034d6 <_printf_float+0x34e>
 80034fc:	4613      	mov	r3, r2
 80034fe:	4631      	mov	r1, r6
 8003500:	4642      	mov	r2, r8
 8003502:	4628      	mov	r0, r5
 8003504:	47b8      	blx	r7
 8003506:	3001      	adds	r0, #1
 8003508:	d1c0      	bne.n	800348c <_printf_float+0x304>
 800350a:	e69e      	b.n	800324a <_printf_float+0xc2>
 800350c:	2301      	movs	r3, #1
 800350e:	4631      	mov	r1, r6
 8003510:	4628      	mov	r0, r5
 8003512:	9205      	str	r2, [sp, #20]
 8003514:	47b8      	blx	r7
 8003516:	3001      	adds	r0, #1
 8003518:	f43f ae97 	beq.w	800324a <_printf_float+0xc2>
 800351c:	9a05      	ldr	r2, [sp, #20]
 800351e:	f10b 0b01 	add.w	fp, fp, #1
 8003522:	e7b9      	b.n	8003498 <_printf_float+0x310>
 8003524:	ee18 3a10 	vmov	r3, s16
 8003528:	4652      	mov	r2, sl
 800352a:	4631      	mov	r1, r6
 800352c:	4628      	mov	r0, r5
 800352e:	47b8      	blx	r7
 8003530:	3001      	adds	r0, #1
 8003532:	d1be      	bne.n	80034b2 <_printf_float+0x32a>
 8003534:	e689      	b.n	800324a <_printf_float+0xc2>
 8003536:	9a05      	ldr	r2, [sp, #20]
 8003538:	464b      	mov	r3, r9
 800353a:	4442      	add	r2, r8
 800353c:	4631      	mov	r1, r6
 800353e:	4628      	mov	r0, r5
 8003540:	47b8      	blx	r7
 8003542:	3001      	adds	r0, #1
 8003544:	d1c1      	bne.n	80034ca <_printf_float+0x342>
 8003546:	e680      	b.n	800324a <_printf_float+0xc2>
 8003548:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800354a:	2a01      	cmp	r2, #1
 800354c:	dc01      	bgt.n	8003552 <_printf_float+0x3ca>
 800354e:	07db      	lsls	r3, r3, #31
 8003550:	d538      	bpl.n	80035c4 <_printf_float+0x43c>
 8003552:	2301      	movs	r3, #1
 8003554:	4642      	mov	r2, r8
 8003556:	4631      	mov	r1, r6
 8003558:	4628      	mov	r0, r5
 800355a:	47b8      	blx	r7
 800355c:	3001      	adds	r0, #1
 800355e:	f43f ae74 	beq.w	800324a <_printf_float+0xc2>
 8003562:	ee18 3a10 	vmov	r3, s16
 8003566:	4652      	mov	r2, sl
 8003568:	4631      	mov	r1, r6
 800356a:	4628      	mov	r0, r5
 800356c:	47b8      	blx	r7
 800356e:	3001      	adds	r0, #1
 8003570:	f43f ae6b 	beq.w	800324a <_printf_float+0xc2>
 8003574:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003578:	2200      	movs	r2, #0
 800357a:	2300      	movs	r3, #0
 800357c:	f7fd faac 	bl	8000ad8 <__aeabi_dcmpeq>
 8003580:	b9d8      	cbnz	r0, 80035ba <_printf_float+0x432>
 8003582:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003584:	f108 0201 	add.w	r2, r8, #1
 8003588:	3b01      	subs	r3, #1
 800358a:	4631      	mov	r1, r6
 800358c:	4628      	mov	r0, r5
 800358e:	47b8      	blx	r7
 8003590:	3001      	adds	r0, #1
 8003592:	d10e      	bne.n	80035b2 <_printf_float+0x42a>
 8003594:	e659      	b.n	800324a <_printf_float+0xc2>
 8003596:	2301      	movs	r3, #1
 8003598:	4652      	mov	r2, sl
 800359a:	4631      	mov	r1, r6
 800359c:	4628      	mov	r0, r5
 800359e:	47b8      	blx	r7
 80035a0:	3001      	adds	r0, #1
 80035a2:	f43f ae52 	beq.w	800324a <_printf_float+0xc2>
 80035a6:	f108 0801 	add.w	r8, r8, #1
 80035aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80035ac:	3b01      	subs	r3, #1
 80035ae:	4543      	cmp	r3, r8
 80035b0:	dcf1      	bgt.n	8003596 <_printf_float+0x40e>
 80035b2:	464b      	mov	r3, r9
 80035b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80035b8:	e6dc      	b.n	8003374 <_printf_float+0x1ec>
 80035ba:	f04f 0800 	mov.w	r8, #0
 80035be:	f104 0a1a 	add.w	sl, r4, #26
 80035c2:	e7f2      	b.n	80035aa <_printf_float+0x422>
 80035c4:	2301      	movs	r3, #1
 80035c6:	4642      	mov	r2, r8
 80035c8:	e7df      	b.n	800358a <_printf_float+0x402>
 80035ca:	2301      	movs	r3, #1
 80035cc:	464a      	mov	r2, r9
 80035ce:	4631      	mov	r1, r6
 80035d0:	4628      	mov	r0, r5
 80035d2:	47b8      	blx	r7
 80035d4:	3001      	adds	r0, #1
 80035d6:	f43f ae38 	beq.w	800324a <_printf_float+0xc2>
 80035da:	f108 0801 	add.w	r8, r8, #1
 80035de:	68e3      	ldr	r3, [r4, #12]
 80035e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80035e2:	1a5b      	subs	r3, r3, r1
 80035e4:	4543      	cmp	r3, r8
 80035e6:	dcf0      	bgt.n	80035ca <_printf_float+0x442>
 80035e8:	e6fa      	b.n	80033e0 <_printf_float+0x258>
 80035ea:	f04f 0800 	mov.w	r8, #0
 80035ee:	f104 0919 	add.w	r9, r4, #25
 80035f2:	e7f4      	b.n	80035de <_printf_float+0x456>

080035f4 <_printf_common>:
 80035f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035f8:	4616      	mov	r6, r2
 80035fa:	4699      	mov	r9, r3
 80035fc:	688a      	ldr	r2, [r1, #8]
 80035fe:	690b      	ldr	r3, [r1, #16]
 8003600:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003604:	4293      	cmp	r3, r2
 8003606:	bfb8      	it	lt
 8003608:	4613      	movlt	r3, r2
 800360a:	6033      	str	r3, [r6, #0]
 800360c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003610:	4607      	mov	r7, r0
 8003612:	460c      	mov	r4, r1
 8003614:	b10a      	cbz	r2, 800361a <_printf_common+0x26>
 8003616:	3301      	adds	r3, #1
 8003618:	6033      	str	r3, [r6, #0]
 800361a:	6823      	ldr	r3, [r4, #0]
 800361c:	0699      	lsls	r1, r3, #26
 800361e:	bf42      	ittt	mi
 8003620:	6833      	ldrmi	r3, [r6, #0]
 8003622:	3302      	addmi	r3, #2
 8003624:	6033      	strmi	r3, [r6, #0]
 8003626:	6825      	ldr	r5, [r4, #0]
 8003628:	f015 0506 	ands.w	r5, r5, #6
 800362c:	d106      	bne.n	800363c <_printf_common+0x48>
 800362e:	f104 0a19 	add.w	sl, r4, #25
 8003632:	68e3      	ldr	r3, [r4, #12]
 8003634:	6832      	ldr	r2, [r6, #0]
 8003636:	1a9b      	subs	r3, r3, r2
 8003638:	42ab      	cmp	r3, r5
 800363a:	dc26      	bgt.n	800368a <_printf_common+0x96>
 800363c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003640:	1e13      	subs	r3, r2, #0
 8003642:	6822      	ldr	r2, [r4, #0]
 8003644:	bf18      	it	ne
 8003646:	2301      	movne	r3, #1
 8003648:	0692      	lsls	r2, r2, #26
 800364a:	d42b      	bmi.n	80036a4 <_printf_common+0xb0>
 800364c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003650:	4649      	mov	r1, r9
 8003652:	4638      	mov	r0, r7
 8003654:	47c0      	blx	r8
 8003656:	3001      	adds	r0, #1
 8003658:	d01e      	beq.n	8003698 <_printf_common+0xa4>
 800365a:	6823      	ldr	r3, [r4, #0]
 800365c:	68e5      	ldr	r5, [r4, #12]
 800365e:	6832      	ldr	r2, [r6, #0]
 8003660:	f003 0306 	and.w	r3, r3, #6
 8003664:	2b04      	cmp	r3, #4
 8003666:	bf08      	it	eq
 8003668:	1aad      	subeq	r5, r5, r2
 800366a:	68a3      	ldr	r3, [r4, #8]
 800366c:	6922      	ldr	r2, [r4, #16]
 800366e:	bf0c      	ite	eq
 8003670:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003674:	2500      	movne	r5, #0
 8003676:	4293      	cmp	r3, r2
 8003678:	bfc4      	itt	gt
 800367a:	1a9b      	subgt	r3, r3, r2
 800367c:	18ed      	addgt	r5, r5, r3
 800367e:	2600      	movs	r6, #0
 8003680:	341a      	adds	r4, #26
 8003682:	42b5      	cmp	r5, r6
 8003684:	d11a      	bne.n	80036bc <_printf_common+0xc8>
 8003686:	2000      	movs	r0, #0
 8003688:	e008      	b.n	800369c <_printf_common+0xa8>
 800368a:	2301      	movs	r3, #1
 800368c:	4652      	mov	r2, sl
 800368e:	4649      	mov	r1, r9
 8003690:	4638      	mov	r0, r7
 8003692:	47c0      	blx	r8
 8003694:	3001      	adds	r0, #1
 8003696:	d103      	bne.n	80036a0 <_printf_common+0xac>
 8003698:	f04f 30ff 	mov.w	r0, #4294967295
 800369c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036a0:	3501      	adds	r5, #1
 80036a2:	e7c6      	b.n	8003632 <_printf_common+0x3e>
 80036a4:	18e1      	adds	r1, r4, r3
 80036a6:	1c5a      	adds	r2, r3, #1
 80036a8:	2030      	movs	r0, #48	; 0x30
 80036aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80036ae:	4422      	add	r2, r4
 80036b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80036b8:	3302      	adds	r3, #2
 80036ba:	e7c7      	b.n	800364c <_printf_common+0x58>
 80036bc:	2301      	movs	r3, #1
 80036be:	4622      	mov	r2, r4
 80036c0:	4649      	mov	r1, r9
 80036c2:	4638      	mov	r0, r7
 80036c4:	47c0      	blx	r8
 80036c6:	3001      	adds	r0, #1
 80036c8:	d0e6      	beq.n	8003698 <_printf_common+0xa4>
 80036ca:	3601      	adds	r6, #1
 80036cc:	e7d9      	b.n	8003682 <_printf_common+0x8e>
	...

080036d0 <_printf_i>:
 80036d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036d4:	460c      	mov	r4, r1
 80036d6:	4691      	mov	r9, r2
 80036d8:	7e27      	ldrb	r7, [r4, #24]
 80036da:	990c      	ldr	r1, [sp, #48]	; 0x30
 80036dc:	2f78      	cmp	r7, #120	; 0x78
 80036de:	4680      	mov	r8, r0
 80036e0:	469a      	mov	sl, r3
 80036e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036e6:	d807      	bhi.n	80036f8 <_printf_i+0x28>
 80036e8:	2f62      	cmp	r7, #98	; 0x62
 80036ea:	d80a      	bhi.n	8003702 <_printf_i+0x32>
 80036ec:	2f00      	cmp	r7, #0
 80036ee:	f000 80d8 	beq.w	80038a2 <_printf_i+0x1d2>
 80036f2:	2f58      	cmp	r7, #88	; 0x58
 80036f4:	f000 80a3 	beq.w	800383e <_printf_i+0x16e>
 80036f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80036fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003700:	e03a      	b.n	8003778 <_printf_i+0xa8>
 8003702:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003706:	2b15      	cmp	r3, #21
 8003708:	d8f6      	bhi.n	80036f8 <_printf_i+0x28>
 800370a:	a001      	add	r0, pc, #4	; (adr r0, 8003710 <_printf_i+0x40>)
 800370c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003710:	08003769 	.word	0x08003769
 8003714:	0800377d 	.word	0x0800377d
 8003718:	080036f9 	.word	0x080036f9
 800371c:	080036f9 	.word	0x080036f9
 8003720:	080036f9 	.word	0x080036f9
 8003724:	080036f9 	.word	0x080036f9
 8003728:	0800377d 	.word	0x0800377d
 800372c:	080036f9 	.word	0x080036f9
 8003730:	080036f9 	.word	0x080036f9
 8003734:	080036f9 	.word	0x080036f9
 8003738:	080036f9 	.word	0x080036f9
 800373c:	08003889 	.word	0x08003889
 8003740:	080037ad 	.word	0x080037ad
 8003744:	0800386b 	.word	0x0800386b
 8003748:	080036f9 	.word	0x080036f9
 800374c:	080036f9 	.word	0x080036f9
 8003750:	080038ab 	.word	0x080038ab
 8003754:	080036f9 	.word	0x080036f9
 8003758:	080037ad 	.word	0x080037ad
 800375c:	080036f9 	.word	0x080036f9
 8003760:	080036f9 	.word	0x080036f9
 8003764:	08003873 	.word	0x08003873
 8003768:	680b      	ldr	r3, [r1, #0]
 800376a:	1d1a      	adds	r2, r3, #4
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	600a      	str	r2, [r1, #0]
 8003770:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003774:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003778:	2301      	movs	r3, #1
 800377a:	e0a3      	b.n	80038c4 <_printf_i+0x1f4>
 800377c:	6825      	ldr	r5, [r4, #0]
 800377e:	6808      	ldr	r0, [r1, #0]
 8003780:	062e      	lsls	r6, r5, #24
 8003782:	f100 0304 	add.w	r3, r0, #4
 8003786:	d50a      	bpl.n	800379e <_printf_i+0xce>
 8003788:	6805      	ldr	r5, [r0, #0]
 800378a:	600b      	str	r3, [r1, #0]
 800378c:	2d00      	cmp	r5, #0
 800378e:	da03      	bge.n	8003798 <_printf_i+0xc8>
 8003790:	232d      	movs	r3, #45	; 0x2d
 8003792:	426d      	negs	r5, r5
 8003794:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003798:	485e      	ldr	r0, [pc, #376]	; (8003914 <_printf_i+0x244>)
 800379a:	230a      	movs	r3, #10
 800379c:	e019      	b.n	80037d2 <_printf_i+0x102>
 800379e:	f015 0f40 	tst.w	r5, #64	; 0x40
 80037a2:	6805      	ldr	r5, [r0, #0]
 80037a4:	600b      	str	r3, [r1, #0]
 80037a6:	bf18      	it	ne
 80037a8:	b22d      	sxthne	r5, r5
 80037aa:	e7ef      	b.n	800378c <_printf_i+0xbc>
 80037ac:	680b      	ldr	r3, [r1, #0]
 80037ae:	6825      	ldr	r5, [r4, #0]
 80037b0:	1d18      	adds	r0, r3, #4
 80037b2:	6008      	str	r0, [r1, #0]
 80037b4:	0628      	lsls	r0, r5, #24
 80037b6:	d501      	bpl.n	80037bc <_printf_i+0xec>
 80037b8:	681d      	ldr	r5, [r3, #0]
 80037ba:	e002      	b.n	80037c2 <_printf_i+0xf2>
 80037bc:	0669      	lsls	r1, r5, #25
 80037be:	d5fb      	bpl.n	80037b8 <_printf_i+0xe8>
 80037c0:	881d      	ldrh	r5, [r3, #0]
 80037c2:	4854      	ldr	r0, [pc, #336]	; (8003914 <_printf_i+0x244>)
 80037c4:	2f6f      	cmp	r7, #111	; 0x6f
 80037c6:	bf0c      	ite	eq
 80037c8:	2308      	moveq	r3, #8
 80037ca:	230a      	movne	r3, #10
 80037cc:	2100      	movs	r1, #0
 80037ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80037d2:	6866      	ldr	r6, [r4, #4]
 80037d4:	60a6      	str	r6, [r4, #8]
 80037d6:	2e00      	cmp	r6, #0
 80037d8:	bfa2      	ittt	ge
 80037da:	6821      	ldrge	r1, [r4, #0]
 80037dc:	f021 0104 	bicge.w	r1, r1, #4
 80037e0:	6021      	strge	r1, [r4, #0]
 80037e2:	b90d      	cbnz	r5, 80037e8 <_printf_i+0x118>
 80037e4:	2e00      	cmp	r6, #0
 80037e6:	d04d      	beq.n	8003884 <_printf_i+0x1b4>
 80037e8:	4616      	mov	r6, r2
 80037ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80037ee:	fb03 5711 	mls	r7, r3, r1, r5
 80037f2:	5dc7      	ldrb	r7, [r0, r7]
 80037f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80037f8:	462f      	mov	r7, r5
 80037fa:	42bb      	cmp	r3, r7
 80037fc:	460d      	mov	r5, r1
 80037fe:	d9f4      	bls.n	80037ea <_printf_i+0x11a>
 8003800:	2b08      	cmp	r3, #8
 8003802:	d10b      	bne.n	800381c <_printf_i+0x14c>
 8003804:	6823      	ldr	r3, [r4, #0]
 8003806:	07df      	lsls	r7, r3, #31
 8003808:	d508      	bpl.n	800381c <_printf_i+0x14c>
 800380a:	6923      	ldr	r3, [r4, #16]
 800380c:	6861      	ldr	r1, [r4, #4]
 800380e:	4299      	cmp	r1, r3
 8003810:	bfde      	ittt	le
 8003812:	2330      	movle	r3, #48	; 0x30
 8003814:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003818:	f106 36ff 	addle.w	r6, r6, #4294967295
 800381c:	1b92      	subs	r2, r2, r6
 800381e:	6122      	str	r2, [r4, #16]
 8003820:	f8cd a000 	str.w	sl, [sp]
 8003824:	464b      	mov	r3, r9
 8003826:	aa03      	add	r2, sp, #12
 8003828:	4621      	mov	r1, r4
 800382a:	4640      	mov	r0, r8
 800382c:	f7ff fee2 	bl	80035f4 <_printf_common>
 8003830:	3001      	adds	r0, #1
 8003832:	d14c      	bne.n	80038ce <_printf_i+0x1fe>
 8003834:	f04f 30ff 	mov.w	r0, #4294967295
 8003838:	b004      	add	sp, #16
 800383a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800383e:	4835      	ldr	r0, [pc, #212]	; (8003914 <_printf_i+0x244>)
 8003840:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003844:	6823      	ldr	r3, [r4, #0]
 8003846:	680e      	ldr	r6, [r1, #0]
 8003848:	061f      	lsls	r7, r3, #24
 800384a:	f856 5b04 	ldr.w	r5, [r6], #4
 800384e:	600e      	str	r6, [r1, #0]
 8003850:	d514      	bpl.n	800387c <_printf_i+0x1ac>
 8003852:	07d9      	lsls	r1, r3, #31
 8003854:	bf44      	itt	mi
 8003856:	f043 0320 	orrmi.w	r3, r3, #32
 800385a:	6023      	strmi	r3, [r4, #0]
 800385c:	b91d      	cbnz	r5, 8003866 <_printf_i+0x196>
 800385e:	6823      	ldr	r3, [r4, #0]
 8003860:	f023 0320 	bic.w	r3, r3, #32
 8003864:	6023      	str	r3, [r4, #0]
 8003866:	2310      	movs	r3, #16
 8003868:	e7b0      	b.n	80037cc <_printf_i+0xfc>
 800386a:	6823      	ldr	r3, [r4, #0]
 800386c:	f043 0320 	orr.w	r3, r3, #32
 8003870:	6023      	str	r3, [r4, #0]
 8003872:	2378      	movs	r3, #120	; 0x78
 8003874:	4828      	ldr	r0, [pc, #160]	; (8003918 <_printf_i+0x248>)
 8003876:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800387a:	e7e3      	b.n	8003844 <_printf_i+0x174>
 800387c:	065e      	lsls	r6, r3, #25
 800387e:	bf48      	it	mi
 8003880:	b2ad      	uxthmi	r5, r5
 8003882:	e7e6      	b.n	8003852 <_printf_i+0x182>
 8003884:	4616      	mov	r6, r2
 8003886:	e7bb      	b.n	8003800 <_printf_i+0x130>
 8003888:	680b      	ldr	r3, [r1, #0]
 800388a:	6826      	ldr	r6, [r4, #0]
 800388c:	6960      	ldr	r0, [r4, #20]
 800388e:	1d1d      	adds	r5, r3, #4
 8003890:	600d      	str	r5, [r1, #0]
 8003892:	0635      	lsls	r5, r6, #24
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	d501      	bpl.n	800389c <_printf_i+0x1cc>
 8003898:	6018      	str	r0, [r3, #0]
 800389a:	e002      	b.n	80038a2 <_printf_i+0x1d2>
 800389c:	0671      	lsls	r1, r6, #25
 800389e:	d5fb      	bpl.n	8003898 <_printf_i+0x1c8>
 80038a0:	8018      	strh	r0, [r3, #0]
 80038a2:	2300      	movs	r3, #0
 80038a4:	6123      	str	r3, [r4, #16]
 80038a6:	4616      	mov	r6, r2
 80038a8:	e7ba      	b.n	8003820 <_printf_i+0x150>
 80038aa:	680b      	ldr	r3, [r1, #0]
 80038ac:	1d1a      	adds	r2, r3, #4
 80038ae:	600a      	str	r2, [r1, #0]
 80038b0:	681e      	ldr	r6, [r3, #0]
 80038b2:	6862      	ldr	r2, [r4, #4]
 80038b4:	2100      	movs	r1, #0
 80038b6:	4630      	mov	r0, r6
 80038b8:	f7fc fc9a 	bl	80001f0 <memchr>
 80038bc:	b108      	cbz	r0, 80038c2 <_printf_i+0x1f2>
 80038be:	1b80      	subs	r0, r0, r6
 80038c0:	6060      	str	r0, [r4, #4]
 80038c2:	6863      	ldr	r3, [r4, #4]
 80038c4:	6123      	str	r3, [r4, #16]
 80038c6:	2300      	movs	r3, #0
 80038c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038cc:	e7a8      	b.n	8003820 <_printf_i+0x150>
 80038ce:	6923      	ldr	r3, [r4, #16]
 80038d0:	4632      	mov	r2, r6
 80038d2:	4649      	mov	r1, r9
 80038d4:	4640      	mov	r0, r8
 80038d6:	47d0      	blx	sl
 80038d8:	3001      	adds	r0, #1
 80038da:	d0ab      	beq.n	8003834 <_printf_i+0x164>
 80038dc:	6823      	ldr	r3, [r4, #0]
 80038de:	079b      	lsls	r3, r3, #30
 80038e0:	d413      	bmi.n	800390a <_printf_i+0x23a>
 80038e2:	68e0      	ldr	r0, [r4, #12]
 80038e4:	9b03      	ldr	r3, [sp, #12]
 80038e6:	4298      	cmp	r0, r3
 80038e8:	bfb8      	it	lt
 80038ea:	4618      	movlt	r0, r3
 80038ec:	e7a4      	b.n	8003838 <_printf_i+0x168>
 80038ee:	2301      	movs	r3, #1
 80038f0:	4632      	mov	r2, r6
 80038f2:	4649      	mov	r1, r9
 80038f4:	4640      	mov	r0, r8
 80038f6:	47d0      	blx	sl
 80038f8:	3001      	adds	r0, #1
 80038fa:	d09b      	beq.n	8003834 <_printf_i+0x164>
 80038fc:	3501      	adds	r5, #1
 80038fe:	68e3      	ldr	r3, [r4, #12]
 8003900:	9903      	ldr	r1, [sp, #12]
 8003902:	1a5b      	subs	r3, r3, r1
 8003904:	42ab      	cmp	r3, r5
 8003906:	dcf2      	bgt.n	80038ee <_printf_i+0x21e>
 8003908:	e7eb      	b.n	80038e2 <_printf_i+0x212>
 800390a:	2500      	movs	r5, #0
 800390c:	f104 0619 	add.w	r6, r4, #25
 8003910:	e7f5      	b.n	80038fe <_printf_i+0x22e>
 8003912:	bf00      	nop
 8003914:	08005a16 	.word	0x08005a16
 8003918:	08005a27 	.word	0x08005a27

0800391c <quorem>:
 800391c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003920:	6903      	ldr	r3, [r0, #16]
 8003922:	690c      	ldr	r4, [r1, #16]
 8003924:	42a3      	cmp	r3, r4
 8003926:	4607      	mov	r7, r0
 8003928:	f2c0 8081 	blt.w	8003a2e <quorem+0x112>
 800392c:	3c01      	subs	r4, #1
 800392e:	f101 0814 	add.w	r8, r1, #20
 8003932:	f100 0514 	add.w	r5, r0, #20
 8003936:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800393a:	9301      	str	r3, [sp, #4]
 800393c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003940:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003944:	3301      	adds	r3, #1
 8003946:	429a      	cmp	r2, r3
 8003948:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800394c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003950:	fbb2 f6f3 	udiv	r6, r2, r3
 8003954:	d331      	bcc.n	80039ba <quorem+0x9e>
 8003956:	f04f 0e00 	mov.w	lr, #0
 800395a:	4640      	mov	r0, r8
 800395c:	46ac      	mov	ip, r5
 800395e:	46f2      	mov	sl, lr
 8003960:	f850 2b04 	ldr.w	r2, [r0], #4
 8003964:	b293      	uxth	r3, r2
 8003966:	fb06 e303 	mla	r3, r6, r3, lr
 800396a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800396e:	b29b      	uxth	r3, r3
 8003970:	ebaa 0303 	sub.w	r3, sl, r3
 8003974:	0c12      	lsrs	r2, r2, #16
 8003976:	f8dc a000 	ldr.w	sl, [ip]
 800397a:	fb06 e202 	mla	r2, r6, r2, lr
 800397e:	fa13 f38a 	uxtah	r3, r3, sl
 8003982:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003986:	fa1f fa82 	uxth.w	sl, r2
 800398a:	f8dc 2000 	ldr.w	r2, [ip]
 800398e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8003992:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003996:	b29b      	uxth	r3, r3
 8003998:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800399c:	4581      	cmp	r9, r0
 800399e:	f84c 3b04 	str.w	r3, [ip], #4
 80039a2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80039a6:	d2db      	bcs.n	8003960 <quorem+0x44>
 80039a8:	f855 300b 	ldr.w	r3, [r5, fp]
 80039ac:	b92b      	cbnz	r3, 80039ba <quorem+0x9e>
 80039ae:	9b01      	ldr	r3, [sp, #4]
 80039b0:	3b04      	subs	r3, #4
 80039b2:	429d      	cmp	r5, r3
 80039b4:	461a      	mov	r2, r3
 80039b6:	d32e      	bcc.n	8003a16 <quorem+0xfa>
 80039b8:	613c      	str	r4, [r7, #16]
 80039ba:	4638      	mov	r0, r7
 80039bc:	f001 f8b2 	bl	8004b24 <__mcmp>
 80039c0:	2800      	cmp	r0, #0
 80039c2:	db24      	blt.n	8003a0e <quorem+0xf2>
 80039c4:	3601      	adds	r6, #1
 80039c6:	4628      	mov	r0, r5
 80039c8:	f04f 0c00 	mov.w	ip, #0
 80039cc:	f858 2b04 	ldr.w	r2, [r8], #4
 80039d0:	f8d0 e000 	ldr.w	lr, [r0]
 80039d4:	b293      	uxth	r3, r2
 80039d6:	ebac 0303 	sub.w	r3, ip, r3
 80039da:	0c12      	lsrs	r2, r2, #16
 80039dc:	fa13 f38e 	uxtah	r3, r3, lr
 80039e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80039e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80039ee:	45c1      	cmp	r9, r8
 80039f0:	f840 3b04 	str.w	r3, [r0], #4
 80039f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80039f8:	d2e8      	bcs.n	80039cc <quorem+0xb0>
 80039fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80039fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003a02:	b922      	cbnz	r2, 8003a0e <quorem+0xf2>
 8003a04:	3b04      	subs	r3, #4
 8003a06:	429d      	cmp	r5, r3
 8003a08:	461a      	mov	r2, r3
 8003a0a:	d30a      	bcc.n	8003a22 <quorem+0x106>
 8003a0c:	613c      	str	r4, [r7, #16]
 8003a0e:	4630      	mov	r0, r6
 8003a10:	b003      	add	sp, #12
 8003a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a16:	6812      	ldr	r2, [r2, #0]
 8003a18:	3b04      	subs	r3, #4
 8003a1a:	2a00      	cmp	r2, #0
 8003a1c:	d1cc      	bne.n	80039b8 <quorem+0x9c>
 8003a1e:	3c01      	subs	r4, #1
 8003a20:	e7c7      	b.n	80039b2 <quorem+0x96>
 8003a22:	6812      	ldr	r2, [r2, #0]
 8003a24:	3b04      	subs	r3, #4
 8003a26:	2a00      	cmp	r2, #0
 8003a28:	d1f0      	bne.n	8003a0c <quorem+0xf0>
 8003a2a:	3c01      	subs	r4, #1
 8003a2c:	e7eb      	b.n	8003a06 <quorem+0xea>
 8003a2e:	2000      	movs	r0, #0
 8003a30:	e7ee      	b.n	8003a10 <quorem+0xf4>
 8003a32:	0000      	movs	r0, r0
 8003a34:	0000      	movs	r0, r0
	...

08003a38 <_dtoa_r>:
 8003a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a3c:	ed2d 8b02 	vpush	{d8}
 8003a40:	ec57 6b10 	vmov	r6, r7, d0
 8003a44:	b095      	sub	sp, #84	; 0x54
 8003a46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003a48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003a4c:	9105      	str	r1, [sp, #20]
 8003a4e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8003a52:	4604      	mov	r4, r0
 8003a54:	9209      	str	r2, [sp, #36]	; 0x24
 8003a56:	930f      	str	r3, [sp, #60]	; 0x3c
 8003a58:	b975      	cbnz	r5, 8003a78 <_dtoa_r+0x40>
 8003a5a:	2010      	movs	r0, #16
 8003a5c:	f000 fddc 	bl	8004618 <malloc>
 8003a60:	4602      	mov	r2, r0
 8003a62:	6260      	str	r0, [r4, #36]	; 0x24
 8003a64:	b920      	cbnz	r0, 8003a70 <_dtoa_r+0x38>
 8003a66:	4bb2      	ldr	r3, [pc, #712]	; (8003d30 <_dtoa_r+0x2f8>)
 8003a68:	21ea      	movs	r1, #234	; 0xea
 8003a6a:	48b2      	ldr	r0, [pc, #712]	; (8003d34 <_dtoa_r+0x2fc>)
 8003a6c:	f001 fa24 	bl	8004eb8 <__assert_func>
 8003a70:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003a74:	6005      	str	r5, [r0, #0]
 8003a76:	60c5      	str	r5, [r0, #12]
 8003a78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a7a:	6819      	ldr	r1, [r3, #0]
 8003a7c:	b151      	cbz	r1, 8003a94 <_dtoa_r+0x5c>
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	604a      	str	r2, [r1, #4]
 8003a82:	2301      	movs	r3, #1
 8003a84:	4093      	lsls	r3, r2
 8003a86:	608b      	str	r3, [r1, #8]
 8003a88:	4620      	mov	r0, r4
 8003a8a:	f000 fe0d 	bl	80046a8 <_Bfree>
 8003a8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	1e3b      	subs	r3, r7, #0
 8003a96:	bfb9      	ittee	lt
 8003a98:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003a9c:	9303      	strlt	r3, [sp, #12]
 8003a9e:	2300      	movge	r3, #0
 8003aa0:	f8c8 3000 	strge.w	r3, [r8]
 8003aa4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8003aa8:	4ba3      	ldr	r3, [pc, #652]	; (8003d38 <_dtoa_r+0x300>)
 8003aaa:	bfbc      	itt	lt
 8003aac:	2201      	movlt	r2, #1
 8003aae:	f8c8 2000 	strlt.w	r2, [r8]
 8003ab2:	ea33 0309 	bics.w	r3, r3, r9
 8003ab6:	d11b      	bne.n	8003af0 <_dtoa_r+0xb8>
 8003ab8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003aba:	f242 730f 	movw	r3, #9999	; 0x270f
 8003abe:	6013      	str	r3, [r2, #0]
 8003ac0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003ac4:	4333      	orrs	r3, r6
 8003ac6:	f000 857a 	beq.w	80045be <_dtoa_r+0xb86>
 8003aca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003acc:	b963      	cbnz	r3, 8003ae8 <_dtoa_r+0xb0>
 8003ace:	4b9b      	ldr	r3, [pc, #620]	; (8003d3c <_dtoa_r+0x304>)
 8003ad0:	e024      	b.n	8003b1c <_dtoa_r+0xe4>
 8003ad2:	4b9b      	ldr	r3, [pc, #620]	; (8003d40 <_dtoa_r+0x308>)
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	3308      	adds	r3, #8
 8003ad8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003ada:	6013      	str	r3, [r2, #0]
 8003adc:	9800      	ldr	r0, [sp, #0]
 8003ade:	b015      	add	sp, #84	; 0x54
 8003ae0:	ecbd 8b02 	vpop	{d8}
 8003ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ae8:	4b94      	ldr	r3, [pc, #592]	; (8003d3c <_dtoa_r+0x304>)
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	3303      	adds	r3, #3
 8003aee:	e7f3      	b.n	8003ad8 <_dtoa_r+0xa0>
 8003af0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003af4:	2200      	movs	r2, #0
 8003af6:	ec51 0b17 	vmov	r0, r1, d7
 8003afa:	2300      	movs	r3, #0
 8003afc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8003b00:	f7fc ffea 	bl	8000ad8 <__aeabi_dcmpeq>
 8003b04:	4680      	mov	r8, r0
 8003b06:	b158      	cbz	r0, 8003b20 <_dtoa_r+0xe8>
 8003b08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	6013      	str	r3, [r2, #0]
 8003b0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 8551 	beq.w	80045b8 <_dtoa_r+0xb80>
 8003b16:	488b      	ldr	r0, [pc, #556]	; (8003d44 <_dtoa_r+0x30c>)
 8003b18:	6018      	str	r0, [r3, #0]
 8003b1a:	1e43      	subs	r3, r0, #1
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	e7dd      	b.n	8003adc <_dtoa_r+0xa4>
 8003b20:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8003b24:	aa12      	add	r2, sp, #72	; 0x48
 8003b26:	a913      	add	r1, sp, #76	; 0x4c
 8003b28:	4620      	mov	r0, r4
 8003b2a:	f001 f89f 	bl	8004c6c <__d2b>
 8003b2e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8003b32:	4683      	mov	fp, r0
 8003b34:	2d00      	cmp	r5, #0
 8003b36:	d07c      	beq.n	8003c32 <_dtoa_r+0x1fa>
 8003b38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b3a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8003b3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b42:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8003b46:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8003b4a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8003b4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003b52:	4b7d      	ldr	r3, [pc, #500]	; (8003d48 <_dtoa_r+0x310>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	4630      	mov	r0, r6
 8003b58:	4639      	mov	r1, r7
 8003b5a:	f7fc fb9d 	bl	8000298 <__aeabi_dsub>
 8003b5e:	a36e      	add	r3, pc, #440	; (adr r3, 8003d18 <_dtoa_r+0x2e0>)
 8003b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b64:	f7fc fd50 	bl	8000608 <__aeabi_dmul>
 8003b68:	a36d      	add	r3, pc, #436	; (adr r3, 8003d20 <_dtoa_r+0x2e8>)
 8003b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6e:	f7fc fb95 	bl	800029c <__adddf3>
 8003b72:	4606      	mov	r6, r0
 8003b74:	4628      	mov	r0, r5
 8003b76:	460f      	mov	r7, r1
 8003b78:	f7fc fcdc 	bl	8000534 <__aeabi_i2d>
 8003b7c:	a36a      	add	r3, pc, #424	; (adr r3, 8003d28 <_dtoa_r+0x2f0>)
 8003b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b82:	f7fc fd41 	bl	8000608 <__aeabi_dmul>
 8003b86:	4602      	mov	r2, r0
 8003b88:	460b      	mov	r3, r1
 8003b8a:	4630      	mov	r0, r6
 8003b8c:	4639      	mov	r1, r7
 8003b8e:	f7fc fb85 	bl	800029c <__adddf3>
 8003b92:	4606      	mov	r6, r0
 8003b94:	460f      	mov	r7, r1
 8003b96:	f7fc ffe7 	bl	8000b68 <__aeabi_d2iz>
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	4682      	mov	sl, r0
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	4630      	mov	r0, r6
 8003ba2:	4639      	mov	r1, r7
 8003ba4:	f7fc ffa2 	bl	8000aec <__aeabi_dcmplt>
 8003ba8:	b148      	cbz	r0, 8003bbe <_dtoa_r+0x186>
 8003baa:	4650      	mov	r0, sl
 8003bac:	f7fc fcc2 	bl	8000534 <__aeabi_i2d>
 8003bb0:	4632      	mov	r2, r6
 8003bb2:	463b      	mov	r3, r7
 8003bb4:	f7fc ff90 	bl	8000ad8 <__aeabi_dcmpeq>
 8003bb8:	b908      	cbnz	r0, 8003bbe <_dtoa_r+0x186>
 8003bba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003bbe:	f1ba 0f16 	cmp.w	sl, #22
 8003bc2:	d854      	bhi.n	8003c6e <_dtoa_r+0x236>
 8003bc4:	4b61      	ldr	r3, [pc, #388]	; (8003d4c <_dtoa_r+0x314>)
 8003bc6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003bd2:	f7fc ff8b 	bl	8000aec <__aeabi_dcmplt>
 8003bd6:	2800      	cmp	r0, #0
 8003bd8:	d04b      	beq.n	8003c72 <_dtoa_r+0x23a>
 8003bda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003bde:	2300      	movs	r3, #0
 8003be0:	930e      	str	r3, [sp, #56]	; 0x38
 8003be2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003be4:	1b5d      	subs	r5, r3, r5
 8003be6:	1e6b      	subs	r3, r5, #1
 8003be8:	9304      	str	r3, [sp, #16]
 8003bea:	bf43      	ittte	mi
 8003bec:	2300      	movmi	r3, #0
 8003bee:	f1c5 0801 	rsbmi	r8, r5, #1
 8003bf2:	9304      	strmi	r3, [sp, #16]
 8003bf4:	f04f 0800 	movpl.w	r8, #0
 8003bf8:	f1ba 0f00 	cmp.w	sl, #0
 8003bfc:	db3b      	blt.n	8003c76 <_dtoa_r+0x23e>
 8003bfe:	9b04      	ldr	r3, [sp, #16]
 8003c00:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8003c04:	4453      	add	r3, sl
 8003c06:	9304      	str	r3, [sp, #16]
 8003c08:	2300      	movs	r3, #0
 8003c0a:	9306      	str	r3, [sp, #24]
 8003c0c:	9b05      	ldr	r3, [sp, #20]
 8003c0e:	2b09      	cmp	r3, #9
 8003c10:	d869      	bhi.n	8003ce6 <_dtoa_r+0x2ae>
 8003c12:	2b05      	cmp	r3, #5
 8003c14:	bfc4      	itt	gt
 8003c16:	3b04      	subgt	r3, #4
 8003c18:	9305      	strgt	r3, [sp, #20]
 8003c1a:	9b05      	ldr	r3, [sp, #20]
 8003c1c:	f1a3 0302 	sub.w	r3, r3, #2
 8003c20:	bfcc      	ite	gt
 8003c22:	2500      	movgt	r5, #0
 8003c24:	2501      	movle	r5, #1
 8003c26:	2b03      	cmp	r3, #3
 8003c28:	d869      	bhi.n	8003cfe <_dtoa_r+0x2c6>
 8003c2a:	e8df f003 	tbb	[pc, r3]
 8003c2e:	4e2c      	.short	0x4e2c
 8003c30:	5a4c      	.short	0x5a4c
 8003c32:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8003c36:	441d      	add	r5, r3
 8003c38:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003c3c:	2b20      	cmp	r3, #32
 8003c3e:	bfc1      	itttt	gt
 8003c40:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003c44:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8003c48:	fa09 f303 	lslgt.w	r3, r9, r3
 8003c4c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003c50:	bfda      	itte	le
 8003c52:	f1c3 0320 	rsble	r3, r3, #32
 8003c56:	fa06 f003 	lslle.w	r0, r6, r3
 8003c5a:	4318      	orrgt	r0, r3
 8003c5c:	f7fc fc5a 	bl	8000514 <__aeabi_ui2d>
 8003c60:	2301      	movs	r3, #1
 8003c62:	4606      	mov	r6, r0
 8003c64:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8003c68:	3d01      	subs	r5, #1
 8003c6a:	9310      	str	r3, [sp, #64]	; 0x40
 8003c6c:	e771      	b.n	8003b52 <_dtoa_r+0x11a>
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e7b6      	b.n	8003be0 <_dtoa_r+0x1a8>
 8003c72:	900e      	str	r0, [sp, #56]	; 0x38
 8003c74:	e7b5      	b.n	8003be2 <_dtoa_r+0x1aa>
 8003c76:	f1ca 0300 	rsb	r3, sl, #0
 8003c7a:	9306      	str	r3, [sp, #24]
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	eba8 080a 	sub.w	r8, r8, sl
 8003c82:	930d      	str	r3, [sp, #52]	; 0x34
 8003c84:	e7c2      	b.n	8003c0c <_dtoa_r+0x1d4>
 8003c86:	2300      	movs	r3, #0
 8003c88:	9308      	str	r3, [sp, #32]
 8003c8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	dc39      	bgt.n	8003d04 <_dtoa_r+0x2cc>
 8003c90:	f04f 0901 	mov.w	r9, #1
 8003c94:	f8cd 9004 	str.w	r9, [sp, #4]
 8003c98:	464b      	mov	r3, r9
 8003c9a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8003c9e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	6042      	str	r2, [r0, #4]
 8003ca4:	2204      	movs	r2, #4
 8003ca6:	f102 0614 	add.w	r6, r2, #20
 8003caa:	429e      	cmp	r6, r3
 8003cac:	6841      	ldr	r1, [r0, #4]
 8003cae:	d92f      	bls.n	8003d10 <_dtoa_r+0x2d8>
 8003cb0:	4620      	mov	r0, r4
 8003cb2:	f000 fcb9 	bl	8004628 <_Balloc>
 8003cb6:	9000      	str	r0, [sp, #0]
 8003cb8:	2800      	cmp	r0, #0
 8003cba:	d14b      	bne.n	8003d54 <_dtoa_r+0x31c>
 8003cbc:	4b24      	ldr	r3, [pc, #144]	; (8003d50 <_dtoa_r+0x318>)
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003cc4:	e6d1      	b.n	8003a6a <_dtoa_r+0x32>
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e7de      	b.n	8003c88 <_dtoa_r+0x250>
 8003cca:	2300      	movs	r3, #0
 8003ccc:	9308      	str	r3, [sp, #32]
 8003cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cd0:	eb0a 0903 	add.w	r9, sl, r3
 8003cd4:	f109 0301 	add.w	r3, r9, #1
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	9301      	str	r3, [sp, #4]
 8003cdc:	bfb8      	it	lt
 8003cde:	2301      	movlt	r3, #1
 8003ce0:	e7dd      	b.n	8003c9e <_dtoa_r+0x266>
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e7f2      	b.n	8003ccc <_dtoa_r+0x294>
 8003ce6:	2501      	movs	r5, #1
 8003ce8:	2300      	movs	r3, #0
 8003cea:	9305      	str	r3, [sp, #20]
 8003cec:	9508      	str	r5, [sp, #32]
 8003cee:	f04f 39ff 	mov.w	r9, #4294967295
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f8cd 9004 	str.w	r9, [sp, #4]
 8003cf8:	2312      	movs	r3, #18
 8003cfa:	9209      	str	r2, [sp, #36]	; 0x24
 8003cfc:	e7cf      	b.n	8003c9e <_dtoa_r+0x266>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	9308      	str	r3, [sp, #32]
 8003d02:	e7f4      	b.n	8003cee <_dtoa_r+0x2b6>
 8003d04:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8003d08:	f8cd 9004 	str.w	r9, [sp, #4]
 8003d0c:	464b      	mov	r3, r9
 8003d0e:	e7c6      	b.n	8003c9e <_dtoa_r+0x266>
 8003d10:	3101      	adds	r1, #1
 8003d12:	6041      	str	r1, [r0, #4]
 8003d14:	0052      	lsls	r2, r2, #1
 8003d16:	e7c6      	b.n	8003ca6 <_dtoa_r+0x26e>
 8003d18:	636f4361 	.word	0x636f4361
 8003d1c:	3fd287a7 	.word	0x3fd287a7
 8003d20:	8b60c8b3 	.word	0x8b60c8b3
 8003d24:	3fc68a28 	.word	0x3fc68a28
 8003d28:	509f79fb 	.word	0x509f79fb
 8003d2c:	3fd34413 	.word	0x3fd34413
 8003d30:	08005a45 	.word	0x08005a45
 8003d34:	08005a5c 	.word	0x08005a5c
 8003d38:	7ff00000 	.word	0x7ff00000
 8003d3c:	08005a41 	.word	0x08005a41
 8003d40:	08005a38 	.word	0x08005a38
 8003d44:	08005a15 	.word	0x08005a15
 8003d48:	3ff80000 	.word	0x3ff80000
 8003d4c:	08005b58 	.word	0x08005b58
 8003d50:	08005abb 	.word	0x08005abb
 8003d54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d56:	9a00      	ldr	r2, [sp, #0]
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	9b01      	ldr	r3, [sp, #4]
 8003d5c:	2b0e      	cmp	r3, #14
 8003d5e:	f200 80ad 	bhi.w	8003ebc <_dtoa_r+0x484>
 8003d62:	2d00      	cmp	r5, #0
 8003d64:	f000 80aa 	beq.w	8003ebc <_dtoa_r+0x484>
 8003d68:	f1ba 0f00 	cmp.w	sl, #0
 8003d6c:	dd36      	ble.n	8003ddc <_dtoa_r+0x3a4>
 8003d6e:	4ac3      	ldr	r2, [pc, #780]	; (800407c <_dtoa_r+0x644>)
 8003d70:	f00a 030f 	and.w	r3, sl, #15
 8003d74:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003d78:	ed93 7b00 	vldr	d7, [r3]
 8003d7c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8003d80:	ea4f 172a 	mov.w	r7, sl, asr #4
 8003d84:	eeb0 8a47 	vmov.f32	s16, s14
 8003d88:	eef0 8a67 	vmov.f32	s17, s15
 8003d8c:	d016      	beq.n	8003dbc <_dtoa_r+0x384>
 8003d8e:	4bbc      	ldr	r3, [pc, #752]	; (8004080 <_dtoa_r+0x648>)
 8003d90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003d94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003d98:	f7fc fd60 	bl	800085c <__aeabi_ddiv>
 8003d9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003da0:	f007 070f 	and.w	r7, r7, #15
 8003da4:	2503      	movs	r5, #3
 8003da6:	4eb6      	ldr	r6, [pc, #728]	; (8004080 <_dtoa_r+0x648>)
 8003da8:	b957      	cbnz	r7, 8003dc0 <_dtoa_r+0x388>
 8003daa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003dae:	ec53 2b18 	vmov	r2, r3, d8
 8003db2:	f7fc fd53 	bl	800085c <__aeabi_ddiv>
 8003db6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003dba:	e029      	b.n	8003e10 <_dtoa_r+0x3d8>
 8003dbc:	2502      	movs	r5, #2
 8003dbe:	e7f2      	b.n	8003da6 <_dtoa_r+0x36e>
 8003dc0:	07f9      	lsls	r1, r7, #31
 8003dc2:	d508      	bpl.n	8003dd6 <_dtoa_r+0x39e>
 8003dc4:	ec51 0b18 	vmov	r0, r1, d8
 8003dc8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003dcc:	f7fc fc1c 	bl	8000608 <__aeabi_dmul>
 8003dd0:	ec41 0b18 	vmov	d8, r0, r1
 8003dd4:	3501      	adds	r5, #1
 8003dd6:	107f      	asrs	r7, r7, #1
 8003dd8:	3608      	adds	r6, #8
 8003dda:	e7e5      	b.n	8003da8 <_dtoa_r+0x370>
 8003ddc:	f000 80a6 	beq.w	8003f2c <_dtoa_r+0x4f4>
 8003de0:	f1ca 0600 	rsb	r6, sl, #0
 8003de4:	4ba5      	ldr	r3, [pc, #660]	; (800407c <_dtoa_r+0x644>)
 8003de6:	4fa6      	ldr	r7, [pc, #664]	; (8004080 <_dtoa_r+0x648>)
 8003de8:	f006 020f 	and.w	r2, r6, #15
 8003dec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003df8:	f7fc fc06 	bl	8000608 <__aeabi_dmul>
 8003dfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e00:	1136      	asrs	r6, r6, #4
 8003e02:	2300      	movs	r3, #0
 8003e04:	2502      	movs	r5, #2
 8003e06:	2e00      	cmp	r6, #0
 8003e08:	f040 8085 	bne.w	8003f16 <_dtoa_r+0x4de>
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1d2      	bne.n	8003db6 <_dtoa_r+0x37e>
 8003e10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 808c 	beq.w	8003f30 <_dtoa_r+0x4f8>
 8003e18:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003e1c:	4b99      	ldr	r3, [pc, #612]	; (8004084 <_dtoa_r+0x64c>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	4630      	mov	r0, r6
 8003e22:	4639      	mov	r1, r7
 8003e24:	f7fc fe62 	bl	8000aec <__aeabi_dcmplt>
 8003e28:	2800      	cmp	r0, #0
 8003e2a:	f000 8081 	beq.w	8003f30 <_dtoa_r+0x4f8>
 8003e2e:	9b01      	ldr	r3, [sp, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d07d      	beq.n	8003f30 <_dtoa_r+0x4f8>
 8003e34:	f1b9 0f00 	cmp.w	r9, #0
 8003e38:	dd3c      	ble.n	8003eb4 <_dtoa_r+0x47c>
 8003e3a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8003e3e:	9307      	str	r3, [sp, #28]
 8003e40:	2200      	movs	r2, #0
 8003e42:	4b91      	ldr	r3, [pc, #580]	; (8004088 <_dtoa_r+0x650>)
 8003e44:	4630      	mov	r0, r6
 8003e46:	4639      	mov	r1, r7
 8003e48:	f7fc fbde 	bl	8000608 <__aeabi_dmul>
 8003e4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e50:	3501      	adds	r5, #1
 8003e52:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8003e56:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003e5a:	4628      	mov	r0, r5
 8003e5c:	f7fc fb6a 	bl	8000534 <__aeabi_i2d>
 8003e60:	4632      	mov	r2, r6
 8003e62:	463b      	mov	r3, r7
 8003e64:	f7fc fbd0 	bl	8000608 <__aeabi_dmul>
 8003e68:	4b88      	ldr	r3, [pc, #544]	; (800408c <_dtoa_r+0x654>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f7fc fa16 	bl	800029c <__adddf3>
 8003e70:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8003e74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e78:	9303      	str	r3, [sp, #12]
 8003e7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d15c      	bne.n	8003f3a <_dtoa_r+0x502>
 8003e80:	4b83      	ldr	r3, [pc, #524]	; (8004090 <_dtoa_r+0x658>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	4630      	mov	r0, r6
 8003e86:	4639      	mov	r1, r7
 8003e88:	f7fc fa06 	bl	8000298 <__aeabi_dsub>
 8003e8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003e90:	4606      	mov	r6, r0
 8003e92:	460f      	mov	r7, r1
 8003e94:	f7fc fe48 	bl	8000b28 <__aeabi_dcmpgt>
 8003e98:	2800      	cmp	r0, #0
 8003e9a:	f040 8296 	bne.w	80043ca <_dtoa_r+0x992>
 8003e9e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8003ea2:	4630      	mov	r0, r6
 8003ea4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003ea8:	4639      	mov	r1, r7
 8003eaa:	f7fc fe1f 	bl	8000aec <__aeabi_dcmplt>
 8003eae:	2800      	cmp	r0, #0
 8003eb0:	f040 8288 	bne.w	80043c4 <_dtoa_r+0x98c>
 8003eb4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003eb8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ebc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f2c0 8158 	blt.w	8004174 <_dtoa_r+0x73c>
 8003ec4:	f1ba 0f0e 	cmp.w	sl, #14
 8003ec8:	f300 8154 	bgt.w	8004174 <_dtoa_r+0x73c>
 8003ecc:	4b6b      	ldr	r3, [pc, #428]	; (800407c <_dtoa_r+0x644>)
 8003ece:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003ed2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f280 80e3 	bge.w	80040a4 <_dtoa_r+0x66c>
 8003ede:	9b01      	ldr	r3, [sp, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f300 80df 	bgt.w	80040a4 <_dtoa_r+0x66c>
 8003ee6:	f040 826d 	bne.w	80043c4 <_dtoa_r+0x98c>
 8003eea:	4b69      	ldr	r3, [pc, #420]	; (8004090 <_dtoa_r+0x658>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	4640      	mov	r0, r8
 8003ef0:	4649      	mov	r1, r9
 8003ef2:	f7fc fb89 	bl	8000608 <__aeabi_dmul>
 8003ef6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003efa:	f7fc fe0b 	bl	8000b14 <__aeabi_dcmpge>
 8003efe:	9e01      	ldr	r6, [sp, #4]
 8003f00:	4637      	mov	r7, r6
 8003f02:	2800      	cmp	r0, #0
 8003f04:	f040 8243 	bne.w	800438e <_dtoa_r+0x956>
 8003f08:	9d00      	ldr	r5, [sp, #0]
 8003f0a:	2331      	movs	r3, #49	; 0x31
 8003f0c:	f805 3b01 	strb.w	r3, [r5], #1
 8003f10:	f10a 0a01 	add.w	sl, sl, #1
 8003f14:	e23f      	b.n	8004396 <_dtoa_r+0x95e>
 8003f16:	07f2      	lsls	r2, r6, #31
 8003f18:	d505      	bpl.n	8003f26 <_dtoa_r+0x4ee>
 8003f1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f1e:	f7fc fb73 	bl	8000608 <__aeabi_dmul>
 8003f22:	3501      	adds	r5, #1
 8003f24:	2301      	movs	r3, #1
 8003f26:	1076      	asrs	r6, r6, #1
 8003f28:	3708      	adds	r7, #8
 8003f2a:	e76c      	b.n	8003e06 <_dtoa_r+0x3ce>
 8003f2c:	2502      	movs	r5, #2
 8003f2e:	e76f      	b.n	8003e10 <_dtoa_r+0x3d8>
 8003f30:	9b01      	ldr	r3, [sp, #4]
 8003f32:	f8cd a01c 	str.w	sl, [sp, #28]
 8003f36:	930c      	str	r3, [sp, #48]	; 0x30
 8003f38:	e78d      	b.n	8003e56 <_dtoa_r+0x41e>
 8003f3a:	9900      	ldr	r1, [sp, #0]
 8003f3c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003f3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f40:	4b4e      	ldr	r3, [pc, #312]	; (800407c <_dtoa_r+0x644>)
 8003f42:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003f46:	4401      	add	r1, r0
 8003f48:	9102      	str	r1, [sp, #8]
 8003f4a:	9908      	ldr	r1, [sp, #32]
 8003f4c:	eeb0 8a47 	vmov.f32	s16, s14
 8003f50:	eef0 8a67 	vmov.f32	s17, s15
 8003f54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003f58:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003f5c:	2900      	cmp	r1, #0
 8003f5e:	d045      	beq.n	8003fec <_dtoa_r+0x5b4>
 8003f60:	494c      	ldr	r1, [pc, #304]	; (8004094 <_dtoa_r+0x65c>)
 8003f62:	2000      	movs	r0, #0
 8003f64:	f7fc fc7a 	bl	800085c <__aeabi_ddiv>
 8003f68:	ec53 2b18 	vmov	r2, r3, d8
 8003f6c:	f7fc f994 	bl	8000298 <__aeabi_dsub>
 8003f70:	9d00      	ldr	r5, [sp, #0]
 8003f72:	ec41 0b18 	vmov	d8, r0, r1
 8003f76:	4639      	mov	r1, r7
 8003f78:	4630      	mov	r0, r6
 8003f7a:	f7fc fdf5 	bl	8000b68 <__aeabi_d2iz>
 8003f7e:	900c      	str	r0, [sp, #48]	; 0x30
 8003f80:	f7fc fad8 	bl	8000534 <__aeabi_i2d>
 8003f84:	4602      	mov	r2, r0
 8003f86:	460b      	mov	r3, r1
 8003f88:	4630      	mov	r0, r6
 8003f8a:	4639      	mov	r1, r7
 8003f8c:	f7fc f984 	bl	8000298 <__aeabi_dsub>
 8003f90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f92:	3330      	adds	r3, #48	; 0x30
 8003f94:	f805 3b01 	strb.w	r3, [r5], #1
 8003f98:	ec53 2b18 	vmov	r2, r3, d8
 8003f9c:	4606      	mov	r6, r0
 8003f9e:	460f      	mov	r7, r1
 8003fa0:	f7fc fda4 	bl	8000aec <__aeabi_dcmplt>
 8003fa4:	2800      	cmp	r0, #0
 8003fa6:	d165      	bne.n	8004074 <_dtoa_r+0x63c>
 8003fa8:	4632      	mov	r2, r6
 8003faa:	463b      	mov	r3, r7
 8003fac:	4935      	ldr	r1, [pc, #212]	; (8004084 <_dtoa_r+0x64c>)
 8003fae:	2000      	movs	r0, #0
 8003fb0:	f7fc f972 	bl	8000298 <__aeabi_dsub>
 8003fb4:	ec53 2b18 	vmov	r2, r3, d8
 8003fb8:	f7fc fd98 	bl	8000aec <__aeabi_dcmplt>
 8003fbc:	2800      	cmp	r0, #0
 8003fbe:	f040 80b9 	bne.w	8004134 <_dtoa_r+0x6fc>
 8003fc2:	9b02      	ldr	r3, [sp, #8]
 8003fc4:	429d      	cmp	r5, r3
 8003fc6:	f43f af75 	beq.w	8003eb4 <_dtoa_r+0x47c>
 8003fca:	4b2f      	ldr	r3, [pc, #188]	; (8004088 <_dtoa_r+0x650>)
 8003fcc:	ec51 0b18 	vmov	r0, r1, d8
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f7fc fb19 	bl	8000608 <__aeabi_dmul>
 8003fd6:	4b2c      	ldr	r3, [pc, #176]	; (8004088 <_dtoa_r+0x650>)
 8003fd8:	ec41 0b18 	vmov	d8, r0, r1
 8003fdc:	2200      	movs	r2, #0
 8003fde:	4630      	mov	r0, r6
 8003fe0:	4639      	mov	r1, r7
 8003fe2:	f7fc fb11 	bl	8000608 <__aeabi_dmul>
 8003fe6:	4606      	mov	r6, r0
 8003fe8:	460f      	mov	r7, r1
 8003fea:	e7c4      	b.n	8003f76 <_dtoa_r+0x53e>
 8003fec:	ec51 0b17 	vmov	r0, r1, d7
 8003ff0:	f7fc fb0a 	bl	8000608 <__aeabi_dmul>
 8003ff4:	9b02      	ldr	r3, [sp, #8]
 8003ff6:	9d00      	ldr	r5, [sp, #0]
 8003ff8:	930c      	str	r3, [sp, #48]	; 0x30
 8003ffa:	ec41 0b18 	vmov	d8, r0, r1
 8003ffe:	4639      	mov	r1, r7
 8004000:	4630      	mov	r0, r6
 8004002:	f7fc fdb1 	bl	8000b68 <__aeabi_d2iz>
 8004006:	9011      	str	r0, [sp, #68]	; 0x44
 8004008:	f7fc fa94 	bl	8000534 <__aeabi_i2d>
 800400c:	4602      	mov	r2, r0
 800400e:	460b      	mov	r3, r1
 8004010:	4630      	mov	r0, r6
 8004012:	4639      	mov	r1, r7
 8004014:	f7fc f940 	bl	8000298 <__aeabi_dsub>
 8004018:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800401a:	3330      	adds	r3, #48	; 0x30
 800401c:	f805 3b01 	strb.w	r3, [r5], #1
 8004020:	9b02      	ldr	r3, [sp, #8]
 8004022:	429d      	cmp	r5, r3
 8004024:	4606      	mov	r6, r0
 8004026:	460f      	mov	r7, r1
 8004028:	f04f 0200 	mov.w	r2, #0
 800402c:	d134      	bne.n	8004098 <_dtoa_r+0x660>
 800402e:	4b19      	ldr	r3, [pc, #100]	; (8004094 <_dtoa_r+0x65c>)
 8004030:	ec51 0b18 	vmov	r0, r1, d8
 8004034:	f7fc f932 	bl	800029c <__adddf3>
 8004038:	4602      	mov	r2, r0
 800403a:	460b      	mov	r3, r1
 800403c:	4630      	mov	r0, r6
 800403e:	4639      	mov	r1, r7
 8004040:	f7fc fd72 	bl	8000b28 <__aeabi_dcmpgt>
 8004044:	2800      	cmp	r0, #0
 8004046:	d175      	bne.n	8004134 <_dtoa_r+0x6fc>
 8004048:	ec53 2b18 	vmov	r2, r3, d8
 800404c:	4911      	ldr	r1, [pc, #68]	; (8004094 <_dtoa_r+0x65c>)
 800404e:	2000      	movs	r0, #0
 8004050:	f7fc f922 	bl	8000298 <__aeabi_dsub>
 8004054:	4602      	mov	r2, r0
 8004056:	460b      	mov	r3, r1
 8004058:	4630      	mov	r0, r6
 800405a:	4639      	mov	r1, r7
 800405c:	f7fc fd46 	bl	8000aec <__aeabi_dcmplt>
 8004060:	2800      	cmp	r0, #0
 8004062:	f43f af27 	beq.w	8003eb4 <_dtoa_r+0x47c>
 8004066:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004068:	1e6b      	subs	r3, r5, #1
 800406a:	930c      	str	r3, [sp, #48]	; 0x30
 800406c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004070:	2b30      	cmp	r3, #48	; 0x30
 8004072:	d0f8      	beq.n	8004066 <_dtoa_r+0x62e>
 8004074:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004078:	e04a      	b.n	8004110 <_dtoa_r+0x6d8>
 800407a:	bf00      	nop
 800407c:	08005b58 	.word	0x08005b58
 8004080:	08005b30 	.word	0x08005b30
 8004084:	3ff00000 	.word	0x3ff00000
 8004088:	40240000 	.word	0x40240000
 800408c:	401c0000 	.word	0x401c0000
 8004090:	40140000 	.word	0x40140000
 8004094:	3fe00000 	.word	0x3fe00000
 8004098:	4baf      	ldr	r3, [pc, #700]	; (8004358 <_dtoa_r+0x920>)
 800409a:	f7fc fab5 	bl	8000608 <__aeabi_dmul>
 800409e:	4606      	mov	r6, r0
 80040a0:	460f      	mov	r7, r1
 80040a2:	e7ac      	b.n	8003ffe <_dtoa_r+0x5c6>
 80040a4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80040a8:	9d00      	ldr	r5, [sp, #0]
 80040aa:	4642      	mov	r2, r8
 80040ac:	464b      	mov	r3, r9
 80040ae:	4630      	mov	r0, r6
 80040b0:	4639      	mov	r1, r7
 80040b2:	f7fc fbd3 	bl	800085c <__aeabi_ddiv>
 80040b6:	f7fc fd57 	bl	8000b68 <__aeabi_d2iz>
 80040ba:	9002      	str	r0, [sp, #8]
 80040bc:	f7fc fa3a 	bl	8000534 <__aeabi_i2d>
 80040c0:	4642      	mov	r2, r8
 80040c2:	464b      	mov	r3, r9
 80040c4:	f7fc faa0 	bl	8000608 <__aeabi_dmul>
 80040c8:	4602      	mov	r2, r0
 80040ca:	460b      	mov	r3, r1
 80040cc:	4630      	mov	r0, r6
 80040ce:	4639      	mov	r1, r7
 80040d0:	f7fc f8e2 	bl	8000298 <__aeabi_dsub>
 80040d4:	9e02      	ldr	r6, [sp, #8]
 80040d6:	9f01      	ldr	r7, [sp, #4]
 80040d8:	3630      	adds	r6, #48	; 0x30
 80040da:	f805 6b01 	strb.w	r6, [r5], #1
 80040de:	9e00      	ldr	r6, [sp, #0]
 80040e0:	1bae      	subs	r6, r5, r6
 80040e2:	42b7      	cmp	r7, r6
 80040e4:	4602      	mov	r2, r0
 80040e6:	460b      	mov	r3, r1
 80040e8:	d137      	bne.n	800415a <_dtoa_r+0x722>
 80040ea:	f7fc f8d7 	bl	800029c <__adddf3>
 80040ee:	4642      	mov	r2, r8
 80040f0:	464b      	mov	r3, r9
 80040f2:	4606      	mov	r6, r0
 80040f4:	460f      	mov	r7, r1
 80040f6:	f7fc fd17 	bl	8000b28 <__aeabi_dcmpgt>
 80040fa:	b9c8      	cbnz	r0, 8004130 <_dtoa_r+0x6f8>
 80040fc:	4642      	mov	r2, r8
 80040fe:	464b      	mov	r3, r9
 8004100:	4630      	mov	r0, r6
 8004102:	4639      	mov	r1, r7
 8004104:	f7fc fce8 	bl	8000ad8 <__aeabi_dcmpeq>
 8004108:	b110      	cbz	r0, 8004110 <_dtoa_r+0x6d8>
 800410a:	9b02      	ldr	r3, [sp, #8]
 800410c:	07d9      	lsls	r1, r3, #31
 800410e:	d40f      	bmi.n	8004130 <_dtoa_r+0x6f8>
 8004110:	4620      	mov	r0, r4
 8004112:	4659      	mov	r1, fp
 8004114:	f000 fac8 	bl	80046a8 <_Bfree>
 8004118:	2300      	movs	r3, #0
 800411a:	702b      	strb	r3, [r5, #0]
 800411c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800411e:	f10a 0001 	add.w	r0, sl, #1
 8004122:	6018      	str	r0, [r3, #0]
 8004124:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004126:	2b00      	cmp	r3, #0
 8004128:	f43f acd8 	beq.w	8003adc <_dtoa_r+0xa4>
 800412c:	601d      	str	r5, [r3, #0]
 800412e:	e4d5      	b.n	8003adc <_dtoa_r+0xa4>
 8004130:	f8cd a01c 	str.w	sl, [sp, #28]
 8004134:	462b      	mov	r3, r5
 8004136:	461d      	mov	r5, r3
 8004138:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800413c:	2a39      	cmp	r2, #57	; 0x39
 800413e:	d108      	bne.n	8004152 <_dtoa_r+0x71a>
 8004140:	9a00      	ldr	r2, [sp, #0]
 8004142:	429a      	cmp	r2, r3
 8004144:	d1f7      	bne.n	8004136 <_dtoa_r+0x6fe>
 8004146:	9a07      	ldr	r2, [sp, #28]
 8004148:	9900      	ldr	r1, [sp, #0]
 800414a:	3201      	adds	r2, #1
 800414c:	9207      	str	r2, [sp, #28]
 800414e:	2230      	movs	r2, #48	; 0x30
 8004150:	700a      	strb	r2, [r1, #0]
 8004152:	781a      	ldrb	r2, [r3, #0]
 8004154:	3201      	adds	r2, #1
 8004156:	701a      	strb	r2, [r3, #0]
 8004158:	e78c      	b.n	8004074 <_dtoa_r+0x63c>
 800415a:	4b7f      	ldr	r3, [pc, #508]	; (8004358 <_dtoa_r+0x920>)
 800415c:	2200      	movs	r2, #0
 800415e:	f7fc fa53 	bl	8000608 <__aeabi_dmul>
 8004162:	2200      	movs	r2, #0
 8004164:	2300      	movs	r3, #0
 8004166:	4606      	mov	r6, r0
 8004168:	460f      	mov	r7, r1
 800416a:	f7fc fcb5 	bl	8000ad8 <__aeabi_dcmpeq>
 800416e:	2800      	cmp	r0, #0
 8004170:	d09b      	beq.n	80040aa <_dtoa_r+0x672>
 8004172:	e7cd      	b.n	8004110 <_dtoa_r+0x6d8>
 8004174:	9a08      	ldr	r2, [sp, #32]
 8004176:	2a00      	cmp	r2, #0
 8004178:	f000 80c4 	beq.w	8004304 <_dtoa_r+0x8cc>
 800417c:	9a05      	ldr	r2, [sp, #20]
 800417e:	2a01      	cmp	r2, #1
 8004180:	f300 80a8 	bgt.w	80042d4 <_dtoa_r+0x89c>
 8004184:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004186:	2a00      	cmp	r2, #0
 8004188:	f000 80a0 	beq.w	80042cc <_dtoa_r+0x894>
 800418c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004190:	9e06      	ldr	r6, [sp, #24]
 8004192:	4645      	mov	r5, r8
 8004194:	9a04      	ldr	r2, [sp, #16]
 8004196:	2101      	movs	r1, #1
 8004198:	441a      	add	r2, r3
 800419a:	4620      	mov	r0, r4
 800419c:	4498      	add	r8, r3
 800419e:	9204      	str	r2, [sp, #16]
 80041a0:	f000 fb3e 	bl	8004820 <__i2b>
 80041a4:	4607      	mov	r7, r0
 80041a6:	2d00      	cmp	r5, #0
 80041a8:	dd0b      	ble.n	80041c2 <_dtoa_r+0x78a>
 80041aa:	9b04      	ldr	r3, [sp, #16]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	dd08      	ble.n	80041c2 <_dtoa_r+0x78a>
 80041b0:	42ab      	cmp	r3, r5
 80041b2:	9a04      	ldr	r2, [sp, #16]
 80041b4:	bfa8      	it	ge
 80041b6:	462b      	movge	r3, r5
 80041b8:	eba8 0803 	sub.w	r8, r8, r3
 80041bc:	1aed      	subs	r5, r5, r3
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	9304      	str	r3, [sp, #16]
 80041c2:	9b06      	ldr	r3, [sp, #24]
 80041c4:	b1fb      	cbz	r3, 8004206 <_dtoa_r+0x7ce>
 80041c6:	9b08      	ldr	r3, [sp, #32]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 809f 	beq.w	800430c <_dtoa_r+0x8d4>
 80041ce:	2e00      	cmp	r6, #0
 80041d0:	dd11      	ble.n	80041f6 <_dtoa_r+0x7be>
 80041d2:	4639      	mov	r1, r7
 80041d4:	4632      	mov	r2, r6
 80041d6:	4620      	mov	r0, r4
 80041d8:	f000 fbde 	bl	8004998 <__pow5mult>
 80041dc:	465a      	mov	r2, fp
 80041de:	4601      	mov	r1, r0
 80041e0:	4607      	mov	r7, r0
 80041e2:	4620      	mov	r0, r4
 80041e4:	f000 fb32 	bl	800484c <__multiply>
 80041e8:	4659      	mov	r1, fp
 80041ea:	9007      	str	r0, [sp, #28]
 80041ec:	4620      	mov	r0, r4
 80041ee:	f000 fa5b 	bl	80046a8 <_Bfree>
 80041f2:	9b07      	ldr	r3, [sp, #28]
 80041f4:	469b      	mov	fp, r3
 80041f6:	9b06      	ldr	r3, [sp, #24]
 80041f8:	1b9a      	subs	r2, r3, r6
 80041fa:	d004      	beq.n	8004206 <_dtoa_r+0x7ce>
 80041fc:	4659      	mov	r1, fp
 80041fe:	4620      	mov	r0, r4
 8004200:	f000 fbca 	bl	8004998 <__pow5mult>
 8004204:	4683      	mov	fp, r0
 8004206:	2101      	movs	r1, #1
 8004208:	4620      	mov	r0, r4
 800420a:	f000 fb09 	bl	8004820 <__i2b>
 800420e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004210:	2b00      	cmp	r3, #0
 8004212:	4606      	mov	r6, r0
 8004214:	dd7c      	ble.n	8004310 <_dtoa_r+0x8d8>
 8004216:	461a      	mov	r2, r3
 8004218:	4601      	mov	r1, r0
 800421a:	4620      	mov	r0, r4
 800421c:	f000 fbbc 	bl	8004998 <__pow5mult>
 8004220:	9b05      	ldr	r3, [sp, #20]
 8004222:	2b01      	cmp	r3, #1
 8004224:	4606      	mov	r6, r0
 8004226:	dd76      	ble.n	8004316 <_dtoa_r+0x8de>
 8004228:	2300      	movs	r3, #0
 800422a:	9306      	str	r3, [sp, #24]
 800422c:	6933      	ldr	r3, [r6, #16]
 800422e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004232:	6918      	ldr	r0, [r3, #16]
 8004234:	f000 faa4 	bl	8004780 <__hi0bits>
 8004238:	f1c0 0020 	rsb	r0, r0, #32
 800423c:	9b04      	ldr	r3, [sp, #16]
 800423e:	4418      	add	r0, r3
 8004240:	f010 001f 	ands.w	r0, r0, #31
 8004244:	f000 8086 	beq.w	8004354 <_dtoa_r+0x91c>
 8004248:	f1c0 0320 	rsb	r3, r0, #32
 800424c:	2b04      	cmp	r3, #4
 800424e:	dd7f      	ble.n	8004350 <_dtoa_r+0x918>
 8004250:	f1c0 001c 	rsb	r0, r0, #28
 8004254:	9b04      	ldr	r3, [sp, #16]
 8004256:	4403      	add	r3, r0
 8004258:	4480      	add	r8, r0
 800425a:	4405      	add	r5, r0
 800425c:	9304      	str	r3, [sp, #16]
 800425e:	f1b8 0f00 	cmp.w	r8, #0
 8004262:	dd05      	ble.n	8004270 <_dtoa_r+0x838>
 8004264:	4659      	mov	r1, fp
 8004266:	4642      	mov	r2, r8
 8004268:	4620      	mov	r0, r4
 800426a:	f000 fbef 	bl	8004a4c <__lshift>
 800426e:	4683      	mov	fp, r0
 8004270:	9b04      	ldr	r3, [sp, #16]
 8004272:	2b00      	cmp	r3, #0
 8004274:	dd05      	ble.n	8004282 <_dtoa_r+0x84a>
 8004276:	4631      	mov	r1, r6
 8004278:	461a      	mov	r2, r3
 800427a:	4620      	mov	r0, r4
 800427c:	f000 fbe6 	bl	8004a4c <__lshift>
 8004280:	4606      	mov	r6, r0
 8004282:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004284:	2b00      	cmp	r3, #0
 8004286:	d069      	beq.n	800435c <_dtoa_r+0x924>
 8004288:	4631      	mov	r1, r6
 800428a:	4658      	mov	r0, fp
 800428c:	f000 fc4a 	bl	8004b24 <__mcmp>
 8004290:	2800      	cmp	r0, #0
 8004292:	da63      	bge.n	800435c <_dtoa_r+0x924>
 8004294:	2300      	movs	r3, #0
 8004296:	4659      	mov	r1, fp
 8004298:	220a      	movs	r2, #10
 800429a:	4620      	mov	r0, r4
 800429c:	f000 fa26 	bl	80046ec <__multadd>
 80042a0:	9b08      	ldr	r3, [sp, #32]
 80042a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80042a6:	4683      	mov	fp, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f000 818f 	beq.w	80045cc <_dtoa_r+0xb94>
 80042ae:	4639      	mov	r1, r7
 80042b0:	2300      	movs	r3, #0
 80042b2:	220a      	movs	r2, #10
 80042b4:	4620      	mov	r0, r4
 80042b6:	f000 fa19 	bl	80046ec <__multadd>
 80042ba:	f1b9 0f00 	cmp.w	r9, #0
 80042be:	4607      	mov	r7, r0
 80042c0:	f300 808e 	bgt.w	80043e0 <_dtoa_r+0x9a8>
 80042c4:	9b05      	ldr	r3, [sp, #20]
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	dc50      	bgt.n	800436c <_dtoa_r+0x934>
 80042ca:	e089      	b.n	80043e0 <_dtoa_r+0x9a8>
 80042cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80042ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80042d2:	e75d      	b.n	8004190 <_dtoa_r+0x758>
 80042d4:	9b01      	ldr	r3, [sp, #4]
 80042d6:	1e5e      	subs	r6, r3, #1
 80042d8:	9b06      	ldr	r3, [sp, #24]
 80042da:	42b3      	cmp	r3, r6
 80042dc:	bfbf      	itttt	lt
 80042de:	9b06      	ldrlt	r3, [sp, #24]
 80042e0:	9606      	strlt	r6, [sp, #24]
 80042e2:	1af2      	sublt	r2, r6, r3
 80042e4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80042e6:	bfb6      	itet	lt
 80042e8:	189b      	addlt	r3, r3, r2
 80042ea:	1b9e      	subge	r6, r3, r6
 80042ec:	930d      	strlt	r3, [sp, #52]	; 0x34
 80042ee:	9b01      	ldr	r3, [sp, #4]
 80042f0:	bfb8      	it	lt
 80042f2:	2600      	movlt	r6, #0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	bfb5      	itete	lt
 80042f8:	eba8 0503 	sublt.w	r5, r8, r3
 80042fc:	9b01      	ldrge	r3, [sp, #4]
 80042fe:	2300      	movlt	r3, #0
 8004300:	4645      	movge	r5, r8
 8004302:	e747      	b.n	8004194 <_dtoa_r+0x75c>
 8004304:	9e06      	ldr	r6, [sp, #24]
 8004306:	9f08      	ldr	r7, [sp, #32]
 8004308:	4645      	mov	r5, r8
 800430a:	e74c      	b.n	80041a6 <_dtoa_r+0x76e>
 800430c:	9a06      	ldr	r2, [sp, #24]
 800430e:	e775      	b.n	80041fc <_dtoa_r+0x7c4>
 8004310:	9b05      	ldr	r3, [sp, #20]
 8004312:	2b01      	cmp	r3, #1
 8004314:	dc18      	bgt.n	8004348 <_dtoa_r+0x910>
 8004316:	9b02      	ldr	r3, [sp, #8]
 8004318:	b9b3      	cbnz	r3, 8004348 <_dtoa_r+0x910>
 800431a:	9b03      	ldr	r3, [sp, #12]
 800431c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004320:	b9a3      	cbnz	r3, 800434c <_dtoa_r+0x914>
 8004322:	9b03      	ldr	r3, [sp, #12]
 8004324:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004328:	0d1b      	lsrs	r3, r3, #20
 800432a:	051b      	lsls	r3, r3, #20
 800432c:	b12b      	cbz	r3, 800433a <_dtoa_r+0x902>
 800432e:	9b04      	ldr	r3, [sp, #16]
 8004330:	3301      	adds	r3, #1
 8004332:	9304      	str	r3, [sp, #16]
 8004334:	f108 0801 	add.w	r8, r8, #1
 8004338:	2301      	movs	r3, #1
 800433a:	9306      	str	r3, [sp, #24]
 800433c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800433e:	2b00      	cmp	r3, #0
 8004340:	f47f af74 	bne.w	800422c <_dtoa_r+0x7f4>
 8004344:	2001      	movs	r0, #1
 8004346:	e779      	b.n	800423c <_dtoa_r+0x804>
 8004348:	2300      	movs	r3, #0
 800434a:	e7f6      	b.n	800433a <_dtoa_r+0x902>
 800434c:	9b02      	ldr	r3, [sp, #8]
 800434e:	e7f4      	b.n	800433a <_dtoa_r+0x902>
 8004350:	d085      	beq.n	800425e <_dtoa_r+0x826>
 8004352:	4618      	mov	r0, r3
 8004354:	301c      	adds	r0, #28
 8004356:	e77d      	b.n	8004254 <_dtoa_r+0x81c>
 8004358:	40240000 	.word	0x40240000
 800435c:	9b01      	ldr	r3, [sp, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	dc38      	bgt.n	80043d4 <_dtoa_r+0x99c>
 8004362:	9b05      	ldr	r3, [sp, #20]
 8004364:	2b02      	cmp	r3, #2
 8004366:	dd35      	ble.n	80043d4 <_dtoa_r+0x99c>
 8004368:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800436c:	f1b9 0f00 	cmp.w	r9, #0
 8004370:	d10d      	bne.n	800438e <_dtoa_r+0x956>
 8004372:	4631      	mov	r1, r6
 8004374:	464b      	mov	r3, r9
 8004376:	2205      	movs	r2, #5
 8004378:	4620      	mov	r0, r4
 800437a:	f000 f9b7 	bl	80046ec <__multadd>
 800437e:	4601      	mov	r1, r0
 8004380:	4606      	mov	r6, r0
 8004382:	4658      	mov	r0, fp
 8004384:	f000 fbce 	bl	8004b24 <__mcmp>
 8004388:	2800      	cmp	r0, #0
 800438a:	f73f adbd 	bgt.w	8003f08 <_dtoa_r+0x4d0>
 800438e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004390:	9d00      	ldr	r5, [sp, #0]
 8004392:	ea6f 0a03 	mvn.w	sl, r3
 8004396:	f04f 0800 	mov.w	r8, #0
 800439a:	4631      	mov	r1, r6
 800439c:	4620      	mov	r0, r4
 800439e:	f000 f983 	bl	80046a8 <_Bfree>
 80043a2:	2f00      	cmp	r7, #0
 80043a4:	f43f aeb4 	beq.w	8004110 <_dtoa_r+0x6d8>
 80043a8:	f1b8 0f00 	cmp.w	r8, #0
 80043ac:	d005      	beq.n	80043ba <_dtoa_r+0x982>
 80043ae:	45b8      	cmp	r8, r7
 80043b0:	d003      	beq.n	80043ba <_dtoa_r+0x982>
 80043b2:	4641      	mov	r1, r8
 80043b4:	4620      	mov	r0, r4
 80043b6:	f000 f977 	bl	80046a8 <_Bfree>
 80043ba:	4639      	mov	r1, r7
 80043bc:	4620      	mov	r0, r4
 80043be:	f000 f973 	bl	80046a8 <_Bfree>
 80043c2:	e6a5      	b.n	8004110 <_dtoa_r+0x6d8>
 80043c4:	2600      	movs	r6, #0
 80043c6:	4637      	mov	r7, r6
 80043c8:	e7e1      	b.n	800438e <_dtoa_r+0x956>
 80043ca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80043cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80043d0:	4637      	mov	r7, r6
 80043d2:	e599      	b.n	8003f08 <_dtoa_r+0x4d0>
 80043d4:	9b08      	ldr	r3, [sp, #32]
 80043d6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f000 80fd 	beq.w	80045da <_dtoa_r+0xba2>
 80043e0:	2d00      	cmp	r5, #0
 80043e2:	dd05      	ble.n	80043f0 <_dtoa_r+0x9b8>
 80043e4:	4639      	mov	r1, r7
 80043e6:	462a      	mov	r2, r5
 80043e8:	4620      	mov	r0, r4
 80043ea:	f000 fb2f 	bl	8004a4c <__lshift>
 80043ee:	4607      	mov	r7, r0
 80043f0:	9b06      	ldr	r3, [sp, #24]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d05c      	beq.n	80044b0 <_dtoa_r+0xa78>
 80043f6:	6879      	ldr	r1, [r7, #4]
 80043f8:	4620      	mov	r0, r4
 80043fa:	f000 f915 	bl	8004628 <_Balloc>
 80043fe:	4605      	mov	r5, r0
 8004400:	b928      	cbnz	r0, 800440e <_dtoa_r+0x9d6>
 8004402:	4b80      	ldr	r3, [pc, #512]	; (8004604 <_dtoa_r+0xbcc>)
 8004404:	4602      	mov	r2, r0
 8004406:	f240 21ea 	movw	r1, #746	; 0x2ea
 800440a:	f7ff bb2e 	b.w	8003a6a <_dtoa_r+0x32>
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	3202      	adds	r2, #2
 8004412:	0092      	lsls	r2, r2, #2
 8004414:	f107 010c 	add.w	r1, r7, #12
 8004418:	300c      	adds	r0, #12
 800441a:	f7fe fdff 	bl	800301c <memcpy>
 800441e:	2201      	movs	r2, #1
 8004420:	4629      	mov	r1, r5
 8004422:	4620      	mov	r0, r4
 8004424:	f000 fb12 	bl	8004a4c <__lshift>
 8004428:	9b00      	ldr	r3, [sp, #0]
 800442a:	3301      	adds	r3, #1
 800442c:	9301      	str	r3, [sp, #4]
 800442e:	9b00      	ldr	r3, [sp, #0]
 8004430:	444b      	add	r3, r9
 8004432:	9307      	str	r3, [sp, #28]
 8004434:	9b02      	ldr	r3, [sp, #8]
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	46b8      	mov	r8, r7
 800443c:	9306      	str	r3, [sp, #24]
 800443e:	4607      	mov	r7, r0
 8004440:	9b01      	ldr	r3, [sp, #4]
 8004442:	4631      	mov	r1, r6
 8004444:	3b01      	subs	r3, #1
 8004446:	4658      	mov	r0, fp
 8004448:	9302      	str	r3, [sp, #8]
 800444a:	f7ff fa67 	bl	800391c <quorem>
 800444e:	4603      	mov	r3, r0
 8004450:	3330      	adds	r3, #48	; 0x30
 8004452:	9004      	str	r0, [sp, #16]
 8004454:	4641      	mov	r1, r8
 8004456:	4658      	mov	r0, fp
 8004458:	9308      	str	r3, [sp, #32]
 800445a:	f000 fb63 	bl	8004b24 <__mcmp>
 800445e:	463a      	mov	r2, r7
 8004460:	4681      	mov	r9, r0
 8004462:	4631      	mov	r1, r6
 8004464:	4620      	mov	r0, r4
 8004466:	f000 fb79 	bl	8004b5c <__mdiff>
 800446a:	68c2      	ldr	r2, [r0, #12]
 800446c:	9b08      	ldr	r3, [sp, #32]
 800446e:	4605      	mov	r5, r0
 8004470:	bb02      	cbnz	r2, 80044b4 <_dtoa_r+0xa7c>
 8004472:	4601      	mov	r1, r0
 8004474:	4658      	mov	r0, fp
 8004476:	f000 fb55 	bl	8004b24 <__mcmp>
 800447a:	9b08      	ldr	r3, [sp, #32]
 800447c:	4602      	mov	r2, r0
 800447e:	4629      	mov	r1, r5
 8004480:	4620      	mov	r0, r4
 8004482:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8004486:	f000 f90f 	bl	80046a8 <_Bfree>
 800448a:	9b05      	ldr	r3, [sp, #20]
 800448c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800448e:	9d01      	ldr	r5, [sp, #4]
 8004490:	ea43 0102 	orr.w	r1, r3, r2
 8004494:	9b06      	ldr	r3, [sp, #24]
 8004496:	430b      	orrs	r3, r1
 8004498:	9b08      	ldr	r3, [sp, #32]
 800449a:	d10d      	bne.n	80044b8 <_dtoa_r+0xa80>
 800449c:	2b39      	cmp	r3, #57	; 0x39
 800449e:	d029      	beq.n	80044f4 <_dtoa_r+0xabc>
 80044a0:	f1b9 0f00 	cmp.w	r9, #0
 80044a4:	dd01      	ble.n	80044aa <_dtoa_r+0xa72>
 80044a6:	9b04      	ldr	r3, [sp, #16]
 80044a8:	3331      	adds	r3, #49	; 0x31
 80044aa:	9a02      	ldr	r2, [sp, #8]
 80044ac:	7013      	strb	r3, [r2, #0]
 80044ae:	e774      	b.n	800439a <_dtoa_r+0x962>
 80044b0:	4638      	mov	r0, r7
 80044b2:	e7b9      	b.n	8004428 <_dtoa_r+0x9f0>
 80044b4:	2201      	movs	r2, #1
 80044b6:	e7e2      	b.n	800447e <_dtoa_r+0xa46>
 80044b8:	f1b9 0f00 	cmp.w	r9, #0
 80044bc:	db06      	blt.n	80044cc <_dtoa_r+0xa94>
 80044be:	9905      	ldr	r1, [sp, #20]
 80044c0:	ea41 0909 	orr.w	r9, r1, r9
 80044c4:	9906      	ldr	r1, [sp, #24]
 80044c6:	ea59 0101 	orrs.w	r1, r9, r1
 80044ca:	d120      	bne.n	800450e <_dtoa_r+0xad6>
 80044cc:	2a00      	cmp	r2, #0
 80044ce:	ddec      	ble.n	80044aa <_dtoa_r+0xa72>
 80044d0:	4659      	mov	r1, fp
 80044d2:	2201      	movs	r2, #1
 80044d4:	4620      	mov	r0, r4
 80044d6:	9301      	str	r3, [sp, #4]
 80044d8:	f000 fab8 	bl	8004a4c <__lshift>
 80044dc:	4631      	mov	r1, r6
 80044de:	4683      	mov	fp, r0
 80044e0:	f000 fb20 	bl	8004b24 <__mcmp>
 80044e4:	2800      	cmp	r0, #0
 80044e6:	9b01      	ldr	r3, [sp, #4]
 80044e8:	dc02      	bgt.n	80044f0 <_dtoa_r+0xab8>
 80044ea:	d1de      	bne.n	80044aa <_dtoa_r+0xa72>
 80044ec:	07da      	lsls	r2, r3, #31
 80044ee:	d5dc      	bpl.n	80044aa <_dtoa_r+0xa72>
 80044f0:	2b39      	cmp	r3, #57	; 0x39
 80044f2:	d1d8      	bne.n	80044a6 <_dtoa_r+0xa6e>
 80044f4:	9a02      	ldr	r2, [sp, #8]
 80044f6:	2339      	movs	r3, #57	; 0x39
 80044f8:	7013      	strb	r3, [r2, #0]
 80044fa:	462b      	mov	r3, r5
 80044fc:	461d      	mov	r5, r3
 80044fe:	3b01      	subs	r3, #1
 8004500:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004504:	2a39      	cmp	r2, #57	; 0x39
 8004506:	d050      	beq.n	80045aa <_dtoa_r+0xb72>
 8004508:	3201      	adds	r2, #1
 800450a:	701a      	strb	r2, [r3, #0]
 800450c:	e745      	b.n	800439a <_dtoa_r+0x962>
 800450e:	2a00      	cmp	r2, #0
 8004510:	dd03      	ble.n	800451a <_dtoa_r+0xae2>
 8004512:	2b39      	cmp	r3, #57	; 0x39
 8004514:	d0ee      	beq.n	80044f4 <_dtoa_r+0xabc>
 8004516:	3301      	adds	r3, #1
 8004518:	e7c7      	b.n	80044aa <_dtoa_r+0xa72>
 800451a:	9a01      	ldr	r2, [sp, #4]
 800451c:	9907      	ldr	r1, [sp, #28]
 800451e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004522:	428a      	cmp	r2, r1
 8004524:	d02a      	beq.n	800457c <_dtoa_r+0xb44>
 8004526:	4659      	mov	r1, fp
 8004528:	2300      	movs	r3, #0
 800452a:	220a      	movs	r2, #10
 800452c:	4620      	mov	r0, r4
 800452e:	f000 f8dd 	bl	80046ec <__multadd>
 8004532:	45b8      	cmp	r8, r7
 8004534:	4683      	mov	fp, r0
 8004536:	f04f 0300 	mov.w	r3, #0
 800453a:	f04f 020a 	mov.w	r2, #10
 800453e:	4641      	mov	r1, r8
 8004540:	4620      	mov	r0, r4
 8004542:	d107      	bne.n	8004554 <_dtoa_r+0xb1c>
 8004544:	f000 f8d2 	bl	80046ec <__multadd>
 8004548:	4680      	mov	r8, r0
 800454a:	4607      	mov	r7, r0
 800454c:	9b01      	ldr	r3, [sp, #4]
 800454e:	3301      	adds	r3, #1
 8004550:	9301      	str	r3, [sp, #4]
 8004552:	e775      	b.n	8004440 <_dtoa_r+0xa08>
 8004554:	f000 f8ca 	bl	80046ec <__multadd>
 8004558:	4639      	mov	r1, r7
 800455a:	4680      	mov	r8, r0
 800455c:	2300      	movs	r3, #0
 800455e:	220a      	movs	r2, #10
 8004560:	4620      	mov	r0, r4
 8004562:	f000 f8c3 	bl	80046ec <__multadd>
 8004566:	4607      	mov	r7, r0
 8004568:	e7f0      	b.n	800454c <_dtoa_r+0xb14>
 800456a:	f1b9 0f00 	cmp.w	r9, #0
 800456e:	9a00      	ldr	r2, [sp, #0]
 8004570:	bfcc      	ite	gt
 8004572:	464d      	movgt	r5, r9
 8004574:	2501      	movle	r5, #1
 8004576:	4415      	add	r5, r2
 8004578:	f04f 0800 	mov.w	r8, #0
 800457c:	4659      	mov	r1, fp
 800457e:	2201      	movs	r2, #1
 8004580:	4620      	mov	r0, r4
 8004582:	9301      	str	r3, [sp, #4]
 8004584:	f000 fa62 	bl	8004a4c <__lshift>
 8004588:	4631      	mov	r1, r6
 800458a:	4683      	mov	fp, r0
 800458c:	f000 faca 	bl	8004b24 <__mcmp>
 8004590:	2800      	cmp	r0, #0
 8004592:	dcb2      	bgt.n	80044fa <_dtoa_r+0xac2>
 8004594:	d102      	bne.n	800459c <_dtoa_r+0xb64>
 8004596:	9b01      	ldr	r3, [sp, #4]
 8004598:	07db      	lsls	r3, r3, #31
 800459a:	d4ae      	bmi.n	80044fa <_dtoa_r+0xac2>
 800459c:	462b      	mov	r3, r5
 800459e:	461d      	mov	r5, r3
 80045a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80045a4:	2a30      	cmp	r2, #48	; 0x30
 80045a6:	d0fa      	beq.n	800459e <_dtoa_r+0xb66>
 80045a8:	e6f7      	b.n	800439a <_dtoa_r+0x962>
 80045aa:	9a00      	ldr	r2, [sp, #0]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d1a5      	bne.n	80044fc <_dtoa_r+0xac4>
 80045b0:	f10a 0a01 	add.w	sl, sl, #1
 80045b4:	2331      	movs	r3, #49	; 0x31
 80045b6:	e779      	b.n	80044ac <_dtoa_r+0xa74>
 80045b8:	4b13      	ldr	r3, [pc, #76]	; (8004608 <_dtoa_r+0xbd0>)
 80045ba:	f7ff baaf 	b.w	8003b1c <_dtoa_r+0xe4>
 80045be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f47f aa86 	bne.w	8003ad2 <_dtoa_r+0x9a>
 80045c6:	4b11      	ldr	r3, [pc, #68]	; (800460c <_dtoa_r+0xbd4>)
 80045c8:	f7ff baa8 	b.w	8003b1c <_dtoa_r+0xe4>
 80045cc:	f1b9 0f00 	cmp.w	r9, #0
 80045d0:	dc03      	bgt.n	80045da <_dtoa_r+0xba2>
 80045d2:	9b05      	ldr	r3, [sp, #20]
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	f73f aec9 	bgt.w	800436c <_dtoa_r+0x934>
 80045da:	9d00      	ldr	r5, [sp, #0]
 80045dc:	4631      	mov	r1, r6
 80045de:	4658      	mov	r0, fp
 80045e0:	f7ff f99c 	bl	800391c <quorem>
 80045e4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80045e8:	f805 3b01 	strb.w	r3, [r5], #1
 80045ec:	9a00      	ldr	r2, [sp, #0]
 80045ee:	1aaa      	subs	r2, r5, r2
 80045f0:	4591      	cmp	r9, r2
 80045f2:	ddba      	ble.n	800456a <_dtoa_r+0xb32>
 80045f4:	4659      	mov	r1, fp
 80045f6:	2300      	movs	r3, #0
 80045f8:	220a      	movs	r2, #10
 80045fa:	4620      	mov	r0, r4
 80045fc:	f000 f876 	bl	80046ec <__multadd>
 8004600:	4683      	mov	fp, r0
 8004602:	e7eb      	b.n	80045dc <_dtoa_r+0xba4>
 8004604:	08005abb 	.word	0x08005abb
 8004608:	08005a14 	.word	0x08005a14
 800460c:	08005a38 	.word	0x08005a38

08004610 <_localeconv_r>:
 8004610:	4800      	ldr	r0, [pc, #0]	; (8004614 <_localeconv_r+0x4>)
 8004612:	4770      	bx	lr
 8004614:	20000330 	.word	0x20000330

08004618 <malloc>:
 8004618:	4b02      	ldr	r3, [pc, #8]	; (8004624 <malloc+0xc>)
 800461a:	4601      	mov	r1, r0
 800461c:	6818      	ldr	r0, [r3, #0]
 800461e:	f000 bbe1 	b.w	8004de4 <_malloc_r>
 8004622:	bf00      	nop
 8004624:	200001dc 	.word	0x200001dc

08004628 <_Balloc>:
 8004628:	b570      	push	{r4, r5, r6, lr}
 800462a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800462c:	4604      	mov	r4, r0
 800462e:	460d      	mov	r5, r1
 8004630:	b976      	cbnz	r6, 8004650 <_Balloc+0x28>
 8004632:	2010      	movs	r0, #16
 8004634:	f7ff fff0 	bl	8004618 <malloc>
 8004638:	4602      	mov	r2, r0
 800463a:	6260      	str	r0, [r4, #36]	; 0x24
 800463c:	b920      	cbnz	r0, 8004648 <_Balloc+0x20>
 800463e:	4b18      	ldr	r3, [pc, #96]	; (80046a0 <_Balloc+0x78>)
 8004640:	4818      	ldr	r0, [pc, #96]	; (80046a4 <_Balloc+0x7c>)
 8004642:	2166      	movs	r1, #102	; 0x66
 8004644:	f000 fc38 	bl	8004eb8 <__assert_func>
 8004648:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800464c:	6006      	str	r6, [r0, #0]
 800464e:	60c6      	str	r6, [r0, #12]
 8004650:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004652:	68f3      	ldr	r3, [r6, #12]
 8004654:	b183      	cbz	r3, 8004678 <_Balloc+0x50>
 8004656:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800465e:	b9b8      	cbnz	r0, 8004690 <_Balloc+0x68>
 8004660:	2101      	movs	r1, #1
 8004662:	fa01 f605 	lsl.w	r6, r1, r5
 8004666:	1d72      	adds	r2, r6, #5
 8004668:	0092      	lsls	r2, r2, #2
 800466a:	4620      	mov	r0, r4
 800466c:	f000 fb5a 	bl	8004d24 <_calloc_r>
 8004670:	b160      	cbz	r0, 800468c <_Balloc+0x64>
 8004672:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004676:	e00e      	b.n	8004696 <_Balloc+0x6e>
 8004678:	2221      	movs	r2, #33	; 0x21
 800467a:	2104      	movs	r1, #4
 800467c:	4620      	mov	r0, r4
 800467e:	f000 fb51 	bl	8004d24 <_calloc_r>
 8004682:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004684:	60f0      	str	r0, [r6, #12]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1e4      	bne.n	8004656 <_Balloc+0x2e>
 800468c:	2000      	movs	r0, #0
 800468e:	bd70      	pop	{r4, r5, r6, pc}
 8004690:	6802      	ldr	r2, [r0, #0]
 8004692:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004696:	2300      	movs	r3, #0
 8004698:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800469c:	e7f7      	b.n	800468e <_Balloc+0x66>
 800469e:	bf00      	nop
 80046a0:	08005a45 	.word	0x08005a45
 80046a4:	08005acc 	.word	0x08005acc

080046a8 <_Bfree>:
 80046a8:	b570      	push	{r4, r5, r6, lr}
 80046aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80046ac:	4605      	mov	r5, r0
 80046ae:	460c      	mov	r4, r1
 80046b0:	b976      	cbnz	r6, 80046d0 <_Bfree+0x28>
 80046b2:	2010      	movs	r0, #16
 80046b4:	f7ff ffb0 	bl	8004618 <malloc>
 80046b8:	4602      	mov	r2, r0
 80046ba:	6268      	str	r0, [r5, #36]	; 0x24
 80046bc:	b920      	cbnz	r0, 80046c8 <_Bfree+0x20>
 80046be:	4b09      	ldr	r3, [pc, #36]	; (80046e4 <_Bfree+0x3c>)
 80046c0:	4809      	ldr	r0, [pc, #36]	; (80046e8 <_Bfree+0x40>)
 80046c2:	218a      	movs	r1, #138	; 0x8a
 80046c4:	f000 fbf8 	bl	8004eb8 <__assert_func>
 80046c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80046cc:	6006      	str	r6, [r0, #0]
 80046ce:	60c6      	str	r6, [r0, #12]
 80046d0:	b13c      	cbz	r4, 80046e2 <_Bfree+0x3a>
 80046d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80046d4:	6862      	ldr	r2, [r4, #4]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80046dc:	6021      	str	r1, [r4, #0]
 80046de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80046e2:	bd70      	pop	{r4, r5, r6, pc}
 80046e4:	08005a45 	.word	0x08005a45
 80046e8:	08005acc 	.word	0x08005acc

080046ec <__multadd>:
 80046ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046f0:	690e      	ldr	r6, [r1, #16]
 80046f2:	4607      	mov	r7, r0
 80046f4:	4698      	mov	r8, r3
 80046f6:	460c      	mov	r4, r1
 80046f8:	f101 0014 	add.w	r0, r1, #20
 80046fc:	2300      	movs	r3, #0
 80046fe:	6805      	ldr	r5, [r0, #0]
 8004700:	b2a9      	uxth	r1, r5
 8004702:	fb02 8101 	mla	r1, r2, r1, r8
 8004706:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800470a:	0c2d      	lsrs	r5, r5, #16
 800470c:	fb02 c505 	mla	r5, r2, r5, ip
 8004710:	b289      	uxth	r1, r1
 8004712:	3301      	adds	r3, #1
 8004714:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8004718:	429e      	cmp	r6, r3
 800471a:	f840 1b04 	str.w	r1, [r0], #4
 800471e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8004722:	dcec      	bgt.n	80046fe <__multadd+0x12>
 8004724:	f1b8 0f00 	cmp.w	r8, #0
 8004728:	d022      	beq.n	8004770 <__multadd+0x84>
 800472a:	68a3      	ldr	r3, [r4, #8]
 800472c:	42b3      	cmp	r3, r6
 800472e:	dc19      	bgt.n	8004764 <__multadd+0x78>
 8004730:	6861      	ldr	r1, [r4, #4]
 8004732:	4638      	mov	r0, r7
 8004734:	3101      	adds	r1, #1
 8004736:	f7ff ff77 	bl	8004628 <_Balloc>
 800473a:	4605      	mov	r5, r0
 800473c:	b928      	cbnz	r0, 800474a <__multadd+0x5e>
 800473e:	4602      	mov	r2, r0
 8004740:	4b0d      	ldr	r3, [pc, #52]	; (8004778 <__multadd+0x8c>)
 8004742:	480e      	ldr	r0, [pc, #56]	; (800477c <__multadd+0x90>)
 8004744:	21b5      	movs	r1, #181	; 0xb5
 8004746:	f000 fbb7 	bl	8004eb8 <__assert_func>
 800474a:	6922      	ldr	r2, [r4, #16]
 800474c:	3202      	adds	r2, #2
 800474e:	f104 010c 	add.w	r1, r4, #12
 8004752:	0092      	lsls	r2, r2, #2
 8004754:	300c      	adds	r0, #12
 8004756:	f7fe fc61 	bl	800301c <memcpy>
 800475a:	4621      	mov	r1, r4
 800475c:	4638      	mov	r0, r7
 800475e:	f7ff ffa3 	bl	80046a8 <_Bfree>
 8004762:	462c      	mov	r4, r5
 8004764:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8004768:	3601      	adds	r6, #1
 800476a:	f8c3 8014 	str.w	r8, [r3, #20]
 800476e:	6126      	str	r6, [r4, #16]
 8004770:	4620      	mov	r0, r4
 8004772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004776:	bf00      	nop
 8004778:	08005abb 	.word	0x08005abb
 800477c:	08005acc 	.word	0x08005acc

08004780 <__hi0bits>:
 8004780:	0c03      	lsrs	r3, r0, #16
 8004782:	041b      	lsls	r3, r3, #16
 8004784:	b9d3      	cbnz	r3, 80047bc <__hi0bits+0x3c>
 8004786:	0400      	lsls	r0, r0, #16
 8004788:	2310      	movs	r3, #16
 800478a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800478e:	bf04      	itt	eq
 8004790:	0200      	lsleq	r0, r0, #8
 8004792:	3308      	addeq	r3, #8
 8004794:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004798:	bf04      	itt	eq
 800479a:	0100      	lsleq	r0, r0, #4
 800479c:	3304      	addeq	r3, #4
 800479e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80047a2:	bf04      	itt	eq
 80047a4:	0080      	lsleq	r0, r0, #2
 80047a6:	3302      	addeq	r3, #2
 80047a8:	2800      	cmp	r0, #0
 80047aa:	db05      	blt.n	80047b8 <__hi0bits+0x38>
 80047ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80047b0:	f103 0301 	add.w	r3, r3, #1
 80047b4:	bf08      	it	eq
 80047b6:	2320      	moveq	r3, #32
 80047b8:	4618      	mov	r0, r3
 80047ba:	4770      	bx	lr
 80047bc:	2300      	movs	r3, #0
 80047be:	e7e4      	b.n	800478a <__hi0bits+0xa>

080047c0 <__lo0bits>:
 80047c0:	6803      	ldr	r3, [r0, #0]
 80047c2:	f013 0207 	ands.w	r2, r3, #7
 80047c6:	4601      	mov	r1, r0
 80047c8:	d00b      	beq.n	80047e2 <__lo0bits+0x22>
 80047ca:	07da      	lsls	r2, r3, #31
 80047cc:	d424      	bmi.n	8004818 <__lo0bits+0x58>
 80047ce:	0798      	lsls	r0, r3, #30
 80047d0:	bf49      	itett	mi
 80047d2:	085b      	lsrmi	r3, r3, #1
 80047d4:	089b      	lsrpl	r3, r3, #2
 80047d6:	2001      	movmi	r0, #1
 80047d8:	600b      	strmi	r3, [r1, #0]
 80047da:	bf5c      	itt	pl
 80047dc:	600b      	strpl	r3, [r1, #0]
 80047de:	2002      	movpl	r0, #2
 80047e0:	4770      	bx	lr
 80047e2:	b298      	uxth	r0, r3
 80047e4:	b9b0      	cbnz	r0, 8004814 <__lo0bits+0x54>
 80047e6:	0c1b      	lsrs	r3, r3, #16
 80047e8:	2010      	movs	r0, #16
 80047ea:	f013 0fff 	tst.w	r3, #255	; 0xff
 80047ee:	bf04      	itt	eq
 80047f0:	0a1b      	lsreq	r3, r3, #8
 80047f2:	3008      	addeq	r0, #8
 80047f4:	071a      	lsls	r2, r3, #28
 80047f6:	bf04      	itt	eq
 80047f8:	091b      	lsreq	r3, r3, #4
 80047fa:	3004      	addeq	r0, #4
 80047fc:	079a      	lsls	r2, r3, #30
 80047fe:	bf04      	itt	eq
 8004800:	089b      	lsreq	r3, r3, #2
 8004802:	3002      	addeq	r0, #2
 8004804:	07da      	lsls	r2, r3, #31
 8004806:	d403      	bmi.n	8004810 <__lo0bits+0x50>
 8004808:	085b      	lsrs	r3, r3, #1
 800480a:	f100 0001 	add.w	r0, r0, #1
 800480e:	d005      	beq.n	800481c <__lo0bits+0x5c>
 8004810:	600b      	str	r3, [r1, #0]
 8004812:	4770      	bx	lr
 8004814:	4610      	mov	r0, r2
 8004816:	e7e8      	b.n	80047ea <__lo0bits+0x2a>
 8004818:	2000      	movs	r0, #0
 800481a:	4770      	bx	lr
 800481c:	2020      	movs	r0, #32
 800481e:	4770      	bx	lr

08004820 <__i2b>:
 8004820:	b510      	push	{r4, lr}
 8004822:	460c      	mov	r4, r1
 8004824:	2101      	movs	r1, #1
 8004826:	f7ff feff 	bl	8004628 <_Balloc>
 800482a:	4602      	mov	r2, r0
 800482c:	b928      	cbnz	r0, 800483a <__i2b+0x1a>
 800482e:	4b05      	ldr	r3, [pc, #20]	; (8004844 <__i2b+0x24>)
 8004830:	4805      	ldr	r0, [pc, #20]	; (8004848 <__i2b+0x28>)
 8004832:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004836:	f000 fb3f 	bl	8004eb8 <__assert_func>
 800483a:	2301      	movs	r3, #1
 800483c:	6144      	str	r4, [r0, #20]
 800483e:	6103      	str	r3, [r0, #16]
 8004840:	bd10      	pop	{r4, pc}
 8004842:	bf00      	nop
 8004844:	08005abb 	.word	0x08005abb
 8004848:	08005acc 	.word	0x08005acc

0800484c <__multiply>:
 800484c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004850:	4614      	mov	r4, r2
 8004852:	690a      	ldr	r2, [r1, #16]
 8004854:	6923      	ldr	r3, [r4, #16]
 8004856:	429a      	cmp	r2, r3
 8004858:	bfb8      	it	lt
 800485a:	460b      	movlt	r3, r1
 800485c:	460d      	mov	r5, r1
 800485e:	bfbc      	itt	lt
 8004860:	4625      	movlt	r5, r4
 8004862:	461c      	movlt	r4, r3
 8004864:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8004868:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800486c:	68ab      	ldr	r3, [r5, #8]
 800486e:	6869      	ldr	r1, [r5, #4]
 8004870:	eb0a 0709 	add.w	r7, sl, r9
 8004874:	42bb      	cmp	r3, r7
 8004876:	b085      	sub	sp, #20
 8004878:	bfb8      	it	lt
 800487a:	3101      	addlt	r1, #1
 800487c:	f7ff fed4 	bl	8004628 <_Balloc>
 8004880:	b930      	cbnz	r0, 8004890 <__multiply+0x44>
 8004882:	4602      	mov	r2, r0
 8004884:	4b42      	ldr	r3, [pc, #264]	; (8004990 <__multiply+0x144>)
 8004886:	4843      	ldr	r0, [pc, #268]	; (8004994 <__multiply+0x148>)
 8004888:	f240 115d 	movw	r1, #349	; 0x15d
 800488c:	f000 fb14 	bl	8004eb8 <__assert_func>
 8004890:	f100 0614 	add.w	r6, r0, #20
 8004894:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8004898:	4633      	mov	r3, r6
 800489a:	2200      	movs	r2, #0
 800489c:	4543      	cmp	r3, r8
 800489e:	d31e      	bcc.n	80048de <__multiply+0x92>
 80048a0:	f105 0c14 	add.w	ip, r5, #20
 80048a4:	f104 0314 	add.w	r3, r4, #20
 80048a8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80048ac:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80048b0:	9202      	str	r2, [sp, #8]
 80048b2:	ebac 0205 	sub.w	r2, ip, r5
 80048b6:	3a15      	subs	r2, #21
 80048b8:	f022 0203 	bic.w	r2, r2, #3
 80048bc:	3204      	adds	r2, #4
 80048be:	f105 0115 	add.w	r1, r5, #21
 80048c2:	458c      	cmp	ip, r1
 80048c4:	bf38      	it	cc
 80048c6:	2204      	movcc	r2, #4
 80048c8:	9201      	str	r2, [sp, #4]
 80048ca:	9a02      	ldr	r2, [sp, #8]
 80048cc:	9303      	str	r3, [sp, #12]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d808      	bhi.n	80048e4 <__multiply+0x98>
 80048d2:	2f00      	cmp	r7, #0
 80048d4:	dc55      	bgt.n	8004982 <__multiply+0x136>
 80048d6:	6107      	str	r7, [r0, #16]
 80048d8:	b005      	add	sp, #20
 80048da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048de:	f843 2b04 	str.w	r2, [r3], #4
 80048e2:	e7db      	b.n	800489c <__multiply+0x50>
 80048e4:	f8b3 a000 	ldrh.w	sl, [r3]
 80048e8:	f1ba 0f00 	cmp.w	sl, #0
 80048ec:	d020      	beq.n	8004930 <__multiply+0xe4>
 80048ee:	f105 0e14 	add.w	lr, r5, #20
 80048f2:	46b1      	mov	r9, r6
 80048f4:	2200      	movs	r2, #0
 80048f6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80048fa:	f8d9 b000 	ldr.w	fp, [r9]
 80048fe:	b2a1      	uxth	r1, r4
 8004900:	fa1f fb8b 	uxth.w	fp, fp
 8004904:	fb0a b101 	mla	r1, sl, r1, fp
 8004908:	4411      	add	r1, r2
 800490a:	f8d9 2000 	ldr.w	r2, [r9]
 800490e:	0c24      	lsrs	r4, r4, #16
 8004910:	0c12      	lsrs	r2, r2, #16
 8004912:	fb0a 2404 	mla	r4, sl, r4, r2
 8004916:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800491a:	b289      	uxth	r1, r1
 800491c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004920:	45f4      	cmp	ip, lr
 8004922:	f849 1b04 	str.w	r1, [r9], #4
 8004926:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800492a:	d8e4      	bhi.n	80048f6 <__multiply+0xaa>
 800492c:	9901      	ldr	r1, [sp, #4]
 800492e:	5072      	str	r2, [r6, r1]
 8004930:	9a03      	ldr	r2, [sp, #12]
 8004932:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004936:	3304      	adds	r3, #4
 8004938:	f1b9 0f00 	cmp.w	r9, #0
 800493c:	d01f      	beq.n	800497e <__multiply+0x132>
 800493e:	6834      	ldr	r4, [r6, #0]
 8004940:	f105 0114 	add.w	r1, r5, #20
 8004944:	46b6      	mov	lr, r6
 8004946:	f04f 0a00 	mov.w	sl, #0
 800494a:	880a      	ldrh	r2, [r1, #0]
 800494c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004950:	fb09 b202 	mla	r2, r9, r2, fp
 8004954:	4492      	add	sl, r2
 8004956:	b2a4      	uxth	r4, r4
 8004958:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800495c:	f84e 4b04 	str.w	r4, [lr], #4
 8004960:	f851 4b04 	ldr.w	r4, [r1], #4
 8004964:	f8be 2000 	ldrh.w	r2, [lr]
 8004968:	0c24      	lsrs	r4, r4, #16
 800496a:	fb09 2404 	mla	r4, r9, r4, r2
 800496e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8004972:	458c      	cmp	ip, r1
 8004974:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004978:	d8e7      	bhi.n	800494a <__multiply+0xfe>
 800497a:	9a01      	ldr	r2, [sp, #4]
 800497c:	50b4      	str	r4, [r6, r2]
 800497e:	3604      	adds	r6, #4
 8004980:	e7a3      	b.n	80048ca <__multiply+0x7e>
 8004982:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1a5      	bne.n	80048d6 <__multiply+0x8a>
 800498a:	3f01      	subs	r7, #1
 800498c:	e7a1      	b.n	80048d2 <__multiply+0x86>
 800498e:	bf00      	nop
 8004990:	08005abb 	.word	0x08005abb
 8004994:	08005acc 	.word	0x08005acc

08004998 <__pow5mult>:
 8004998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800499c:	4615      	mov	r5, r2
 800499e:	f012 0203 	ands.w	r2, r2, #3
 80049a2:	4606      	mov	r6, r0
 80049a4:	460f      	mov	r7, r1
 80049a6:	d007      	beq.n	80049b8 <__pow5mult+0x20>
 80049a8:	4c25      	ldr	r4, [pc, #148]	; (8004a40 <__pow5mult+0xa8>)
 80049aa:	3a01      	subs	r2, #1
 80049ac:	2300      	movs	r3, #0
 80049ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80049b2:	f7ff fe9b 	bl	80046ec <__multadd>
 80049b6:	4607      	mov	r7, r0
 80049b8:	10ad      	asrs	r5, r5, #2
 80049ba:	d03d      	beq.n	8004a38 <__pow5mult+0xa0>
 80049bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80049be:	b97c      	cbnz	r4, 80049e0 <__pow5mult+0x48>
 80049c0:	2010      	movs	r0, #16
 80049c2:	f7ff fe29 	bl	8004618 <malloc>
 80049c6:	4602      	mov	r2, r0
 80049c8:	6270      	str	r0, [r6, #36]	; 0x24
 80049ca:	b928      	cbnz	r0, 80049d8 <__pow5mult+0x40>
 80049cc:	4b1d      	ldr	r3, [pc, #116]	; (8004a44 <__pow5mult+0xac>)
 80049ce:	481e      	ldr	r0, [pc, #120]	; (8004a48 <__pow5mult+0xb0>)
 80049d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80049d4:	f000 fa70 	bl	8004eb8 <__assert_func>
 80049d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80049dc:	6004      	str	r4, [r0, #0]
 80049de:	60c4      	str	r4, [r0, #12]
 80049e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80049e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80049e8:	b94c      	cbnz	r4, 80049fe <__pow5mult+0x66>
 80049ea:	f240 2171 	movw	r1, #625	; 0x271
 80049ee:	4630      	mov	r0, r6
 80049f0:	f7ff ff16 	bl	8004820 <__i2b>
 80049f4:	2300      	movs	r3, #0
 80049f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80049fa:	4604      	mov	r4, r0
 80049fc:	6003      	str	r3, [r0, #0]
 80049fe:	f04f 0900 	mov.w	r9, #0
 8004a02:	07eb      	lsls	r3, r5, #31
 8004a04:	d50a      	bpl.n	8004a1c <__pow5mult+0x84>
 8004a06:	4639      	mov	r1, r7
 8004a08:	4622      	mov	r2, r4
 8004a0a:	4630      	mov	r0, r6
 8004a0c:	f7ff ff1e 	bl	800484c <__multiply>
 8004a10:	4639      	mov	r1, r7
 8004a12:	4680      	mov	r8, r0
 8004a14:	4630      	mov	r0, r6
 8004a16:	f7ff fe47 	bl	80046a8 <_Bfree>
 8004a1a:	4647      	mov	r7, r8
 8004a1c:	106d      	asrs	r5, r5, #1
 8004a1e:	d00b      	beq.n	8004a38 <__pow5mult+0xa0>
 8004a20:	6820      	ldr	r0, [r4, #0]
 8004a22:	b938      	cbnz	r0, 8004a34 <__pow5mult+0x9c>
 8004a24:	4622      	mov	r2, r4
 8004a26:	4621      	mov	r1, r4
 8004a28:	4630      	mov	r0, r6
 8004a2a:	f7ff ff0f 	bl	800484c <__multiply>
 8004a2e:	6020      	str	r0, [r4, #0]
 8004a30:	f8c0 9000 	str.w	r9, [r0]
 8004a34:	4604      	mov	r4, r0
 8004a36:	e7e4      	b.n	8004a02 <__pow5mult+0x6a>
 8004a38:	4638      	mov	r0, r7
 8004a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a3e:	bf00      	nop
 8004a40:	08005c20 	.word	0x08005c20
 8004a44:	08005a45 	.word	0x08005a45
 8004a48:	08005acc 	.word	0x08005acc

08004a4c <__lshift>:
 8004a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a50:	460c      	mov	r4, r1
 8004a52:	6849      	ldr	r1, [r1, #4]
 8004a54:	6923      	ldr	r3, [r4, #16]
 8004a56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004a5a:	68a3      	ldr	r3, [r4, #8]
 8004a5c:	4607      	mov	r7, r0
 8004a5e:	4691      	mov	r9, r2
 8004a60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004a64:	f108 0601 	add.w	r6, r8, #1
 8004a68:	42b3      	cmp	r3, r6
 8004a6a:	db0b      	blt.n	8004a84 <__lshift+0x38>
 8004a6c:	4638      	mov	r0, r7
 8004a6e:	f7ff fddb 	bl	8004628 <_Balloc>
 8004a72:	4605      	mov	r5, r0
 8004a74:	b948      	cbnz	r0, 8004a8a <__lshift+0x3e>
 8004a76:	4602      	mov	r2, r0
 8004a78:	4b28      	ldr	r3, [pc, #160]	; (8004b1c <__lshift+0xd0>)
 8004a7a:	4829      	ldr	r0, [pc, #164]	; (8004b20 <__lshift+0xd4>)
 8004a7c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004a80:	f000 fa1a 	bl	8004eb8 <__assert_func>
 8004a84:	3101      	adds	r1, #1
 8004a86:	005b      	lsls	r3, r3, #1
 8004a88:	e7ee      	b.n	8004a68 <__lshift+0x1c>
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	f100 0114 	add.w	r1, r0, #20
 8004a90:	f100 0210 	add.w	r2, r0, #16
 8004a94:	4618      	mov	r0, r3
 8004a96:	4553      	cmp	r3, sl
 8004a98:	db33      	blt.n	8004b02 <__lshift+0xb6>
 8004a9a:	6920      	ldr	r0, [r4, #16]
 8004a9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004aa0:	f104 0314 	add.w	r3, r4, #20
 8004aa4:	f019 091f 	ands.w	r9, r9, #31
 8004aa8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004aac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004ab0:	d02b      	beq.n	8004b0a <__lshift+0xbe>
 8004ab2:	f1c9 0e20 	rsb	lr, r9, #32
 8004ab6:	468a      	mov	sl, r1
 8004ab8:	2200      	movs	r2, #0
 8004aba:	6818      	ldr	r0, [r3, #0]
 8004abc:	fa00 f009 	lsl.w	r0, r0, r9
 8004ac0:	4302      	orrs	r2, r0
 8004ac2:	f84a 2b04 	str.w	r2, [sl], #4
 8004ac6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004aca:	459c      	cmp	ip, r3
 8004acc:	fa22 f20e 	lsr.w	r2, r2, lr
 8004ad0:	d8f3      	bhi.n	8004aba <__lshift+0x6e>
 8004ad2:	ebac 0304 	sub.w	r3, ip, r4
 8004ad6:	3b15      	subs	r3, #21
 8004ad8:	f023 0303 	bic.w	r3, r3, #3
 8004adc:	3304      	adds	r3, #4
 8004ade:	f104 0015 	add.w	r0, r4, #21
 8004ae2:	4584      	cmp	ip, r0
 8004ae4:	bf38      	it	cc
 8004ae6:	2304      	movcc	r3, #4
 8004ae8:	50ca      	str	r2, [r1, r3]
 8004aea:	b10a      	cbz	r2, 8004af0 <__lshift+0xa4>
 8004aec:	f108 0602 	add.w	r6, r8, #2
 8004af0:	3e01      	subs	r6, #1
 8004af2:	4638      	mov	r0, r7
 8004af4:	612e      	str	r6, [r5, #16]
 8004af6:	4621      	mov	r1, r4
 8004af8:	f7ff fdd6 	bl	80046a8 <_Bfree>
 8004afc:	4628      	mov	r0, r5
 8004afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b02:	f842 0f04 	str.w	r0, [r2, #4]!
 8004b06:	3301      	adds	r3, #1
 8004b08:	e7c5      	b.n	8004a96 <__lshift+0x4a>
 8004b0a:	3904      	subs	r1, #4
 8004b0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b10:	f841 2f04 	str.w	r2, [r1, #4]!
 8004b14:	459c      	cmp	ip, r3
 8004b16:	d8f9      	bhi.n	8004b0c <__lshift+0xc0>
 8004b18:	e7ea      	b.n	8004af0 <__lshift+0xa4>
 8004b1a:	bf00      	nop
 8004b1c:	08005abb 	.word	0x08005abb
 8004b20:	08005acc 	.word	0x08005acc

08004b24 <__mcmp>:
 8004b24:	b530      	push	{r4, r5, lr}
 8004b26:	6902      	ldr	r2, [r0, #16]
 8004b28:	690c      	ldr	r4, [r1, #16]
 8004b2a:	1b12      	subs	r2, r2, r4
 8004b2c:	d10e      	bne.n	8004b4c <__mcmp+0x28>
 8004b2e:	f100 0314 	add.w	r3, r0, #20
 8004b32:	3114      	adds	r1, #20
 8004b34:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004b38:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004b3c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004b40:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004b44:	42a5      	cmp	r5, r4
 8004b46:	d003      	beq.n	8004b50 <__mcmp+0x2c>
 8004b48:	d305      	bcc.n	8004b56 <__mcmp+0x32>
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	4610      	mov	r0, r2
 8004b4e:	bd30      	pop	{r4, r5, pc}
 8004b50:	4283      	cmp	r3, r0
 8004b52:	d3f3      	bcc.n	8004b3c <__mcmp+0x18>
 8004b54:	e7fa      	b.n	8004b4c <__mcmp+0x28>
 8004b56:	f04f 32ff 	mov.w	r2, #4294967295
 8004b5a:	e7f7      	b.n	8004b4c <__mcmp+0x28>

08004b5c <__mdiff>:
 8004b5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b60:	460c      	mov	r4, r1
 8004b62:	4606      	mov	r6, r0
 8004b64:	4611      	mov	r1, r2
 8004b66:	4620      	mov	r0, r4
 8004b68:	4617      	mov	r7, r2
 8004b6a:	f7ff ffdb 	bl	8004b24 <__mcmp>
 8004b6e:	1e05      	subs	r5, r0, #0
 8004b70:	d110      	bne.n	8004b94 <__mdiff+0x38>
 8004b72:	4629      	mov	r1, r5
 8004b74:	4630      	mov	r0, r6
 8004b76:	f7ff fd57 	bl	8004628 <_Balloc>
 8004b7a:	b930      	cbnz	r0, 8004b8a <__mdiff+0x2e>
 8004b7c:	4b39      	ldr	r3, [pc, #228]	; (8004c64 <__mdiff+0x108>)
 8004b7e:	4602      	mov	r2, r0
 8004b80:	f240 2132 	movw	r1, #562	; 0x232
 8004b84:	4838      	ldr	r0, [pc, #224]	; (8004c68 <__mdiff+0x10c>)
 8004b86:	f000 f997 	bl	8004eb8 <__assert_func>
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004b90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b94:	bfa4      	itt	ge
 8004b96:	463b      	movge	r3, r7
 8004b98:	4627      	movge	r7, r4
 8004b9a:	4630      	mov	r0, r6
 8004b9c:	6879      	ldr	r1, [r7, #4]
 8004b9e:	bfa6      	itte	ge
 8004ba0:	461c      	movge	r4, r3
 8004ba2:	2500      	movge	r5, #0
 8004ba4:	2501      	movlt	r5, #1
 8004ba6:	f7ff fd3f 	bl	8004628 <_Balloc>
 8004baa:	b920      	cbnz	r0, 8004bb6 <__mdiff+0x5a>
 8004bac:	4b2d      	ldr	r3, [pc, #180]	; (8004c64 <__mdiff+0x108>)
 8004bae:	4602      	mov	r2, r0
 8004bb0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004bb4:	e7e6      	b.n	8004b84 <__mdiff+0x28>
 8004bb6:	693e      	ldr	r6, [r7, #16]
 8004bb8:	60c5      	str	r5, [r0, #12]
 8004bba:	6925      	ldr	r5, [r4, #16]
 8004bbc:	f107 0114 	add.w	r1, r7, #20
 8004bc0:	f104 0914 	add.w	r9, r4, #20
 8004bc4:	f100 0e14 	add.w	lr, r0, #20
 8004bc8:	f107 0210 	add.w	r2, r7, #16
 8004bcc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8004bd0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8004bd4:	46f2      	mov	sl, lr
 8004bd6:	2700      	movs	r7, #0
 8004bd8:	f859 3b04 	ldr.w	r3, [r9], #4
 8004bdc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004be0:	fa1f f883 	uxth.w	r8, r3
 8004be4:	fa17 f78b 	uxtah	r7, r7, fp
 8004be8:	0c1b      	lsrs	r3, r3, #16
 8004bea:	eba7 0808 	sub.w	r8, r7, r8
 8004bee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004bf2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8004bf6:	fa1f f888 	uxth.w	r8, r8
 8004bfa:	141f      	asrs	r7, r3, #16
 8004bfc:	454d      	cmp	r5, r9
 8004bfe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8004c02:	f84a 3b04 	str.w	r3, [sl], #4
 8004c06:	d8e7      	bhi.n	8004bd8 <__mdiff+0x7c>
 8004c08:	1b2b      	subs	r3, r5, r4
 8004c0a:	3b15      	subs	r3, #21
 8004c0c:	f023 0303 	bic.w	r3, r3, #3
 8004c10:	3304      	adds	r3, #4
 8004c12:	3415      	adds	r4, #21
 8004c14:	42a5      	cmp	r5, r4
 8004c16:	bf38      	it	cc
 8004c18:	2304      	movcc	r3, #4
 8004c1a:	4419      	add	r1, r3
 8004c1c:	4473      	add	r3, lr
 8004c1e:	469e      	mov	lr, r3
 8004c20:	460d      	mov	r5, r1
 8004c22:	4565      	cmp	r5, ip
 8004c24:	d30e      	bcc.n	8004c44 <__mdiff+0xe8>
 8004c26:	f10c 0203 	add.w	r2, ip, #3
 8004c2a:	1a52      	subs	r2, r2, r1
 8004c2c:	f022 0203 	bic.w	r2, r2, #3
 8004c30:	3903      	subs	r1, #3
 8004c32:	458c      	cmp	ip, r1
 8004c34:	bf38      	it	cc
 8004c36:	2200      	movcc	r2, #0
 8004c38:	441a      	add	r2, r3
 8004c3a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8004c3e:	b17b      	cbz	r3, 8004c60 <__mdiff+0x104>
 8004c40:	6106      	str	r6, [r0, #16]
 8004c42:	e7a5      	b.n	8004b90 <__mdiff+0x34>
 8004c44:	f855 8b04 	ldr.w	r8, [r5], #4
 8004c48:	fa17 f488 	uxtah	r4, r7, r8
 8004c4c:	1422      	asrs	r2, r4, #16
 8004c4e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8004c52:	b2a4      	uxth	r4, r4
 8004c54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004c58:	f84e 4b04 	str.w	r4, [lr], #4
 8004c5c:	1417      	asrs	r7, r2, #16
 8004c5e:	e7e0      	b.n	8004c22 <__mdiff+0xc6>
 8004c60:	3e01      	subs	r6, #1
 8004c62:	e7ea      	b.n	8004c3a <__mdiff+0xde>
 8004c64:	08005abb 	.word	0x08005abb
 8004c68:	08005acc 	.word	0x08005acc

08004c6c <__d2b>:
 8004c6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004c70:	4689      	mov	r9, r1
 8004c72:	2101      	movs	r1, #1
 8004c74:	ec57 6b10 	vmov	r6, r7, d0
 8004c78:	4690      	mov	r8, r2
 8004c7a:	f7ff fcd5 	bl	8004628 <_Balloc>
 8004c7e:	4604      	mov	r4, r0
 8004c80:	b930      	cbnz	r0, 8004c90 <__d2b+0x24>
 8004c82:	4602      	mov	r2, r0
 8004c84:	4b25      	ldr	r3, [pc, #148]	; (8004d1c <__d2b+0xb0>)
 8004c86:	4826      	ldr	r0, [pc, #152]	; (8004d20 <__d2b+0xb4>)
 8004c88:	f240 310a 	movw	r1, #778	; 0x30a
 8004c8c:	f000 f914 	bl	8004eb8 <__assert_func>
 8004c90:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8004c94:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004c98:	bb35      	cbnz	r5, 8004ce8 <__d2b+0x7c>
 8004c9a:	2e00      	cmp	r6, #0
 8004c9c:	9301      	str	r3, [sp, #4]
 8004c9e:	d028      	beq.n	8004cf2 <__d2b+0x86>
 8004ca0:	4668      	mov	r0, sp
 8004ca2:	9600      	str	r6, [sp, #0]
 8004ca4:	f7ff fd8c 	bl	80047c0 <__lo0bits>
 8004ca8:	9900      	ldr	r1, [sp, #0]
 8004caa:	b300      	cbz	r0, 8004cee <__d2b+0x82>
 8004cac:	9a01      	ldr	r2, [sp, #4]
 8004cae:	f1c0 0320 	rsb	r3, r0, #32
 8004cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb6:	430b      	orrs	r3, r1
 8004cb8:	40c2      	lsrs	r2, r0
 8004cba:	6163      	str	r3, [r4, #20]
 8004cbc:	9201      	str	r2, [sp, #4]
 8004cbe:	9b01      	ldr	r3, [sp, #4]
 8004cc0:	61a3      	str	r3, [r4, #24]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	bf14      	ite	ne
 8004cc6:	2202      	movne	r2, #2
 8004cc8:	2201      	moveq	r2, #1
 8004cca:	6122      	str	r2, [r4, #16]
 8004ccc:	b1d5      	cbz	r5, 8004d04 <__d2b+0x98>
 8004cce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004cd2:	4405      	add	r5, r0
 8004cd4:	f8c9 5000 	str.w	r5, [r9]
 8004cd8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004cdc:	f8c8 0000 	str.w	r0, [r8]
 8004ce0:	4620      	mov	r0, r4
 8004ce2:	b003      	add	sp, #12
 8004ce4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ce8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cec:	e7d5      	b.n	8004c9a <__d2b+0x2e>
 8004cee:	6161      	str	r1, [r4, #20]
 8004cf0:	e7e5      	b.n	8004cbe <__d2b+0x52>
 8004cf2:	a801      	add	r0, sp, #4
 8004cf4:	f7ff fd64 	bl	80047c0 <__lo0bits>
 8004cf8:	9b01      	ldr	r3, [sp, #4]
 8004cfa:	6163      	str	r3, [r4, #20]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	6122      	str	r2, [r4, #16]
 8004d00:	3020      	adds	r0, #32
 8004d02:	e7e3      	b.n	8004ccc <__d2b+0x60>
 8004d04:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004d08:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004d0c:	f8c9 0000 	str.w	r0, [r9]
 8004d10:	6918      	ldr	r0, [r3, #16]
 8004d12:	f7ff fd35 	bl	8004780 <__hi0bits>
 8004d16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004d1a:	e7df      	b.n	8004cdc <__d2b+0x70>
 8004d1c:	08005abb 	.word	0x08005abb
 8004d20:	08005acc 	.word	0x08005acc

08004d24 <_calloc_r>:
 8004d24:	b513      	push	{r0, r1, r4, lr}
 8004d26:	434a      	muls	r2, r1
 8004d28:	4611      	mov	r1, r2
 8004d2a:	9201      	str	r2, [sp, #4]
 8004d2c:	f000 f85a 	bl	8004de4 <_malloc_r>
 8004d30:	4604      	mov	r4, r0
 8004d32:	b118      	cbz	r0, 8004d3c <_calloc_r+0x18>
 8004d34:	9a01      	ldr	r2, [sp, #4]
 8004d36:	2100      	movs	r1, #0
 8004d38:	f7fe f97e 	bl	8003038 <memset>
 8004d3c:	4620      	mov	r0, r4
 8004d3e:	b002      	add	sp, #8
 8004d40:	bd10      	pop	{r4, pc}
	...

08004d44 <_free_r>:
 8004d44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d46:	2900      	cmp	r1, #0
 8004d48:	d048      	beq.n	8004ddc <_free_r+0x98>
 8004d4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d4e:	9001      	str	r0, [sp, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f1a1 0404 	sub.w	r4, r1, #4
 8004d56:	bfb8      	it	lt
 8004d58:	18e4      	addlt	r4, r4, r3
 8004d5a:	f000 f8ef 	bl	8004f3c <__malloc_lock>
 8004d5e:	4a20      	ldr	r2, [pc, #128]	; (8004de0 <_free_r+0x9c>)
 8004d60:	9801      	ldr	r0, [sp, #4]
 8004d62:	6813      	ldr	r3, [r2, #0]
 8004d64:	4615      	mov	r5, r2
 8004d66:	b933      	cbnz	r3, 8004d76 <_free_r+0x32>
 8004d68:	6063      	str	r3, [r4, #4]
 8004d6a:	6014      	str	r4, [r2, #0]
 8004d6c:	b003      	add	sp, #12
 8004d6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d72:	f000 b8e9 	b.w	8004f48 <__malloc_unlock>
 8004d76:	42a3      	cmp	r3, r4
 8004d78:	d90b      	bls.n	8004d92 <_free_r+0x4e>
 8004d7a:	6821      	ldr	r1, [r4, #0]
 8004d7c:	1862      	adds	r2, r4, r1
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	bf04      	itt	eq
 8004d82:	681a      	ldreq	r2, [r3, #0]
 8004d84:	685b      	ldreq	r3, [r3, #4]
 8004d86:	6063      	str	r3, [r4, #4]
 8004d88:	bf04      	itt	eq
 8004d8a:	1852      	addeq	r2, r2, r1
 8004d8c:	6022      	streq	r2, [r4, #0]
 8004d8e:	602c      	str	r4, [r5, #0]
 8004d90:	e7ec      	b.n	8004d6c <_free_r+0x28>
 8004d92:	461a      	mov	r2, r3
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	b10b      	cbz	r3, 8004d9c <_free_r+0x58>
 8004d98:	42a3      	cmp	r3, r4
 8004d9a:	d9fa      	bls.n	8004d92 <_free_r+0x4e>
 8004d9c:	6811      	ldr	r1, [r2, #0]
 8004d9e:	1855      	adds	r5, r2, r1
 8004da0:	42a5      	cmp	r5, r4
 8004da2:	d10b      	bne.n	8004dbc <_free_r+0x78>
 8004da4:	6824      	ldr	r4, [r4, #0]
 8004da6:	4421      	add	r1, r4
 8004da8:	1854      	adds	r4, r2, r1
 8004daa:	42a3      	cmp	r3, r4
 8004dac:	6011      	str	r1, [r2, #0]
 8004dae:	d1dd      	bne.n	8004d6c <_free_r+0x28>
 8004db0:	681c      	ldr	r4, [r3, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	6053      	str	r3, [r2, #4]
 8004db6:	4421      	add	r1, r4
 8004db8:	6011      	str	r1, [r2, #0]
 8004dba:	e7d7      	b.n	8004d6c <_free_r+0x28>
 8004dbc:	d902      	bls.n	8004dc4 <_free_r+0x80>
 8004dbe:	230c      	movs	r3, #12
 8004dc0:	6003      	str	r3, [r0, #0]
 8004dc2:	e7d3      	b.n	8004d6c <_free_r+0x28>
 8004dc4:	6825      	ldr	r5, [r4, #0]
 8004dc6:	1961      	adds	r1, r4, r5
 8004dc8:	428b      	cmp	r3, r1
 8004dca:	bf04      	itt	eq
 8004dcc:	6819      	ldreq	r1, [r3, #0]
 8004dce:	685b      	ldreq	r3, [r3, #4]
 8004dd0:	6063      	str	r3, [r4, #4]
 8004dd2:	bf04      	itt	eq
 8004dd4:	1949      	addeq	r1, r1, r5
 8004dd6:	6021      	streq	r1, [r4, #0]
 8004dd8:	6054      	str	r4, [r2, #4]
 8004dda:	e7c7      	b.n	8004d6c <_free_r+0x28>
 8004ddc:	b003      	add	sp, #12
 8004dde:	bd30      	pop	{r4, r5, pc}
 8004de0:	200004f0 	.word	0x200004f0

08004de4 <_malloc_r>:
 8004de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004de6:	1ccd      	adds	r5, r1, #3
 8004de8:	f025 0503 	bic.w	r5, r5, #3
 8004dec:	3508      	adds	r5, #8
 8004dee:	2d0c      	cmp	r5, #12
 8004df0:	bf38      	it	cc
 8004df2:	250c      	movcc	r5, #12
 8004df4:	2d00      	cmp	r5, #0
 8004df6:	4606      	mov	r6, r0
 8004df8:	db01      	blt.n	8004dfe <_malloc_r+0x1a>
 8004dfa:	42a9      	cmp	r1, r5
 8004dfc:	d903      	bls.n	8004e06 <_malloc_r+0x22>
 8004dfe:	230c      	movs	r3, #12
 8004e00:	6033      	str	r3, [r6, #0]
 8004e02:	2000      	movs	r0, #0
 8004e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e06:	f000 f899 	bl	8004f3c <__malloc_lock>
 8004e0a:	4921      	ldr	r1, [pc, #132]	; (8004e90 <_malloc_r+0xac>)
 8004e0c:	680a      	ldr	r2, [r1, #0]
 8004e0e:	4614      	mov	r4, r2
 8004e10:	b99c      	cbnz	r4, 8004e3a <_malloc_r+0x56>
 8004e12:	4f20      	ldr	r7, [pc, #128]	; (8004e94 <_malloc_r+0xb0>)
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	b923      	cbnz	r3, 8004e22 <_malloc_r+0x3e>
 8004e18:	4621      	mov	r1, r4
 8004e1a:	4630      	mov	r0, r6
 8004e1c:	f000 f83c 	bl	8004e98 <_sbrk_r>
 8004e20:	6038      	str	r0, [r7, #0]
 8004e22:	4629      	mov	r1, r5
 8004e24:	4630      	mov	r0, r6
 8004e26:	f000 f837 	bl	8004e98 <_sbrk_r>
 8004e2a:	1c43      	adds	r3, r0, #1
 8004e2c:	d123      	bne.n	8004e76 <_malloc_r+0x92>
 8004e2e:	230c      	movs	r3, #12
 8004e30:	6033      	str	r3, [r6, #0]
 8004e32:	4630      	mov	r0, r6
 8004e34:	f000 f888 	bl	8004f48 <__malloc_unlock>
 8004e38:	e7e3      	b.n	8004e02 <_malloc_r+0x1e>
 8004e3a:	6823      	ldr	r3, [r4, #0]
 8004e3c:	1b5b      	subs	r3, r3, r5
 8004e3e:	d417      	bmi.n	8004e70 <_malloc_r+0x8c>
 8004e40:	2b0b      	cmp	r3, #11
 8004e42:	d903      	bls.n	8004e4c <_malloc_r+0x68>
 8004e44:	6023      	str	r3, [r4, #0]
 8004e46:	441c      	add	r4, r3
 8004e48:	6025      	str	r5, [r4, #0]
 8004e4a:	e004      	b.n	8004e56 <_malloc_r+0x72>
 8004e4c:	6863      	ldr	r3, [r4, #4]
 8004e4e:	42a2      	cmp	r2, r4
 8004e50:	bf0c      	ite	eq
 8004e52:	600b      	streq	r3, [r1, #0]
 8004e54:	6053      	strne	r3, [r2, #4]
 8004e56:	4630      	mov	r0, r6
 8004e58:	f000 f876 	bl	8004f48 <__malloc_unlock>
 8004e5c:	f104 000b 	add.w	r0, r4, #11
 8004e60:	1d23      	adds	r3, r4, #4
 8004e62:	f020 0007 	bic.w	r0, r0, #7
 8004e66:	1ac2      	subs	r2, r0, r3
 8004e68:	d0cc      	beq.n	8004e04 <_malloc_r+0x20>
 8004e6a:	1a1b      	subs	r3, r3, r0
 8004e6c:	50a3      	str	r3, [r4, r2]
 8004e6e:	e7c9      	b.n	8004e04 <_malloc_r+0x20>
 8004e70:	4622      	mov	r2, r4
 8004e72:	6864      	ldr	r4, [r4, #4]
 8004e74:	e7cc      	b.n	8004e10 <_malloc_r+0x2c>
 8004e76:	1cc4      	adds	r4, r0, #3
 8004e78:	f024 0403 	bic.w	r4, r4, #3
 8004e7c:	42a0      	cmp	r0, r4
 8004e7e:	d0e3      	beq.n	8004e48 <_malloc_r+0x64>
 8004e80:	1a21      	subs	r1, r4, r0
 8004e82:	4630      	mov	r0, r6
 8004e84:	f000 f808 	bl	8004e98 <_sbrk_r>
 8004e88:	3001      	adds	r0, #1
 8004e8a:	d1dd      	bne.n	8004e48 <_malloc_r+0x64>
 8004e8c:	e7cf      	b.n	8004e2e <_malloc_r+0x4a>
 8004e8e:	bf00      	nop
 8004e90:	200004f0 	.word	0x200004f0
 8004e94:	200004f4 	.word	0x200004f4

08004e98 <_sbrk_r>:
 8004e98:	b538      	push	{r3, r4, r5, lr}
 8004e9a:	4d06      	ldr	r5, [pc, #24]	; (8004eb4 <_sbrk_r+0x1c>)
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	4604      	mov	r4, r0
 8004ea0:	4608      	mov	r0, r1
 8004ea2:	602b      	str	r3, [r5, #0]
 8004ea4:	f7fc fb6a 	bl	800157c <_sbrk>
 8004ea8:	1c43      	adds	r3, r0, #1
 8004eaa:	d102      	bne.n	8004eb2 <_sbrk_r+0x1a>
 8004eac:	682b      	ldr	r3, [r5, #0]
 8004eae:	b103      	cbz	r3, 8004eb2 <_sbrk_r+0x1a>
 8004eb0:	6023      	str	r3, [r4, #0]
 8004eb2:	bd38      	pop	{r3, r4, r5, pc}
 8004eb4:	20000a14 	.word	0x20000a14

08004eb8 <__assert_func>:
 8004eb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004eba:	4614      	mov	r4, r2
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	4b09      	ldr	r3, [pc, #36]	; (8004ee4 <__assert_func+0x2c>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4605      	mov	r5, r0
 8004ec4:	68d8      	ldr	r0, [r3, #12]
 8004ec6:	b14c      	cbz	r4, 8004edc <__assert_func+0x24>
 8004ec8:	4b07      	ldr	r3, [pc, #28]	; (8004ee8 <__assert_func+0x30>)
 8004eca:	9100      	str	r1, [sp, #0]
 8004ecc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004ed0:	4906      	ldr	r1, [pc, #24]	; (8004eec <__assert_func+0x34>)
 8004ed2:	462b      	mov	r3, r5
 8004ed4:	f000 f80e 	bl	8004ef4 <fiprintf>
 8004ed8:	f000 fa64 	bl	80053a4 <abort>
 8004edc:	4b04      	ldr	r3, [pc, #16]	; (8004ef0 <__assert_func+0x38>)
 8004ede:	461c      	mov	r4, r3
 8004ee0:	e7f3      	b.n	8004eca <__assert_func+0x12>
 8004ee2:	bf00      	nop
 8004ee4:	200001dc 	.word	0x200001dc
 8004ee8:	08005c2c 	.word	0x08005c2c
 8004eec:	08005c39 	.word	0x08005c39
 8004ef0:	08005c67 	.word	0x08005c67

08004ef4 <fiprintf>:
 8004ef4:	b40e      	push	{r1, r2, r3}
 8004ef6:	b503      	push	{r0, r1, lr}
 8004ef8:	4601      	mov	r1, r0
 8004efa:	ab03      	add	r3, sp, #12
 8004efc:	4805      	ldr	r0, [pc, #20]	; (8004f14 <fiprintf+0x20>)
 8004efe:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f02:	6800      	ldr	r0, [r0, #0]
 8004f04:	9301      	str	r3, [sp, #4]
 8004f06:	f000 f84f 	bl	8004fa8 <_vfiprintf_r>
 8004f0a:	b002      	add	sp, #8
 8004f0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f10:	b003      	add	sp, #12
 8004f12:	4770      	bx	lr
 8004f14:	200001dc 	.word	0x200001dc

08004f18 <__ascii_mbtowc>:
 8004f18:	b082      	sub	sp, #8
 8004f1a:	b901      	cbnz	r1, 8004f1e <__ascii_mbtowc+0x6>
 8004f1c:	a901      	add	r1, sp, #4
 8004f1e:	b142      	cbz	r2, 8004f32 <__ascii_mbtowc+0x1a>
 8004f20:	b14b      	cbz	r3, 8004f36 <__ascii_mbtowc+0x1e>
 8004f22:	7813      	ldrb	r3, [r2, #0]
 8004f24:	600b      	str	r3, [r1, #0]
 8004f26:	7812      	ldrb	r2, [r2, #0]
 8004f28:	1e10      	subs	r0, r2, #0
 8004f2a:	bf18      	it	ne
 8004f2c:	2001      	movne	r0, #1
 8004f2e:	b002      	add	sp, #8
 8004f30:	4770      	bx	lr
 8004f32:	4610      	mov	r0, r2
 8004f34:	e7fb      	b.n	8004f2e <__ascii_mbtowc+0x16>
 8004f36:	f06f 0001 	mvn.w	r0, #1
 8004f3a:	e7f8      	b.n	8004f2e <__ascii_mbtowc+0x16>

08004f3c <__malloc_lock>:
 8004f3c:	4801      	ldr	r0, [pc, #4]	; (8004f44 <__malloc_lock+0x8>)
 8004f3e:	f000 bbf1 	b.w	8005724 <__retarget_lock_acquire_recursive>
 8004f42:	bf00      	nop
 8004f44:	20000a1c 	.word	0x20000a1c

08004f48 <__malloc_unlock>:
 8004f48:	4801      	ldr	r0, [pc, #4]	; (8004f50 <__malloc_unlock+0x8>)
 8004f4a:	f000 bbec 	b.w	8005726 <__retarget_lock_release_recursive>
 8004f4e:	bf00      	nop
 8004f50:	20000a1c 	.word	0x20000a1c

08004f54 <__sfputc_r>:
 8004f54:	6893      	ldr	r3, [r2, #8]
 8004f56:	3b01      	subs	r3, #1
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	b410      	push	{r4}
 8004f5c:	6093      	str	r3, [r2, #8]
 8004f5e:	da08      	bge.n	8004f72 <__sfputc_r+0x1e>
 8004f60:	6994      	ldr	r4, [r2, #24]
 8004f62:	42a3      	cmp	r3, r4
 8004f64:	db01      	blt.n	8004f6a <__sfputc_r+0x16>
 8004f66:	290a      	cmp	r1, #10
 8004f68:	d103      	bne.n	8004f72 <__sfputc_r+0x1e>
 8004f6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f6e:	f000 b94b 	b.w	8005208 <__swbuf_r>
 8004f72:	6813      	ldr	r3, [r2, #0]
 8004f74:	1c58      	adds	r0, r3, #1
 8004f76:	6010      	str	r0, [r2, #0]
 8004f78:	7019      	strb	r1, [r3, #0]
 8004f7a:	4608      	mov	r0, r1
 8004f7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f80:	4770      	bx	lr

08004f82 <__sfputs_r>:
 8004f82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f84:	4606      	mov	r6, r0
 8004f86:	460f      	mov	r7, r1
 8004f88:	4614      	mov	r4, r2
 8004f8a:	18d5      	adds	r5, r2, r3
 8004f8c:	42ac      	cmp	r4, r5
 8004f8e:	d101      	bne.n	8004f94 <__sfputs_r+0x12>
 8004f90:	2000      	movs	r0, #0
 8004f92:	e007      	b.n	8004fa4 <__sfputs_r+0x22>
 8004f94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f98:	463a      	mov	r2, r7
 8004f9a:	4630      	mov	r0, r6
 8004f9c:	f7ff ffda 	bl	8004f54 <__sfputc_r>
 8004fa0:	1c43      	adds	r3, r0, #1
 8004fa2:	d1f3      	bne.n	8004f8c <__sfputs_r+0xa>
 8004fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004fa8 <_vfiprintf_r>:
 8004fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fac:	460d      	mov	r5, r1
 8004fae:	b09d      	sub	sp, #116	; 0x74
 8004fb0:	4614      	mov	r4, r2
 8004fb2:	4698      	mov	r8, r3
 8004fb4:	4606      	mov	r6, r0
 8004fb6:	b118      	cbz	r0, 8004fc0 <_vfiprintf_r+0x18>
 8004fb8:	6983      	ldr	r3, [r0, #24]
 8004fba:	b90b      	cbnz	r3, 8004fc0 <_vfiprintf_r+0x18>
 8004fbc:	f000 fb14 	bl	80055e8 <__sinit>
 8004fc0:	4b89      	ldr	r3, [pc, #548]	; (80051e8 <_vfiprintf_r+0x240>)
 8004fc2:	429d      	cmp	r5, r3
 8004fc4:	d11b      	bne.n	8004ffe <_vfiprintf_r+0x56>
 8004fc6:	6875      	ldr	r5, [r6, #4]
 8004fc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004fca:	07d9      	lsls	r1, r3, #31
 8004fcc:	d405      	bmi.n	8004fda <_vfiprintf_r+0x32>
 8004fce:	89ab      	ldrh	r3, [r5, #12]
 8004fd0:	059a      	lsls	r2, r3, #22
 8004fd2:	d402      	bmi.n	8004fda <_vfiprintf_r+0x32>
 8004fd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004fd6:	f000 fba5 	bl	8005724 <__retarget_lock_acquire_recursive>
 8004fda:	89ab      	ldrh	r3, [r5, #12]
 8004fdc:	071b      	lsls	r3, r3, #28
 8004fde:	d501      	bpl.n	8004fe4 <_vfiprintf_r+0x3c>
 8004fe0:	692b      	ldr	r3, [r5, #16]
 8004fe2:	b9eb      	cbnz	r3, 8005020 <_vfiprintf_r+0x78>
 8004fe4:	4629      	mov	r1, r5
 8004fe6:	4630      	mov	r0, r6
 8004fe8:	f000 f96e 	bl	80052c8 <__swsetup_r>
 8004fec:	b1c0      	cbz	r0, 8005020 <_vfiprintf_r+0x78>
 8004fee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ff0:	07dc      	lsls	r4, r3, #31
 8004ff2:	d50e      	bpl.n	8005012 <_vfiprintf_r+0x6a>
 8004ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ff8:	b01d      	add	sp, #116	; 0x74
 8004ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ffe:	4b7b      	ldr	r3, [pc, #492]	; (80051ec <_vfiprintf_r+0x244>)
 8005000:	429d      	cmp	r5, r3
 8005002:	d101      	bne.n	8005008 <_vfiprintf_r+0x60>
 8005004:	68b5      	ldr	r5, [r6, #8]
 8005006:	e7df      	b.n	8004fc8 <_vfiprintf_r+0x20>
 8005008:	4b79      	ldr	r3, [pc, #484]	; (80051f0 <_vfiprintf_r+0x248>)
 800500a:	429d      	cmp	r5, r3
 800500c:	bf08      	it	eq
 800500e:	68f5      	ldreq	r5, [r6, #12]
 8005010:	e7da      	b.n	8004fc8 <_vfiprintf_r+0x20>
 8005012:	89ab      	ldrh	r3, [r5, #12]
 8005014:	0598      	lsls	r0, r3, #22
 8005016:	d4ed      	bmi.n	8004ff4 <_vfiprintf_r+0x4c>
 8005018:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800501a:	f000 fb84 	bl	8005726 <__retarget_lock_release_recursive>
 800501e:	e7e9      	b.n	8004ff4 <_vfiprintf_r+0x4c>
 8005020:	2300      	movs	r3, #0
 8005022:	9309      	str	r3, [sp, #36]	; 0x24
 8005024:	2320      	movs	r3, #32
 8005026:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800502a:	f8cd 800c 	str.w	r8, [sp, #12]
 800502e:	2330      	movs	r3, #48	; 0x30
 8005030:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80051f4 <_vfiprintf_r+0x24c>
 8005034:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005038:	f04f 0901 	mov.w	r9, #1
 800503c:	4623      	mov	r3, r4
 800503e:	469a      	mov	sl, r3
 8005040:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005044:	b10a      	cbz	r2, 800504a <_vfiprintf_r+0xa2>
 8005046:	2a25      	cmp	r2, #37	; 0x25
 8005048:	d1f9      	bne.n	800503e <_vfiprintf_r+0x96>
 800504a:	ebba 0b04 	subs.w	fp, sl, r4
 800504e:	d00b      	beq.n	8005068 <_vfiprintf_r+0xc0>
 8005050:	465b      	mov	r3, fp
 8005052:	4622      	mov	r2, r4
 8005054:	4629      	mov	r1, r5
 8005056:	4630      	mov	r0, r6
 8005058:	f7ff ff93 	bl	8004f82 <__sfputs_r>
 800505c:	3001      	adds	r0, #1
 800505e:	f000 80aa 	beq.w	80051b6 <_vfiprintf_r+0x20e>
 8005062:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005064:	445a      	add	r2, fp
 8005066:	9209      	str	r2, [sp, #36]	; 0x24
 8005068:	f89a 3000 	ldrb.w	r3, [sl]
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 80a2 	beq.w	80051b6 <_vfiprintf_r+0x20e>
 8005072:	2300      	movs	r3, #0
 8005074:	f04f 32ff 	mov.w	r2, #4294967295
 8005078:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800507c:	f10a 0a01 	add.w	sl, sl, #1
 8005080:	9304      	str	r3, [sp, #16]
 8005082:	9307      	str	r3, [sp, #28]
 8005084:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005088:	931a      	str	r3, [sp, #104]	; 0x68
 800508a:	4654      	mov	r4, sl
 800508c:	2205      	movs	r2, #5
 800508e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005092:	4858      	ldr	r0, [pc, #352]	; (80051f4 <_vfiprintf_r+0x24c>)
 8005094:	f7fb f8ac 	bl	80001f0 <memchr>
 8005098:	9a04      	ldr	r2, [sp, #16]
 800509a:	b9d8      	cbnz	r0, 80050d4 <_vfiprintf_r+0x12c>
 800509c:	06d1      	lsls	r1, r2, #27
 800509e:	bf44      	itt	mi
 80050a0:	2320      	movmi	r3, #32
 80050a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050a6:	0713      	lsls	r3, r2, #28
 80050a8:	bf44      	itt	mi
 80050aa:	232b      	movmi	r3, #43	; 0x2b
 80050ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050b0:	f89a 3000 	ldrb.w	r3, [sl]
 80050b4:	2b2a      	cmp	r3, #42	; 0x2a
 80050b6:	d015      	beq.n	80050e4 <_vfiprintf_r+0x13c>
 80050b8:	9a07      	ldr	r2, [sp, #28]
 80050ba:	4654      	mov	r4, sl
 80050bc:	2000      	movs	r0, #0
 80050be:	f04f 0c0a 	mov.w	ip, #10
 80050c2:	4621      	mov	r1, r4
 80050c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050c8:	3b30      	subs	r3, #48	; 0x30
 80050ca:	2b09      	cmp	r3, #9
 80050cc:	d94e      	bls.n	800516c <_vfiprintf_r+0x1c4>
 80050ce:	b1b0      	cbz	r0, 80050fe <_vfiprintf_r+0x156>
 80050d0:	9207      	str	r2, [sp, #28]
 80050d2:	e014      	b.n	80050fe <_vfiprintf_r+0x156>
 80050d4:	eba0 0308 	sub.w	r3, r0, r8
 80050d8:	fa09 f303 	lsl.w	r3, r9, r3
 80050dc:	4313      	orrs	r3, r2
 80050de:	9304      	str	r3, [sp, #16]
 80050e0:	46a2      	mov	sl, r4
 80050e2:	e7d2      	b.n	800508a <_vfiprintf_r+0xe2>
 80050e4:	9b03      	ldr	r3, [sp, #12]
 80050e6:	1d19      	adds	r1, r3, #4
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	9103      	str	r1, [sp, #12]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	bfbb      	ittet	lt
 80050f0:	425b      	neglt	r3, r3
 80050f2:	f042 0202 	orrlt.w	r2, r2, #2
 80050f6:	9307      	strge	r3, [sp, #28]
 80050f8:	9307      	strlt	r3, [sp, #28]
 80050fa:	bfb8      	it	lt
 80050fc:	9204      	strlt	r2, [sp, #16]
 80050fe:	7823      	ldrb	r3, [r4, #0]
 8005100:	2b2e      	cmp	r3, #46	; 0x2e
 8005102:	d10c      	bne.n	800511e <_vfiprintf_r+0x176>
 8005104:	7863      	ldrb	r3, [r4, #1]
 8005106:	2b2a      	cmp	r3, #42	; 0x2a
 8005108:	d135      	bne.n	8005176 <_vfiprintf_r+0x1ce>
 800510a:	9b03      	ldr	r3, [sp, #12]
 800510c:	1d1a      	adds	r2, r3, #4
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	9203      	str	r2, [sp, #12]
 8005112:	2b00      	cmp	r3, #0
 8005114:	bfb8      	it	lt
 8005116:	f04f 33ff 	movlt.w	r3, #4294967295
 800511a:	3402      	adds	r4, #2
 800511c:	9305      	str	r3, [sp, #20]
 800511e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005204 <_vfiprintf_r+0x25c>
 8005122:	7821      	ldrb	r1, [r4, #0]
 8005124:	2203      	movs	r2, #3
 8005126:	4650      	mov	r0, sl
 8005128:	f7fb f862 	bl	80001f0 <memchr>
 800512c:	b140      	cbz	r0, 8005140 <_vfiprintf_r+0x198>
 800512e:	2340      	movs	r3, #64	; 0x40
 8005130:	eba0 000a 	sub.w	r0, r0, sl
 8005134:	fa03 f000 	lsl.w	r0, r3, r0
 8005138:	9b04      	ldr	r3, [sp, #16]
 800513a:	4303      	orrs	r3, r0
 800513c:	3401      	adds	r4, #1
 800513e:	9304      	str	r3, [sp, #16]
 8005140:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005144:	482c      	ldr	r0, [pc, #176]	; (80051f8 <_vfiprintf_r+0x250>)
 8005146:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800514a:	2206      	movs	r2, #6
 800514c:	f7fb f850 	bl	80001f0 <memchr>
 8005150:	2800      	cmp	r0, #0
 8005152:	d03f      	beq.n	80051d4 <_vfiprintf_r+0x22c>
 8005154:	4b29      	ldr	r3, [pc, #164]	; (80051fc <_vfiprintf_r+0x254>)
 8005156:	bb1b      	cbnz	r3, 80051a0 <_vfiprintf_r+0x1f8>
 8005158:	9b03      	ldr	r3, [sp, #12]
 800515a:	3307      	adds	r3, #7
 800515c:	f023 0307 	bic.w	r3, r3, #7
 8005160:	3308      	adds	r3, #8
 8005162:	9303      	str	r3, [sp, #12]
 8005164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005166:	443b      	add	r3, r7
 8005168:	9309      	str	r3, [sp, #36]	; 0x24
 800516a:	e767      	b.n	800503c <_vfiprintf_r+0x94>
 800516c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005170:	460c      	mov	r4, r1
 8005172:	2001      	movs	r0, #1
 8005174:	e7a5      	b.n	80050c2 <_vfiprintf_r+0x11a>
 8005176:	2300      	movs	r3, #0
 8005178:	3401      	adds	r4, #1
 800517a:	9305      	str	r3, [sp, #20]
 800517c:	4619      	mov	r1, r3
 800517e:	f04f 0c0a 	mov.w	ip, #10
 8005182:	4620      	mov	r0, r4
 8005184:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005188:	3a30      	subs	r2, #48	; 0x30
 800518a:	2a09      	cmp	r2, #9
 800518c:	d903      	bls.n	8005196 <_vfiprintf_r+0x1ee>
 800518e:	2b00      	cmp	r3, #0
 8005190:	d0c5      	beq.n	800511e <_vfiprintf_r+0x176>
 8005192:	9105      	str	r1, [sp, #20]
 8005194:	e7c3      	b.n	800511e <_vfiprintf_r+0x176>
 8005196:	fb0c 2101 	mla	r1, ip, r1, r2
 800519a:	4604      	mov	r4, r0
 800519c:	2301      	movs	r3, #1
 800519e:	e7f0      	b.n	8005182 <_vfiprintf_r+0x1da>
 80051a0:	ab03      	add	r3, sp, #12
 80051a2:	9300      	str	r3, [sp, #0]
 80051a4:	462a      	mov	r2, r5
 80051a6:	4b16      	ldr	r3, [pc, #88]	; (8005200 <_vfiprintf_r+0x258>)
 80051a8:	a904      	add	r1, sp, #16
 80051aa:	4630      	mov	r0, r6
 80051ac:	f7fd ffec 	bl	8003188 <_printf_float>
 80051b0:	4607      	mov	r7, r0
 80051b2:	1c78      	adds	r0, r7, #1
 80051b4:	d1d6      	bne.n	8005164 <_vfiprintf_r+0x1bc>
 80051b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051b8:	07d9      	lsls	r1, r3, #31
 80051ba:	d405      	bmi.n	80051c8 <_vfiprintf_r+0x220>
 80051bc:	89ab      	ldrh	r3, [r5, #12]
 80051be:	059a      	lsls	r2, r3, #22
 80051c0:	d402      	bmi.n	80051c8 <_vfiprintf_r+0x220>
 80051c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051c4:	f000 faaf 	bl	8005726 <__retarget_lock_release_recursive>
 80051c8:	89ab      	ldrh	r3, [r5, #12]
 80051ca:	065b      	lsls	r3, r3, #25
 80051cc:	f53f af12 	bmi.w	8004ff4 <_vfiprintf_r+0x4c>
 80051d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051d2:	e711      	b.n	8004ff8 <_vfiprintf_r+0x50>
 80051d4:	ab03      	add	r3, sp, #12
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	462a      	mov	r2, r5
 80051da:	4b09      	ldr	r3, [pc, #36]	; (8005200 <_vfiprintf_r+0x258>)
 80051dc:	a904      	add	r1, sp, #16
 80051de:	4630      	mov	r0, r6
 80051e0:	f7fe fa76 	bl	80036d0 <_printf_i>
 80051e4:	e7e4      	b.n	80051b0 <_vfiprintf_r+0x208>
 80051e6:	bf00      	nop
 80051e8:	08005da4 	.word	0x08005da4
 80051ec:	08005dc4 	.word	0x08005dc4
 80051f0:	08005d84 	.word	0x08005d84
 80051f4:	08005c72 	.word	0x08005c72
 80051f8:	08005c7c 	.word	0x08005c7c
 80051fc:	08003189 	.word	0x08003189
 8005200:	08004f83 	.word	0x08004f83
 8005204:	08005c78 	.word	0x08005c78

08005208 <__swbuf_r>:
 8005208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800520a:	460e      	mov	r6, r1
 800520c:	4614      	mov	r4, r2
 800520e:	4605      	mov	r5, r0
 8005210:	b118      	cbz	r0, 800521a <__swbuf_r+0x12>
 8005212:	6983      	ldr	r3, [r0, #24]
 8005214:	b90b      	cbnz	r3, 800521a <__swbuf_r+0x12>
 8005216:	f000 f9e7 	bl	80055e8 <__sinit>
 800521a:	4b21      	ldr	r3, [pc, #132]	; (80052a0 <__swbuf_r+0x98>)
 800521c:	429c      	cmp	r4, r3
 800521e:	d12b      	bne.n	8005278 <__swbuf_r+0x70>
 8005220:	686c      	ldr	r4, [r5, #4]
 8005222:	69a3      	ldr	r3, [r4, #24]
 8005224:	60a3      	str	r3, [r4, #8]
 8005226:	89a3      	ldrh	r3, [r4, #12]
 8005228:	071a      	lsls	r2, r3, #28
 800522a:	d52f      	bpl.n	800528c <__swbuf_r+0x84>
 800522c:	6923      	ldr	r3, [r4, #16]
 800522e:	b36b      	cbz	r3, 800528c <__swbuf_r+0x84>
 8005230:	6923      	ldr	r3, [r4, #16]
 8005232:	6820      	ldr	r0, [r4, #0]
 8005234:	1ac0      	subs	r0, r0, r3
 8005236:	6963      	ldr	r3, [r4, #20]
 8005238:	b2f6      	uxtb	r6, r6
 800523a:	4283      	cmp	r3, r0
 800523c:	4637      	mov	r7, r6
 800523e:	dc04      	bgt.n	800524a <__swbuf_r+0x42>
 8005240:	4621      	mov	r1, r4
 8005242:	4628      	mov	r0, r5
 8005244:	f000 f93c 	bl	80054c0 <_fflush_r>
 8005248:	bb30      	cbnz	r0, 8005298 <__swbuf_r+0x90>
 800524a:	68a3      	ldr	r3, [r4, #8]
 800524c:	3b01      	subs	r3, #1
 800524e:	60a3      	str	r3, [r4, #8]
 8005250:	6823      	ldr	r3, [r4, #0]
 8005252:	1c5a      	adds	r2, r3, #1
 8005254:	6022      	str	r2, [r4, #0]
 8005256:	701e      	strb	r6, [r3, #0]
 8005258:	6963      	ldr	r3, [r4, #20]
 800525a:	3001      	adds	r0, #1
 800525c:	4283      	cmp	r3, r0
 800525e:	d004      	beq.n	800526a <__swbuf_r+0x62>
 8005260:	89a3      	ldrh	r3, [r4, #12]
 8005262:	07db      	lsls	r3, r3, #31
 8005264:	d506      	bpl.n	8005274 <__swbuf_r+0x6c>
 8005266:	2e0a      	cmp	r6, #10
 8005268:	d104      	bne.n	8005274 <__swbuf_r+0x6c>
 800526a:	4621      	mov	r1, r4
 800526c:	4628      	mov	r0, r5
 800526e:	f000 f927 	bl	80054c0 <_fflush_r>
 8005272:	b988      	cbnz	r0, 8005298 <__swbuf_r+0x90>
 8005274:	4638      	mov	r0, r7
 8005276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005278:	4b0a      	ldr	r3, [pc, #40]	; (80052a4 <__swbuf_r+0x9c>)
 800527a:	429c      	cmp	r4, r3
 800527c:	d101      	bne.n	8005282 <__swbuf_r+0x7a>
 800527e:	68ac      	ldr	r4, [r5, #8]
 8005280:	e7cf      	b.n	8005222 <__swbuf_r+0x1a>
 8005282:	4b09      	ldr	r3, [pc, #36]	; (80052a8 <__swbuf_r+0xa0>)
 8005284:	429c      	cmp	r4, r3
 8005286:	bf08      	it	eq
 8005288:	68ec      	ldreq	r4, [r5, #12]
 800528a:	e7ca      	b.n	8005222 <__swbuf_r+0x1a>
 800528c:	4621      	mov	r1, r4
 800528e:	4628      	mov	r0, r5
 8005290:	f000 f81a 	bl	80052c8 <__swsetup_r>
 8005294:	2800      	cmp	r0, #0
 8005296:	d0cb      	beq.n	8005230 <__swbuf_r+0x28>
 8005298:	f04f 37ff 	mov.w	r7, #4294967295
 800529c:	e7ea      	b.n	8005274 <__swbuf_r+0x6c>
 800529e:	bf00      	nop
 80052a0:	08005da4 	.word	0x08005da4
 80052a4:	08005dc4 	.word	0x08005dc4
 80052a8:	08005d84 	.word	0x08005d84

080052ac <__ascii_wctomb>:
 80052ac:	b149      	cbz	r1, 80052c2 <__ascii_wctomb+0x16>
 80052ae:	2aff      	cmp	r2, #255	; 0xff
 80052b0:	bf85      	ittet	hi
 80052b2:	238a      	movhi	r3, #138	; 0x8a
 80052b4:	6003      	strhi	r3, [r0, #0]
 80052b6:	700a      	strbls	r2, [r1, #0]
 80052b8:	f04f 30ff 	movhi.w	r0, #4294967295
 80052bc:	bf98      	it	ls
 80052be:	2001      	movls	r0, #1
 80052c0:	4770      	bx	lr
 80052c2:	4608      	mov	r0, r1
 80052c4:	4770      	bx	lr
	...

080052c8 <__swsetup_r>:
 80052c8:	4b32      	ldr	r3, [pc, #200]	; (8005394 <__swsetup_r+0xcc>)
 80052ca:	b570      	push	{r4, r5, r6, lr}
 80052cc:	681d      	ldr	r5, [r3, #0]
 80052ce:	4606      	mov	r6, r0
 80052d0:	460c      	mov	r4, r1
 80052d2:	b125      	cbz	r5, 80052de <__swsetup_r+0x16>
 80052d4:	69ab      	ldr	r3, [r5, #24]
 80052d6:	b913      	cbnz	r3, 80052de <__swsetup_r+0x16>
 80052d8:	4628      	mov	r0, r5
 80052da:	f000 f985 	bl	80055e8 <__sinit>
 80052de:	4b2e      	ldr	r3, [pc, #184]	; (8005398 <__swsetup_r+0xd0>)
 80052e0:	429c      	cmp	r4, r3
 80052e2:	d10f      	bne.n	8005304 <__swsetup_r+0x3c>
 80052e4:	686c      	ldr	r4, [r5, #4]
 80052e6:	89a3      	ldrh	r3, [r4, #12]
 80052e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80052ec:	0719      	lsls	r1, r3, #28
 80052ee:	d42c      	bmi.n	800534a <__swsetup_r+0x82>
 80052f0:	06dd      	lsls	r5, r3, #27
 80052f2:	d411      	bmi.n	8005318 <__swsetup_r+0x50>
 80052f4:	2309      	movs	r3, #9
 80052f6:	6033      	str	r3, [r6, #0]
 80052f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80052fc:	81a3      	strh	r3, [r4, #12]
 80052fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005302:	e03e      	b.n	8005382 <__swsetup_r+0xba>
 8005304:	4b25      	ldr	r3, [pc, #148]	; (800539c <__swsetup_r+0xd4>)
 8005306:	429c      	cmp	r4, r3
 8005308:	d101      	bne.n	800530e <__swsetup_r+0x46>
 800530a:	68ac      	ldr	r4, [r5, #8]
 800530c:	e7eb      	b.n	80052e6 <__swsetup_r+0x1e>
 800530e:	4b24      	ldr	r3, [pc, #144]	; (80053a0 <__swsetup_r+0xd8>)
 8005310:	429c      	cmp	r4, r3
 8005312:	bf08      	it	eq
 8005314:	68ec      	ldreq	r4, [r5, #12]
 8005316:	e7e6      	b.n	80052e6 <__swsetup_r+0x1e>
 8005318:	0758      	lsls	r0, r3, #29
 800531a:	d512      	bpl.n	8005342 <__swsetup_r+0x7a>
 800531c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800531e:	b141      	cbz	r1, 8005332 <__swsetup_r+0x6a>
 8005320:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005324:	4299      	cmp	r1, r3
 8005326:	d002      	beq.n	800532e <__swsetup_r+0x66>
 8005328:	4630      	mov	r0, r6
 800532a:	f7ff fd0b 	bl	8004d44 <_free_r>
 800532e:	2300      	movs	r3, #0
 8005330:	6363      	str	r3, [r4, #52]	; 0x34
 8005332:	89a3      	ldrh	r3, [r4, #12]
 8005334:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005338:	81a3      	strh	r3, [r4, #12]
 800533a:	2300      	movs	r3, #0
 800533c:	6063      	str	r3, [r4, #4]
 800533e:	6923      	ldr	r3, [r4, #16]
 8005340:	6023      	str	r3, [r4, #0]
 8005342:	89a3      	ldrh	r3, [r4, #12]
 8005344:	f043 0308 	orr.w	r3, r3, #8
 8005348:	81a3      	strh	r3, [r4, #12]
 800534a:	6923      	ldr	r3, [r4, #16]
 800534c:	b94b      	cbnz	r3, 8005362 <__swsetup_r+0x9a>
 800534e:	89a3      	ldrh	r3, [r4, #12]
 8005350:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005354:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005358:	d003      	beq.n	8005362 <__swsetup_r+0x9a>
 800535a:	4621      	mov	r1, r4
 800535c:	4630      	mov	r0, r6
 800535e:	f000 fa07 	bl	8005770 <__smakebuf_r>
 8005362:	89a0      	ldrh	r0, [r4, #12]
 8005364:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005368:	f010 0301 	ands.w	r3, r0, #1
 800536c:	d00a      	beq.n	8005384 <__swsetup_r+0xbc>
 800536e:	2300      	movs	r3, #0
 8005370:	60a3      	str	r3, [r4, #8]
 8005372:	6963      	ldr	r3, [r4, #20]
 8005374:	425b      	negs	r3, r3
 8005376:	61a3      	str	r3, [r4, #24]
 8005378:	6923      	ldr	r3, [r4, #16]
 800537a:	b943      	cbnz	r3, 800538e <__swsetup_r+0xc6>
 800537c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005380:	d1ba      	bne.n	80052f8 <__swsetup_r+0x30>
 8005382:	bd70      	pop	{r4, r5, r6, pc}
 8005384:	0781      	lsls	r1, r0, #30
 8005386:	bf58      	it	pl
 8005388:	6963      	ldrpl	r3, [r4, #20]
 800538a:	60a3      	str	r3, [r4, #8]
 800538c:	e7f4      	b.n	8005378 <__swsetup_r+0xb0>
 800538e:	2000      	movs	r0, #0
 8005390:	e7f7      	b.n	8005382 <__swsetup_r+0xba>
 8005392:	bf00      	nop
 8005394:	200001dc 	.word	0x200001dc
 8005398:	08005da4 	.word	0x08005da4
 800539c:	08005dc4 	.word	0x08005dc4
 80053a0:	08005d84 	.word	0x08005d84

080053a4 <abort>:
 80053a4:	b508      	push	{r3, lr}
 80053a6:	2006      	movs	r0, #6
 80053a8:	f000 fa4a 	bl	8005840 <raise>
 80053ac:	2001      	movs	r0, #1
 80053ae:	f7fc f889 	bl	80014c4 <_exit>
	...

080053b4 <__sflush_r>:
 80053b4:	898a      	ldrh	r2, [r1, #12]
 80053b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053ba:	4605      	mov	r5, r0
 80053bc:	0710      	lsls	r0, r2, #28
 80053be:	460c      	mov	r4, r1
 80053c0:	d458      	bmi.n	8005474 <__sflush_r+0xc0>
 80053c2:	684b      	ldr	r3, [r1, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	dc05      	bgt.n	80053d4 <__sflush_r+0x20>
 80053c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	dc02      	bgt.n	80053d4 <__sflush_r+0x20>
 80053ce:	2000      	movs	r0, #0
 80053d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053d6:	2e00      	cmp	r6, #0
 80053d8:	d0f9      	beq.n	80053ce <__sflush_r+0x1a>
 80053da:	2300      	movs	r3, #0
 80053dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80053e0:	682f      	ldr	r7, [r5, #0]
 80053e2:	602b      	str	r3, [r5, #0]
 80053e4:	d032      	beq.n	800544c <__sflush_r+0x98>
 80053e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80053e8:	89a3      	ldrh	r3, [r4, #12]
 80053ea:	075a      	lsls	r2, r3, #29
 80053ec:	d505      	bpl.n	80053fa <__sflush_r+0x46>
 80053ee:	6863      	ldr	r3, [r4, #4]
 80053f0:	1ac0      	subs	r0, r0, r3
 80053f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80053f4:	b10b      	cbz	r3, 80053fa <__sflush_r+0x46>
 80053f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053f8:	1ac0      	subs	r0, r0, r3
 80053fa:	2300      	movs	r3, #0
 80053fc:	4602      	mov	r2, r0
 80053fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005400:	6a21      	ldr	r1, [r4, #32]
 8005402:	4628      	mov	r0, r5
 8005404:	47b0      	blx	r6
 8005406:	1c43      	adds	r3, r0, #1
 8005408:	89a3      	ldrh	r3, [r4, #12]
 800540a:	d106      	bne.n	800541a <__sflush_r+0x66>
 800540c:	6829      	ldr	r1, [r5, #0]
 800540e:	291d      	cmp	r1, #29
 8005410:	d82c      	bhi.n	800546c <__sflush_r+0xb8>
 8005412:	4a2a      	ldr	r2, [pc, #168]	; (80054bc <__sflush_r+0x108>)
 8005414:	40ca      	lsrs	r2, r1
 8005416:	07d6      	lsls	r6, r2, #31
 8005418:	d528      	bpl.n	800546c <__sflush_r+0xb8>
 800541a:	2200      	movs	r2, #0
 800541c:	6062      	str	r2, [r4, #4]
 800541e:	04d9      	lsls	r1, r3, #19
 8005420:	6922      	ldr	r2, [r4, #16]
 8005422:	6022      	str	r2, [r4, #0]
 8005424:	d504      	bpl.n	8005430 <__sflush_r+0x7c>
 8005426:	1c42      	adds	r2, r0, #1
 8005428:	d101      	bne.n	800542e <__sflush_r+0x7a>
 800542a:	682b      	ldr	r3, [r5, #0]
 800542c:	b903      	cbnz	r3, 8005430 <__sflush_r+0x7c>
 800542e:	6560      	str	r0, [r4, #84]	; 0x54
 8005430:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005432:	602f      	str	r7, [r5, #0]
 8005434:	2900      	cmp	r1, #0
 8005436:	d0ca      	beq.n	80053ce <__sflush_r+0x1a>
 8005438:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800543c:	4299      	cmp	r1, r3
 800543e:	d002      	beq.n	8005446 <__sflush_r+0x92>
 8005440:	4628      	mov	r0, r5
 8005442:	f7ff fc7f 	bl	8004d44 <_free_r>
 8005446:	2000      	movs	r0, #0
 8005448:	6360      	str	r0, [r4, #52]	; 0x34
 800544a:	e7c1      	b.n	80053d0 <__sflush_r+0x1c>
 800544c:	6a21      	ldr	r1, [r4, #32]
 800544e:	2301      	movs	r3, #1
 8005450:	4628      	mov	r0, r5
 8005452:	47b0      	blx	r6
 8005454:	1c41      	adds	r1, r0, #1
 8005456:	d1c7      	bne.n	80053e8 <__sflush_r+0x34>
 8005458:	682b      	ldr	r3, [r5, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d0c4      	beq.n	80053e8 <__sflush_r+0x34>
 800545e:	2b1d      	cmp	r3, #29
 8005460:	d001      	beq.n	8005466 <__sflush_r+0xb2>
 8005462:	2b16      	cmp	r3, #22
 8005464:	d101      	bne.n	800546a <__sflush_r+0xb6>
 8005466:	602f      	str	r7, [r5, #0]
 8005468:	e7b1      	b.n	80053ce <__sflush_r+0x1a>
 800546a:	89a3      	ldrh	r3, [r4, #12]
 800546c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005470:	81a3      	strh	r3, [r4, #12]
 8005472:	e7ad      	b.n	80053d0 <__sflush_r+0x1c>
 8005474:	690f      	ldr	r7, [r1, #16]
 8005476:	2f00      	cmp	r7, #0
 8005478:	d0a9      	beq.n	80053ce <__sflush_r+0x1a>
 800547a:	0793      	lsls	r3, r2, #30
 800547c:	680e      	ldr	r6, [r1, #0]
 800547e:	bf08      	it	eq
 8005480:	694b      	ldreq	r3, [r1, #20]
 8005482:	600f      	str	r7, [r1, #0]
 8005484:	bf18      	it	ne
 8005486:	2300      	movne	r3, #0
 8005488:	eba6 0807 	sub.w	r8, r6, r7
 800548c:	608b      	str	r3, [r1, #8]
 800548e:	f1b8 0f00 	cmp.w	r8, #0
 8005492:	dd9c      	ble.n	80053ce <__sflush_r+0x1a>
 8005494:	6a21      	ldr	r1, [r4, #32]
 8005496:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005498:	4643      	mov	r3, r8
 800549a:	463a      	mov	r2, r7
 800549c:	4628      	mov	r0, r5
 800549e:	47b0      	blx	r6
 80054a0:	2800      	cmp	r0, #0
 80054a2:	dc06      	bgt.n	80054b2 <__sflush_r+0xfe>
 80054a4:	89a3      	ldrh	r3, [r4, #12]
 80054a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054aa:	81a3      	strh	r3, [r4, #12]
 80054ac:	f04f 30ff 	mov.w	r0, #4294967295
 80054b0:	e78e      	b.n	80053d0 <__sflush_r+0x1c>
 80054b2:	4407      	add	r7, r0
 80054b4:	eba8 0800 	sub.w	r8, r8, r0
 80054b8:	e7e9      	b.n	800548e <__sflush_r+0xda>
 80054ba:	bf00      	nop
 80054bc:	20400001 	.word	0x20400001

080054c0 <_fflush_r>:
 80054c0:	b538      	push	{r3, r4, r5, lr}
 80054c2:	690b      	ldr	r3, [r1, #16]
 80054c4:	4605      	mov	r5, r0
 80054c6:	460c      	mov	r4, r1
 80054c8:	b913      	cbnz	r3, 80054d0 <_fflush_r+0x10>
 80054ca:	2500      	movs	r5, #0
 80054cc:	4628      	mov	r0, r5
 80054ce:	bd38      	pop	{r3, r4, r5, pc}
 80054d0:	b118      	cbz	r0, 80054da <_fflush_r+0x1a>
 80054d2:	6983      	ldr	r3, [r0, #24]
 80054d4:	b90b      	cbnz	r3, 80054da <_fflush_r+0x1a>
 80054d6:	f000 f887 	bl	80055e8 <__sinit>
 80054da:	4b14      	ldr	r3, [pc, #80]	; (800552c <_fflush_r+0x6c>)
 80054dc:	429c      	cmp	r4, r3
 80054de:	d11b      	bne.n	8005518 <_fflush_r+0x58>
 80054e0:	686c      	ldr	r4, [r5, #4]
 80054e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d0ef      	beq.n	80054ca <_fflush_r+0xa>
 80054ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80054ec:	07d0      	lsls	r0, r2, #31
 80054ee:	d404      	bmi.n	80054fa <_fflush_r+0x3a>
 80054f0:	0599      	lsls	r1, r3, #22
 80054f2:	d402      	bmi.n	80054fa <_fflush_r+0x3a>
 80054f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054f6:	f000 f915 	bl	8005724 <__retarget_lock_acquire_recursive>
 80054fa:	4628      	mov	r0, r5
 80054fc:	4621      	mov	r1, r4
 80054fe:	f7ff ff59 	bl	80053b4 <__sflush_r>
 8005502:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005504:	07da      	lsls	r2, r3, #31
 8005506:	4605      	mov	r5, r0
 8005508:	d4e0      	bmi.n	80054cc <_fflush_r+0xc>
 800550a:	89a3      	ldrh	r3, [r4, #12]
 800550c:	059b      	lsls	r3, r3, #22
 800550e:	d4dd      	bmi.n	80054cc <_fflush_r+0xc>
 8005510:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005512:	f000 f908 	bl	8005726 <__retarget_lock_release_recursive>
 8005516:	e7d9      	b.n	80054cc <_fflush_r+0xc>
 8005518:	4b05      	ldr	r3, [pc, #20]	; (8005530 <_fflush_r+0x70>)
 800551a:	429c      	cmp	r4, r3
 800551c:	d101      	bne.n	8005522 <_fflush_r+0x62>
 800551e:	68ac      	ldr	r4, [r5, #8]
 8005520:	e7df      	b.n	80054e2 <_fflush_r+0x22>
 8005522:	4b04      	ldr	r3, [pc, #16]	; (8005534 <_fflush_r+0x74>)
 8005524:	429c      	cmp	r4, r3
 8005526:	bf08      	it	eq
 8005528:	68ec      	ldreq	r4, [r5, #12]
 800552a:	e7da      	b.n	80054e2 <_fflush_r+0x22>
 800552c:	08005da4 	.word	0x08005da4
 8005530:	08005dc4 	.word	0x08005dc4
 8005534:	08005d84 	.word	0x08005d84

08005538 <std>:
 8005538:	2300      	movs	r3, #0
 800553a:	b510      	push	{r4, lr}
 800553c:	4604      	mov	r4, r0
 800553e:	e9c0 3300 	strd	r3, r3, [r0]
 8005542:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005546:	6083      	str	r3, [r0, #8]
 8005548:	8181      	strh	r1, [r0, #12]
 800554a:	6643      	str	r3, [r0, #100]	; 0x64
 800554c:	81c2      	strh	r2, [r0, #14]
 800554e:	6183      	str	r3, [r0, #24]
 8005550:	4619      	mov	r1, r3
 8005552:	2208      	movs	r2, #8
 8005554:	305c      	adds	r0, #92	; 0x5c
 8005556:	f7fd fd6f 	bl	8003038 <memset>
 800555a:	4b05      	ldr	r3, [pc, #20]	; (8005570 <std+0x38>)
 800555c:	6263      	str	r3, [r4, #36]	; 0x24
 800555e:	4b05      	ldr	r3, [pc, #20]	; (8005574 <std+0x3c>)
 8005560:	62a3      	str	r3, [r4, #40]	; 0x28
 8005562:	4b05      	ldr	r3, [pc, #20]	; (8005578 <std+0x40>)
 8005564:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005566:	4b05      	ldr	r3, [pc, #20]	; (800557c <std+0x44>)
 8005568:	6224      	str	r4, [r4, #32]
 800556a:	6323      	str	r3, [r4, #48]	; 0x30
 800556c:	bd10      	pop	{r4, pc}
 800556e:	bf00      	nop
 8005570:	08005879 	.word	0x08005879
 8005574:	0800589b 	.word	0x0800589b
 8005578:	080058d3 	.word	0x080058d3
 800557c:	080058f7 	.word	0x080058f7

08005580 <_cleanup_r>:
 8005580:	4901      	ldr	r1, [pc, #4]	; (8005588 <_cleanup_r+0x8>)
 8005582:	f000 b8af 	b.w	80056e4 <_fwalk_reent>
 8005586:	bf00      	nop
 8005588:	080054c1 	.word	0x080054c1

0800558c <__sfmoreglue>:
 800558c:	b570      	push	{r4, r5, r6, lr}
 800558e:	1e4a      	subs	r2, r1, #1
 8005590:	2568      	movs	r5, #104	; 0x68
 8005592:	4355      	muls	r5, r2
 8005594:	460e      	mov	r6, r1
 8005596:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800559a:	f7ff fc23 	bl	8004de4 <_malloc_r>
 800559e:	4604      	mov	r4, r0
 80055a0:	b140      	cbz	r0, 80055b4 <__sfmoreglue+0x28>
 80055a2:	2100      	movs	r1, #0
 80055a4:	e9c0 1600 	strd	r1, r6, [r0]
 80055a8:	300c      	adds	r0, #12
 80055aa:	60a0      	str	r0, [r4, #8]
 80055ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80055b0:	f7fd fd42 	bl	8003038 <memset>
 80055b4:	4620      	mov	r0, r4
 80055b6:	bd70      	pop	{r4, r5, r6, pc}

080055b8 <__sfp_lock_acquire>:
 80055b8:	4801      	ldr	r0, [pc, #4]	; (80055c0 <__sfp_lock_acquire+0x8>)
 80055ba:	f000 b8b3 	b.w	8005724 <__retarget_lock_acquire_recursive>
 80055be:	bf00      	nop
 80055c0:	20000a20 	.word	0x20000a20

080055c4 <__sfp_lock_release>:
 80055c4:	4801      	ldr	r0, [pc, #4]	; (80055cc <__sfp_lock_release+0x8>)
 80055c6:	f000 b8ae 	b.w	8005726 <__retarget_lock_release_recursive>
 80055ca:	bf00      	nop
 80055cc:	20000a20 	.word	0x20000a20

080055d0 <__sinit_lock_acquire>:
 80055d0:	4801      	ldr	r0, [pc, #4]	; (80055d8 <__sinit_lock_acquire+0x8>)
 80055d2:	f000 b8a7 	b.w	8005724 <__retarget_lock_acquire_recursive>
 80055d6:	bf00      	nop
 80055d8:	20000a1b 	.word	0x20000a1b

080055dc <__sinit_lock_release>:
 80055dc:	4801      	ldr	r0, [pc, #4]	; (80055e4 <__sinit_lock_release+0x8>)
 80055de:	f000 b8a2 	b.w	8005726 <__retarget_lock_release_recursive>
 80055e2:	bf00      	nop
 80055e4:	20000a1b 	.word	0x20000a1b

080055e8 <__sinit>:
 80055e8:	b510      	push	{r4, lr}
 80055ea:	4604      	mov	r4, r0
 80055ec:	f7ff fff0 	bl	80055d0 <__sinit_lock_acquire>
 80055f0:	69a3      	ldr	r3, [r4, #24]
 80055f2:	b11b      	cbz	r3, 80055fc <__sinit+0x14>
 80055f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055f8:	f7ff bff0 	b.w	80055dc <__sinit_lock_release>
 80055fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005600:	6523      	str	r3, [r4, #80]	; 0x50
 8005602:	4b13      	ldr	r3, [pc, #76]	; (8005650 <__sinit+0x68>)
 8005604:	4a13      	ldr	r2, [pc, #76]	; (8005654 <__sinit+0x6c>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	62a2      	str	r2, [r4, #40]	; 0x28
 800560a:	42a3      	cmp	r3, r4
 800560c:	bf04      	itt	eq
 800560e:	2301      	moveq	r3, #1
 8005610:	61a3      	streq	r3, [r4, #24]
 8005612:	4620      	mov	r0, r4
 8005614:	f000 f820 	bl	8005658 <__sfp>
 8005618:	6060      	str	r0, [r4, #4]
 800561a:	4620      	mov	r0, r4
 800561c:	f000 f81c 	bl	8005658 <__sfp>
 8005620:	60a0      	str	r0, [r4, #8]
 8005622:	4620      	mov	r0, r4
 8005624:	f000 f818 	bl	8005658 <__sfp>
 8005628:	2200      	movs	r2, #0
 800562a:	60e0      	str	r0, [r4, #12]
 800562c:	2104      	movs	r1, #4
 800562e:	6860      	ldr	r0, [r4, #4]
 8005630:	f7ff ff82 	bl	8005538 <std>
 8005634:	68a0      	ldr	r0, [r4, #8]
 8005636:	2201      	movs	r2, #1
 8005638:	2109      	movs	r1, #9
 800563a:	f7ff ff7d 	bl	8005538 <std>
 800563e:	68e0      	ldr	r0, [r4, #12]
 8005640:	2202      	movs	r2, #2
 8005642:	2112      	movs	r1, #18
 8005644:	f7ff ff78 	bl	8005538 <std>
 8005648:	2301      	movs	r3, #1
 800564a:	61a3      	str	r3, [r4, #24]
 800564c:	e7d2      	b.n	80055f4 <__sinit+0xc>
 800564e:	bf00      	nop
 8005650:	08005a00 	.word	0x08005a00
 8005654:	08005581 	.word	0x08005581

08005658 <__sfp>:
 8005658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800565a:	4607      	mov	r7, r0
 800565c:	f7ff ffac 	bl	80055b8 <__sfp_lock_acquire>
 8005660:	4b1e      	ldr	r3, [pc, #120]	; (80056dc <__sfp+0x84>)
 8005662:	681e      	ldr	r6, [r3, #0]
 8005664:	69b3      	ldr	r3, [r6, #24]
 8005666:	b913      	cbnz	r3, 800566e <__sfp+0x16>
 8005668:	4630      	mov	r0, r6
 800566a:	f7ff ffbd 	bl	80055e8 <__sinit>
 800566e:	3648      	adds	r6, #72	; 0x48
 8005670:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005674:	3b01      	subs	r3, #1
 8005676:	d503      	bpl.n	8005680 <__sfp+0x28>
 8005678:	6833      	ldr	r3, [r6, #0]
 800567a:	b30b      	cbz	r3, 80056c0 <__sfp+0x68>
 800567c:	6836      	ldr	r6, [r6, #0]
 800567e:	e7f7      	b.n	8005670 <__sfp+0x18>
 8005680:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005684:	b9d5      	cbnz	r5, 80056bc <__sfp+0x64>
 8005686:	4b16      	ldr	r3, [pc, #88]	; (80056e0 <__sfp+0x88>)
 8005688:	60e3      	str	r3, [r4, #12]
 800568a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800568e:	6665      	str	r5, [r4, #100]	; 0x64
 8005690:	f000 f847 	bl	8005722 <__retarget_lock_init_recursive>
 8005694:	f7ff ff96 	bl	80055c4 <__sfp_lock_release>
 8005698:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800569c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80056a0:	6025      	str	r5, [r4, #0]
 80056a2:	61a5      	str	r5, [r4, #24]
 80056a4:	2208      	movs	r2, #8
 80056a6:	4629      	mov	r1, r5
 80056a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80056ac:	f7fd fcc4 	bl	8003038 <memset>
 80056b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80056b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80056b8:	4620      	mov	r0, r4
 80056ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056bc:	3468      	adds	r4, #104	; 0x68
 80056be:	e7d9      	b.n	8005674 <__sfp+0x1c>
 80056c0:	2104      	movs	r1, #4
 80056c2:	4638      	mov	r0, r7
 80056c4:	f7ff ff62 	bl	800558c <__sfmoreglue>
 80056c8:	4604      	mov	r4, r0
 80056ca:	6030      	str	r0, [r6, #0]
 80056cc:	2800      	cmp	r0, #0
 80056ce:	d1d5      	bne.n	800567c <__sfp+0x24>
 80056d0:	f7ff ff78 	bl	80055c4 <__sfp_lock_release>
 80056d4:	230c      	movs	r3, #12
 80056d6:	603b      	str	r3, [r7, #0]
 80056d8:	e7ee      	b.n	80056b8 <__sfp+0x60>
 80056da:	bf00      	nop
 80056dc:	08005a00 	.word	0x08005a00
 80056e0:	ffff0001 	.word	0xffff0001

080056e4 <_fwalk_reent>:
 80056e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056e8:	4606      	mov	r6, r0
 80056ea:	4688      	mov	r8, r1
 80056ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80056f0:	2700      	movs	r7, #0
 80056f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80056f6:	f1b9 0901 	subs.w	r9, r9, #1
 80056fa:	d505      	bpl.n	8005708 <_fwalk_reent+0x24>
 80056fc:	6824      	ldr	r4, [r4, #0]
 80056fe:	2c00      	cmp	r4, #0
 8005700:	d1f7      	bne.n	80056f2 <_fwalk_reent+0xe>
 8005702:	4638      	mov	r0, r7
 8005704:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005708:	89ab      	ldrh	r3, [r5, #12]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d907      	bls.n	800571e <_fwalk_reent+0x3a>
 800570e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005712:	3301      	adds	r3, #1
 8005714:	d003      	beq.n	800571e <_fwalk_reent+0x3a>
 8005716:	4629      	mov	r1, r5
 8005718:	4630      	mov	r0, r6
 800571a:	47c0      	blx	r8
 800571c:	4307      	orrs	r7, r0
 800571e:	3568      	adds	r5, #104	; 0x68
 8005720:	e7e9      	b.n	80056f6 <_fwalk_reent+0x12>

08005722 <__retarget_lock_init_recursive>:
 8005722:	4770      	bx	lr

08005724 <__retarget_lock_acquire_recursive>:
 8005724:	4770      	bx	lr

08005726 <__retarget_lock_release_recursive>:
 8005726:	4770      	bx	lr

08005728 <__swhatbuf_r>:
 8005728:	b570      	push	{r4, r5, r6, lr}
 800572a:	460e      	mov	r6, r1
 800572c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005730:	2900      	cmp	r1, #0
 8005732:	b096      	sub	sp, #88	; 0x58
 8005734:	4614      	mov	r4, r2
 8005736:	461d      	mov	r5, r3
 8005738:	da07      	bge.n	800574a <__swhatbuf_r+0x22>
 800573a:	2300      	movs	r3, #0
 800573c:	602b      	str	r3, [r5, #0]
 800573e:	89b3      	ldrh	r3, [r6, #12]
 8005740:	061a      	lsls	r2, r3, #24
 8005742:	d410      	bmi.n	8005766 <__swhatbuf_r+0x3e>
 8005744:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005748:	e00e      	b.n	8005768 <__swhatbuf_r+0x40>
 800574a:	466a      	mov	r2, sp
 800574c:	f000 f8fa 	bl	8005944 <_fstat_r>
 8005750:	2800      	cmp	r0, #0
 8005752:	dbf2      	blt.n	800573a <__swhatbuf_r+0x12>
 8005754:	9a01      	ldr	r2, [sp, #4]
 8005756:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800575a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800575e:	425a      	negs	r2, r3
 8005760:	415a      	adcs	r2, r3
 8005762:	602a      	str	r2, [r5, #0]
 8005764:	e7ee      	b.n	8005744 <__swhatbuf_r+0x1c>
 8005766:	2340      	movs	r3, #64	; 0x40
 8005768:	2000      	movs	r0, #0
 800576a:	6023      	str	r3, [r4, #0]
 800576c:	b016      	add	sp, #88	; 0x58
 800576e:	bd70      	pop	{r4, r5, r6, pc}

08005770 <__smakebuf_r>:
 8005770:	898b      	ldrh	r3, [r1, #12]
 8005772:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005774:	079d      	lsls	r5, r3, #30
 8005776:	4606      	mov	r6, r0
 8005778:	460c      	mov	r4, r1
 800577a:	d507      	bpl.n	800578c <__smakebuf_r+0x1c>
 800577c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005780:	6023      	str	r3, [r4, #0]
 8005782:	6123      	str	r3, [r4, #16]
 8005784:	2301      	movs	r3, #1
 8005786:	6163      	str	r3, [r4, #20]
 8005788:	b002      	add	sp, #8
 800578a:	bd70      	pop	{r4, r5, r6, pc}
 800578c:	ab01      	add	r3, sp, #4
 800578e:	466a      	mov	r2, sp
 8005790:	f7ff ffca 	bl	8005728 <__swhatbuf_r>
 8005794:	9900      	ldr	r1, [sp, #0]
 8005796:	4605      	mov	r5, r0
 8005798:	4630      	mov	r0, r6
 800579a:	f7ff fb23 	bl	8004de4 <_malloc_r>
 800579e:	b948      	cbnz	r0, 80057b4 <__smakebuf_r+0x44>
 80057a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057a4:	059a      	lsls	r2, r3, #22
 80057a6:	d4ef      	bmi.n	8005788 <__smakebuf_r+0x18>
 80057a8:	f023 0303 	bic.w	r3, r3, #3
 80057ac:	f043 0302 	orr.w	r3, r3, #2
 80057b0:	81a3      	strh	r3, [r4, #12]
 80057b2:	e7e3      	b.n	800577c <__smakebuf_r+0xc>
 80057b4:	4b0d      	ldr	r3, [pc, #52]	; (80057ec <__smakebuf_r+0x7c>)
 80057b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80057b8:	89a3      	ldrh	r3, [r4, #12]
 80057ba:	6020      	str	r0, [r4, #0]
 80057bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057c0:	81a3      	strh	r3, [r4, #12]
 80057c2:	9b00      	ldr	r3, [sp, #0]
 80057c4:	6163      	str	r3, [r4, #20]
 80057c6:	9b01      	ldr	r3, [sp, #4]
 80057c8:	6120      	str	r0, [r4, #16]
 80057ca:	b15b      	cbz	r3, 80057e4 <__smakebuf_r+0x74>
 80057cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057d0:	4630      	mov	r0, r6
 80057d2:	f000 f8c9 	bl	8005968 <_isatty_r>
 80057d6:	b128      	cbz	r0, 80057e4 <__smakebuf_r+0x74>
 80057d8:	89a3      	ldrh	r3, [r4, #12]
 80057da:	f023 0303 	bic.w	r3, r3, #3
 80057de:	f043 0301 	orr.w	r3, r3, #1
 80057e2:	81a3      	strh	r3, [r4, #12]
 80057e4:	89a0      	ldrh	r0, [r4, #12]
 80057e6:	4305      	orrs	r5, r0
 80057e8:	81a5      	strh	r5, [r4, #12]
 80057ea:	e7cd      	b.n	8005788 <__smakebuf_r+0x18>
 80057ec:	08005581 	.word	0x08005581

080057f0 <_raise_r>:
 80057f0:	291f      	cmp	r1, #31
 80057f2:	b538      	push	{r3, r4, r5, lr}
 80057f4:	4604      	mov	r4, r0
 80057f6:	460d      	mov	r5, r1
 80057f8:	d904      	bls.n	8005804 <_raise_r+0x14>
 80057fa:	2316      	movs	r3, #22
 80057fc:	6003      	str	r3, [r0, #0]
 80057fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005802:	bd38      	pop	{r3, r4, r5, pc}
 8005804:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005806:	b112      	cbz	r2, 800580e <_raise_r+0x1e>
 8005808:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800580c:	b94b      	cbnz	r3, 8005822 <_raise_r+0x32>
 800580e:	4620      	mov	r0, r4
 8005810:	f000 f830 	bl	8005874 <_getpid_r>
 8005814:	462a      	mov	r2, r5
 8005816:	4601      	mov	r1, r0
 8005818:	4620      	mov	r0, r4
 800581a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800581e:	f000 b817 	b.w	8005850 <_kill_r>
 8005822:	2b01      	cmp	r3, #1
 8005824:	d00a      	beq.n	800583c <_raise_r+0x4c>
 8005826:	1c59      	adds	r1, r3, #1
 8005828:	d103      	bne.n	8005832 <_raise_r+0x42>
 800582a:	2316      	movs	r3, #22
 800582c:	6003      	str	r3, [r0, #0]
 800582e:	2001      	movs	r0, #1
 8005830:	e7e7      	b.n	8005802 <_raise_r+0x12>
 8005832:	2400      	movs	r4, #0
 8005834:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005838:	4628      	mov	r0, r5
 800583a:	4798      	blx	r3
 800583c:	2000      	movs	r0, #0
 800583e:	e7e0      	b.n	8005802 <_raise_r+0x12>

08005840 <raise>:
 8005840:	4b02      	ldr	r3, [pc, #8]	; (800584c <raise+0xc>)
 8005842:	4601      	mov	r1, r0
 8005844:	6818      	ldr	r0, [r3, #0]
 8005846:	f7ff bfd3 	b.w	80057f0 <_raise_r>
 800584a:	bf00      	nop
 800584c:	200001dc 	.word	0x200001dc

08005850 <_kill_r>:
 8005850:	b538      	push	{r3, r4, r5, lr}
 8005852:	4d07      	ldr	r5, [pc, #28]	; (8005870 <_kill_r+0x20>)
 8005854:	2300      	movs	r3, #0
 8005856:	4604      	mov	r4, r0
 8005858:	4608      	mov	r0, r1
 800585a:	4611      	mov	r1, r2
 800585c:	602b      	str	r3, [r5, #0]
 800585e:	f7fb fe21 	bl	80014a4 <_kill>
 8005862:	1c43      	adds	r3, r0, #1
 8005864:	d102      	bne.n	800586c <_kill_r+0x1c>
 8005866:	682b      	ldr	r3, [r5, #0]
 8005868:	b103      	cbz	r3, 800586c <_kill_r+0x1c>
 800586a:	6023      	str	r3, [r4, #0]
 800586c:	bd38      	pop	{r3, r4, r5, pc}
 800586e:	bf00      	nop
 8005870:	20000a14 	.word	0x20000a14

08005874 <_getpid_r>:
 8005874:	f7fb be0e 	b.w	8001494 <_getpid>

08005878 <__sread>:
 8005878:	b510      	push	{r4, lr}
 800587a:	460c      	mov	r4, r1
 800587c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005880:	f000 f894 	bl	80059ac <_read_r>
 8005884:	2800      	cmp	r0, #0
 8005886:	bfab      	itete	ge
 8005888:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800588a:	89a3      	ldrhlt	r3, [r4, #12]
 800588c:	181b      	addge	r3, r3, r0
 800588e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005892:	bfac      	ite	ge
 8005894:	6563      	strge	r3, [r4, #84]	; 0x54
 8005896:	81a3      	strhlt	r3, [r4, #12]
 8005898:	bd10      	pop	{r4, pc}

0800589a <__swrite>:
 800589a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800589e:	461f      	mov	r7, r3
 80058a0:	898b      	ldrh	r3, [r1, #12]
 80058a2:	05db      	lsls	r3, r3, #23
 80058a4:	4605      	mov	r5, r0
 80058a6:	460c      	mov	r4, r1
 80058a8:	4616      	mov	r6, r2
 80058aa:	d505      	bpl.n	80058b8 <__swrite+0x1e>
 80058ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058b0:	2302      	movs	r3, #2
 80058b2:	2200      	movs	r2, #0
 80058b4:	f000 f868 	bl	8005988 <_lseek_r>
 80058b8:	89a3      	ldrh	r3, [r4, #12]
 80058ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058c2:	81a3      	strh	r3, [r4, #12]
 80058c4:	4632      	mov	r2, r6
 80058c6:	463b      	mov	r3, r7
 80058c8:	4628      	mov	r0, r5
 80058ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058ce:	f000 b817 	b.w	8005900 <_write_r>

080058d2 <__sseek>:
 80058d2:	b510      	push	{r4, lr}
 80058d4:	460c      	mov	r4, r1
 80058d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058da:	f000 f855 	bl	8005988 <_lseek_r>
 80058de:	1c43      	adds	r3, r0, #1
 80058e0:	89a3      	ldrh	r3, [r4, #12]
 80058e2:	bf15      	itete	ne
 80058e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80058e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80058ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80058ee:	81a3      	strheq	r3, [r4, #12]
 80058f0:	bf18      	it	ne
 80058f2:	81a3      	strhne	r3, [r4, #12]
 80058f4:	bd10      	pop	{r4, pc}

080058f6 <__sclose>:
 80058f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058fa:	f000 b813 	b.w	8005924 <_close_r>
	...

08005900 <_write_r>:
 8005900:	b538      	push	{r3, r4, r5, lr}
 8005902:	4d07      	ldr	r5, [pc, #28]	; (8005920 <_write_r+0x20>)
 8005904:	4604      	mov	r4, r0
 8005906:	4608      	mov	r0, r1
 8005908:	4611      	mov	r1, r2
 800590a:	2200      	movs	r2, #0
 800590c:	602a      	str	r2, [r5, #0]
 800590e:	461a      	mov	r2, r3
 8005910:	f7fb fc64 	bl	80011dc <_write>
 8005914:	1c43      	adds	r3, r0, #1
 8005916:	d102      	bne.n	800591e <_write_r+0x1e>
 8005918:	682b      	ldr	r3, [r5, #0]
 800591a:	b103      	cbz	r3, 800591e <_write_r+0x1e>
 800591c:	6023      	str	r3, [r4, #0]
 800591e:	bd38      	pop	{r3, r4, r5, pc}
 8005920:	20000a14 	.word	0x20000a14

08005924 <_close_r>:
 8005924:	b538      	push	{r3, r4, r5, lr}
 8005926:	4d06      	ldr	r5, [pc, #24]	; (8005940 <_close_r+0x1c>)
 8005928:	2300      	movs	r3, #0
 800592a:	4604      	mov	r4, r0
 800592c:	4608      	mov	r0, r1
 800592e:	602b      	str	r3, [r5, #0]
 8005930:	f7fb fdef 	bl	8001512 <_close>
 8005934:	1c43      	adds	r3, r0, #1
 8005936:	d102      	bne.n	800593e <_close_r+0x1a>
 8005938:	682b      	ldr	r3, [r5, #0]
 800593a:	b103      	cbz	r3, 800593e <_close_r+0x1a>
 800593c:	6023      	str	r3, [r4, #0]
 800593e:	bd38      	pop	{r3, r4, r5, pc}
 8005940:	20000a14 	.word	0x20000a14

08005944 <_fstat_r>:
 8005944:	b538      	push	{r3, r4, r5, lr}
 8005946:	4d07      	ldr	r5, [pc, #28]	; (8005964 <_fstat_r+0x20>)
 8005948:	2300      	movs	r3, #0
 800594a:	4604      	mov	r4, r0
 800594c:	4608      	mov	r0, r1
 800594e:	4611      	mov	r1, r2
 8005950:	602b      	str	r3, [r5, #0]
 8005952:	f7fb fdea 	bl	800152a <_fstat>
 8005956:	1c43      	adds	r3, r0, #1
 8005958:	d102      	bne.n	8005960 <_fstat_r+0x1c>
 800595a:	682b      	ldr	r3, [r5, #0]
 800595c:	b103      	cbz	r3, 8005960 <_fstat_r+0x1c>
 800595e:	6023      	str	r3, [r4, #0]
 8005960:	bd38      	pop	{r3, r4, r5, pc}
 8005962:	bf00      	nop
 8005964:	20000a14 	.word	0x20000a14

08005968 <_isatty_r>:
 8005968:	b538      	push	{r3, r4, r5, lr}
 800596a:	4d06      	ldr	r5, [pc, #24]	; (8005984 <_isatty_r+0x1c>)
 800596c:	2300      	movs	r3, #0
 800596e:	4604      	mov	r4, r0
 8005970:	4608      	mov	r0, r1
 8005972:	602b      	str	r3, [r5, #0]
 8005974:	f7fb fde9 	bl	800154a <_isatty>
 8005978:	1c43      	adds	r3, r0, #1
 800597a:	d102      	bne.n	8005982 <_isatty_r+0x1a>
 800597c:	682b      	ldr	r3, [r5, #0]
 800597e:	b103      	cbz	r3, 8005982 <_isatty_r+0x1a>
 8005980:	6023      	str	r3, [r4, #0]
 8005982:	bd38      	pop	{r3, r4, r5, pc}
 8005984:	20000a14 	.word	0x20000a14

08005988 <_lseek_r>:
 8005988:	b538      	push	{r3, r4, r5, lr}
 800598a:	4d07      	ldr	r5, [pc, #28]	; (80059a8 <_lseek_r+0x20>)
 800598c:	4604      	mov	r4, r0
 800598e:	4608      	mov	r0, r1
 8005990:	4611      	mov	r1, r2
 8005992:	2200      	movs	r2, #0
 8005994:	602a      	str	r2, [r5, #0]
 8005996:	461a      	mov	r2, r3
 8005998:	f7fb fde2 	bl	8001560 <_lseek>
 800599c:	1c43      	adds	r3, r0, #1
 800599e:	d102      	bne.n	80059a6 <_lseek_r+0x1e>
 80059a0:	682b      	ldr	r3, [r5, #0]
 80059a2:	b103      	cbz	r3, 80059a6 <_lseek_r+0x1e>
 80059a4:	6023      	str	r3, [r4, #0]
 80059a6:	bd38      	pop	{r3, r4, r5, pc}
 80059a8:	20000a14 	.word	0x20000a14

080059ac <_read_r>:
 80059ac:	b538      	push	{r3, r4, r5, lr}
 80059ae:	4d07      	ldr	r5, [pc, #28]	; (80059cc <_read_r+0x20>)
 80059b0:	4604      	mov	r4, r0
 80059b2:	4608      	mov	r0, r1
 80059b4:	4611      	mov	r1, r2
 80059b6:	2200      	movs	r2, #0
 80059b8:	602a      	str	r2, [r5, #0]
 80059ba:	461a      	mov	r2, r3
 80059bc:	f7fb fd8c 	bl	80014d8 <_read>
 80059c0:	1c43      	adds	r3, r0, #1
 80059c2:	d102      	bne.n	80059ca <_read_r+0x1e>
 80059c4:	682b      	ldr	r3, [r5, #0]
 80059c6:	b103      	cbz	r3, 80059ca <_read_r+0x1e>
 80059c8:	6023      	str	r3, [r4, #0]
 80059ca:	bd38      	pop	{r3, r4, r5, pc}
 80059cc:	20000a14 	.word	0x20000a14

080059d0 <_init>:
 80059d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059d2:	bf00      	nop
 80059d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059d6:	bc08      	pop	{r3}
 80059d8:	469e      	mov	lr, r3
 80059da:	4770      	bx	lr

080059dc <_fini>:
 80059dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059de:	bf00      	nop
 80059e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059e2:	bc08      	pop	{r3}
 80059e4:	469e      	mov	lr, r3
 80059e6:	4770      	bx	lr
